Title: Computer Organization and Design Fundamentals
Authors: David Tarnoff

Summarization of Content

Chapter 1 - Digital Signals and Systems
    a. Should Software Engineers Know About Hardare?
        - Important Concepts/Advantages - System Design Tools, Software Design Tools, Troubleshooting Skills, Interconnectivity, Marketability
    b. Non-Digital Signals
        - Analog - continuous, infinite number of places to the right of the decimal point
    c. Digital Signals
        - Digital Value - fixed number of digits the right of the decimal place, discrete
        - Sample - measurements at different intervals
        - Sample Rate - the rate that samples are taken
        - Concerns - information can be lost between measurements and lost due to the rounding of the measurement
    d. Conversion Systems
        - Sensor (Weak, Noisy) -> Signal Conditioning (Strong, Clean) -> Analog to Digital Converter (Digital Measurement)
        - Benefits
            - Noise cannot attach itself to a digital signal, sequence of numbers do not change (unless loss during transporation e.g.)
            - Algorithms can be used to operate on data - DSP or Digital Signal Processing
    e. Representation of Digital Signals
        - Transistor - remembers either 0 (logic 0) or 1 (logic 1) i.e. a binary system
    f. Types of Digital Signals
        - Edges
            - Rising Edge - a transition from a logic 0 to a logic 1
            - Falling Edge - a transition from a logic 1 to a logic 0
        - Pulses
            - Pulse - a signal changes from one value to the other for a short period, then returns to its original value
            - Positive-Going Pulse - idle state of logic 0, and a pulse to logic 1
            - Negative-Going Pulse - idle state of logic 1, and a pulse to logic 0
        - Non-Periodic Pulse Trains - some signals do not have a characteristic pattern in their changes e.g. ethernet or address lines
        - Periodic Pulse Trains - all measurements between any two subsequent identical parts of the waveform produce the same value (period)
            - Width - time at logic 1 during the period, may differ with another train with a similar period
        - Frequence (Hertz) = 1 / period in seconds
            - Example - .1 second to complete period, so 1 / .1 = 10 or 10hz i.e. 10 periods per second
        - Pulse Width Modulation
            - Duty Cycle - represents the percent of time that a periodic cycle is a logic 1
            - Dimming lights can be done by changing pulse train/duty cycle, shine half as bright is to reduce by 50%

Chapter 2 - Numbering Systems
    a. Unsigned Binary Counting
        - 0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1110, 1111
    b. Binary Terminology
        - Nibble - a four bit binary number
        - Byte - eight it binary numbe 
        - Word - sixteen bit, two byte binary number
        - Double Word - thirty-two bit, four byte binary number
    c. Unsigned Binary to Decimal Conversion
        - 2^N*(1 | 0) + , ...
    d. Decimal to Unsiged Binary
        - Decimal / 2, take remainder
    e. Hexadecimal Representation
        - ABC = 1010 1011 1100
        - Converting Binary to Hexadecimal - group by four, use table
        - Converting Decimal to Hexadecimal - decimal / 16, take remainder
        - Converting Hexadecimal to Decimal - 16^N*(X) + , ...
    f. Binary Coded Decimal
        - 1692 is 0001 0110 1001 0010

Chapter 3 - Binary Math and Signed Representations
    a. Binary Addition
        -  0010
        - +1010
        -  1100
    b. Binary Subtraction
        -  1010
        - -1001
        -  0001
    c. Binary Complements
        - One's Complement - 1010 = 0101
        - Two's Complement - 1010 = 0101 + 1 = 0110
    d. Signed
        - Most Significant Bit as A Sign Indicator
            - A binary value with a 0 in the MSB position is considered positive
            - A binary value with a 1 in the MSB position is considered negative
    e. Hexadecimal Addition
        -  ABC
        - +921
        - 13DD
    f. Multiplication
        - Shifting all of the bit positions to the left is multiplying by two
        - 000001001 = 9, 18 = 000010010
    g. Divison
        - Shifting all of the bit positions to the right is dividing by two
        - 000001001 = 9, 18 = 000010010
        - A division by 16, is 4 shifts to the right, as 2^4 = 16
        - Important - make sure you verify data isn't being lost*

Chapter 4 - Logic Functions and Gates
    a. Logic Gate Basics
        - Gate - takes one or more binary signals as input and using a specific algorithm ouputs a single bit as a result
        - NOT Gate - takes a single input and flips the value of the signal
        - AND Gate - produces 1 only if all of its inputs are logic 1
            - Example - A lamp is on if there is power, wall switch, and lamp switch
        - OR Gate - produces 1 if any of its inputs are logic 1
            - Example - A security alarm goes off if door open sensor, or glass break sensor, or motion sensor goes off
        - XOR Gate - produces 1 if number of 1 is odd
    b. Truth Tables
    c. Timing Diagrams for Gates - REVIEW
    d. Combinational Logic
        - Power of logic gates comes when you combine them to create combinational logic
        - Example
            - Door, Glass, Motion sensors into OR Gate
            - Result of OR Gate + Armed into AND Gate
        - Gates
            - NAND GATE, NOR GATE, EXCLUSIVE NOR
    e. Truth Tables for Combinational Logic
        - Start with A, B, C
        - Then Complete Each Step, Using the Appropriate Inputs
        - A Step - B value and NOT Gate
        - B Step - Result of A Step, and A value
        - C Step - Result of B Step and C Value
        - D Step - Result of C and NOT Gate
    f. Adder Circuit in ALU
        - 4-Bit Parallel Adder - 74LS283 - assembly/circuits/four_bit_adder_circuit
        - Full Adder Truth Table - assembly/circuits/full_adder_truth_table
        - Full Adder Boolean Expressions
            - Sum = (A XOR B) XOR Cin
            - Carry Out = A AND B OR Cin(A XOR B)
        - Full Adder Circuit - assembly/circuits/full_adder_circuitverse

Chapter 5 - Boolean Algebra
    a. Need for Boolean Expressions
        - Describes digital circuitry, and the possibly complex relationships amongst signals
    b. Symbols of Boolean Algebra
        - AND, OR, NOT, XOR, NAND, NOR, NOTXOR
    c. Laws of Boolean Algebra
        - Commutative Law - A + B = B + A
        - Associative Law - A(BC) = (AB)C or A+(B+C) = (A+B)+C
        - Distributive Law - A(B+C) = AB+AC
        - OR Rules
            - A + 0 = A
            - A + 1 = 1
            - A + A = A
            - A + !A = 1
        - AND Rules
            - A^0 = 0
            - A^A = A
            - A^!A = 0
            - A^1 = A
        - XOR Rules
            - A XOR O = A
            - A XOR 1 = !A
            - A XOR A = 0
            - A XOR !A = 1
    d. Simplification - through use of laws of boolean algebra
    e. DeMorgan's Theorem
        - !(A+B) = !A^!B
        - !A + !B = !(AB)

Chapter 6 - Standard Boolean Expression Formats
    a. Sum of Products - a sum of one or more products e.g. ABCD + A!BD + C!D + A!D
    b. Converting an SOP Expression to a Truth Table - Review Class Notes
    c. Converting a Truth Table to an SOP Expression - Review Class Notes
    d. Product of Sums - Outputs of multiple OR gates are combined with a single AND gate
    e. Converting POS to Truth Table - Review Class Notes
    f. Converting a Truth Table to a POS Expression - Review Class Notes

Chapter 7 - Karnaugh Maps
    a. Main Idea - graphic representations of truth tables
    b. Using Karnaugh Maps
        - The key to effectively using K-Maps is to find the largest group of adjacent cells containing 1's
        - The larger the groups, the fewer products and inputs will be needed to create the boolean expression that produces the truth table
        - Rules
            - Grouping must be in the shape of a rectangle
            - All cells in a rectangle must contain ones, or an X
            - The number of the cells must equal a power of two i.e. 1, 2, 4, 8, or 16
            - Outside edges of maps are considered adjacent
            - Cells may be contained in more than one rectangle, but every rectangle must have atleast one cell unique to it
            - Every 1 must be covered by at least one rectangle

Chapter 8 - Combinational Logic Applications
    a. Adders
        - Half Adder
            - Inputs - A, B
            - Outputs - Sum, Carry Out
        - Full Adder
            - Inputs - A, B, CarryIn
            - Outputs - Sum, CarryOut
        - Daisy chain Full Adders to produce adder's of any size
    b. Seven Segment Displays
        - Segments - A, B, C, D, E, F, G
        - Main Idea - light segments to produce numbers e.g. b and c produce 1
        - Inputs - A, B, C, D
        - Outputs - Active Mix of A, B, C, D, E, F, G
    c. Active Low Signals
        - On signal is equivalent to a logic 0, and off is equivalent to a logic 1
    d. Decoders
        - Digital signals are used to enable a device
    e. Multiplexers
        - Uses a set of control inputs to select which of several data inputs is to be connected to a single data output
    f. Demultiplexer
        - Take a single input and select one channel out of a group of output channels to which it will route the input
    g. Integrated Circuits
        - Chips made to perform specific tasks like those mentioned above

Chapter 10 - Latches
    a. New Truth Table Symbols
        - Edges/Transitions
            - Rising Edge - Transition from a zero to a one
            - Falling Edge - Transition from a one to a zero
        - Stored Values
            - Q represents a stored value
        - Undefined Values - states that should not occur*
    b. The S-R, D, T, and JK Flip Flops - Review Class Notes

Chaptert 11 - State Machines
    a. Introduciton to State Machines
        - State Machine - a digital ciruit that relies not only on circuit's inputs, but also the current state of the system to determine the proper output
        - States - defines the current conditions of a system
        - State Diagrams - models a state machine by using circles to represent each of the possible states and arrows to represent all of the possible transitions between the states
        - Clock - used to drive the system from one state to another
        - Errors in State Diagrams
            - Any state other than the initial state that has no transitions going into it should be removed.
            - For a system with n inputs, there should be 2^n transitions coming out of every state
    b. State Machine Design Process
        - Define the System
        - Define the State Diagram
        - Determine Latch and Number Needed
        - Developer Truth Tables, Next State Truth Tables
        - Produce Karnaugh Maps for Each Next State and Output
        - Generate Boolean Expressions
        - Produce Circuit

Chapter 12 - Introduction to Memory
    a. Early Memory
        - Magnetic Core Memory - made by weaving fine copper wires through tiny rings of magnetic material in an array, when electrical current was sent through the center of one of the rings, it polarized it with a magentic charge
    b. Organization of Memory Device
        - Memory is like a matrix, where the number of rows identifies the number of memory location in the memory, and the number of columsn identifies the number of bits in each memory location
        - To store or retrieve data, the processor must place a binary number called an address on special inputs to teh memory device
        - Data Lines - allow data to either be stored or read from the latches
        - Chip Select - enables and disables the memory device
        - Read Enable - whether to read or not
        - Write Enable - whether to write or now
        - Address Decoder - selects exactly one row of the memory array to be active, leaving the others inactive
    c. Interfacing Memory to a Processor
        - Bus - Group of wires that connect and enable communication on the chip
            - Data Lines - electrical connections used to send data or receive data from memory
            - Address Lines - controlled by the processor and are used to specify which memory location the processor wishes to communicate with
            - Control Lines - signals that manage the transfer of data
            - Bus Contention - two devices tried to drive the data lines simulataneously
        - Memory Maps
            - Memory - several filing cabinets where each folder can contain a single piece of data, size of the data is the number of bits that can be stored in a single memory location
            - Memory Map - represents a system's memory with a long, vertical column
            - Memory Space - full address range available, 2^m wherer m equals the number of address lines coming out of the processor
                - 20 address lines, 2^20 = 1048576 / 1024 / 1024 = 1MB
        - Address Decoding
            - Method for using an address to enable a unique memory device while leaving all other devices idle
            - Scheme - bits of the full address are divided into two groups.
                - One group that is used to identify the memory device - MSB
                - One group that is used to identify the memory location within the selected memory device - LSB
            - Example
                - A processor with a 256 MB address space is using the address 35E3C03 to access a 16 MB memory device
                    - How many address lines are used to define when the 16 MB memory space is enabled?
                        - 256MB = 2^28 = 268435456 / 1024 / 1024 = 256
                        - 156 / 16 = 16 devices. Four bits are required to produce 16 different values - Four MSB*
                        - Remaining 24 bits are used to unqieuly identify all of its addresses
                    - What is the bit pattern of these enable bits that enables this particular 16MB device?
                        - 0011 = 3
                    - What is the address within the 16MB device that this address is going to transfer data to or from?
                        - 5E3C03 = 0101 1110 0011 1010 0000 0011
                    - What is the lowest address in the memory map of the 16MB device?
                        - 0011 0000 0000 0000 0000 0000 0000
                    - What is the highest address in the memory map of the 16MB device?
                        - 0011 FFFF FFFF FFFF FFFF FFFF FFFF
    d. Memory Mapped Input and Output
        - Practice of interfacing an I/O device as if it was a memory device is called memory mapping
    e. Memory Terminology
        - Random Access Memory - applied to memory that is easily read from and written to by the microprocessor, means that any address can be accessed at any time
        - Read Only Memory - stable and impervious to power loss, cannot be written to without special mechanisms, commonly used to store BIOS - Basic Input Output System
        - Static RAM vs. Dynamic RAM
            - Static Ram - made from an array of latches such as the D-Latch, better adapted for speed
            - Dynamic Ram - using a capacitor made from a pair of conductive plates that are held parallel to each other and very close together but not touching
            - Leakage Current - movement of electrons from one plate to the other

Chapter 13 - Memory Hierarchy
    a. Characteristics of the Memory Hiearchy
        - (FAST, LOW CAPACITY) Registers -> Cache RAM -> Main Memory -> Long Term Storage (SLOW, HIGH CAPACITY)
    b. Physical Characteristics of a Hard Drive
        - Strucutre
            - Platter - magnetic material and a substrate
            - Data is recorded to the platter using a conductive coil called a head
            - Head is shaped like a C, with the gap between the ends positioned to face the magnetic material
            - To write data, an electrical current is passed through the wire creating a magnetic field within the gap of the head close to the disk, this field magnetizes the material on the platter in a specific direction
            - Reversing the current would polarize the magnetic material in the opposite direction
            - Magnetized patterns on the platter represent the data
        - Data Encoding
            - Controller detects the changes in magnetic direction, not the direction of the field itself
            - Set up a clock to define the bit positions, and watch how the magentic field changes with respect to that clock
            - Frequency Modulation - magnetic field change at the beginning and middle of a bit time represented a logic one, while a magnetic field chiange only at the beginning represented a logic zero
            - Modified Frequency Modulation - defines a change in polarization in the middle of a bit time as a one and no changes in the middle as a zero
        - Hard Drive Access Time - Queue, Seek, Rotation, Transfer
        - Organization of Data
            - Tracks - concentric circles of magnetic material
            - Sector - divisions of tracks
    c. Cache RAM
        - Why - principle of locality
            - Spatial Locality - data near current address will be accessed as well
            - Temporal Locality - same data will be accessed repeatedly
        - L1 - In Processor, L2 - Between Processor and Memory
        - Cache Organization - Divide Memory in Blocks
            - Cache has no sequential order, therefore it is the addressing scheme of main memory that is used to define the blocks of words and the method for locating them
            - Block - by removing a small group of bits at the end of an address, the resulting identifier points to a group of memory locations rather than a specific address
            - To organize memory into blocks, a memory address is divided into two logical sets of bits, one to represent the block number and one to identify the word's position or offset within the block
            - Example
                - How many blocks of 8 words are there in a 1 GB memory space?
                    - 1GB uses 30 Address lines i.e. 2^30 - 1073741824 / 1024 / 1024 / 1024 = 1
                    - Three bits are needed to identify eight words - 3
                    - 30 - 3 = 27, 27 bits represent the block
        - Cache Operation
            - When a processor needs a word from memory, a check in the cache and check in main memory is performed, if in the cache, hit, if not, miss
        - Cache Characteristics
            - Size of the Cache
            - Size of a Block - when combined with the size of the cache defines the number of lines
            - Number of Caches - i.e. multiple levels or split cache
            - Mapping Function - link between a block's address in memory and its location in the cache
            - Replacement Algorithm - method used to figure out which block to remove from the cache in order to free up a line
            - Write Policy - how the processor writes data to the cache so that main memory eventually gets updated
        - Cache Mapping Functions
            - Direct Mapping
                - Assuming main memory is divided up into n blocks and the cache has room to contain exactly m blocks, if we divide m into n, we should get an integer that represents the number of times main memory could fill the cache with different blocks from its contents
                - Example
                    - Assume a cache system has been designed such that each block contains 4 words and the cache has 1024 lines i.e. 1024 blocks. What line of the cache is supposed to hodl the block that contains the word from the twenty-bit address 3A456. What is the tag number?
                    - Start by dividing the address into its word id, line id, and tag bits.
                        - 4 = 2^2, then the two least significat beats identify the word, there are 4 words!, 00, 01, 10, 11
                        - Since the cache has 2^10 lines, i.e. 2^10 = 1024, 10 bits are needed to identify the line number.
                        - t = 20 - w - l = 20 - 2 - 10 = 8
                        - 8 bits are the tag bits.
                        - 3A456 = 0011 1010 0100 0101 0110
                            - 10 = word bits
                            - 0100 0101 01 = line bits
                            - 0011 1010 = tag bits
                - Example
                    - 4096 bytes
                    - 16 byte cache line
                    - 4096 / 16 = 256 blocks, 2^8 = 256, so 8 bits for index
                    - 16 byte cache line, so 2^4 = 16, so 4 bits needed for byte
                    - Tag is 32 - 8 - 4 = 20 bits fo the tag
                - Important - Determine the offset by looking at the block size, # of bytes in the block, 2^m that gets you bytes is the offset
                - Important - Determine the number of blocks, memory/block size, 2^m that gives you this is your index
                - Important - Determine tag, totals bits addressing - offset - index bits
            - Fully Associative Mapping
                - Divides the main memory address into two parets, the word id and a tag
                - In order to see if a block is stored in memory, the tag is pulled from the memory address and a search is performed through all of the lines of the cache to see if the block is present
                - Replacement Algorithm
                    - Least Recently Used
                    - First In First Out
                    - Least Frequently Used
                    - Random
            - Set Associative Mapping
                - Uses direct mapping to identify the sets, and the lines within each set are treated like a minature fully associative cache where any block that is to be stored in the set can be stored to any line within the set
                - Example
                    - Cache has 512 lines i.e. 2^9
                    - Block contains 8 words, 2^3
                    - Full Memory Space is 1GB 2^30
                    - Tag Bits are 30 - 3 - 9 = 18
                    - Two Lines Per Set, so 512 / 2 = 256 sets, so 2^8 to determine the line, which means 30 - 3 - 8 = 19 bits for the tag
                    - Four Lines Per Set, so 512 / 4 = 128 sets, so 2^7 to determine the line, which means 30 - 3 - 8 = 20 bits for the tag
                - Example
                    - Identify the set number where the block containing the address 29ABCDE8 will be stored.
                    - In addition, identify the tag, the lower and upper addresses of the BLOCK
                    - Cache is 4 way set with 4K lines, each block contains 16 words, main memory is 1GB
                    - 4096 / 4 = 1024 sets, 2^10 to determine the line
                    - 2^4 = 16, so 4 bits for the offset
                    - 30 - 10 - 4 = 16 bits for the tag
                    - 29ABCDE8 = 00101001101010111100110111101000
                        - 1000 = offset
                        - 0011011110 = set
                        - 001010011010101111 = tag
                    - Lowest Address - 00101001101010111100110111100000
                    - Highest Address - 00101001101010111100110111101111
            - Cache Write Policy - method used to determine how memory is updated when the cache is written to the processor
                - Write Through Polciy - cache update memory every time the processor writes to the cache
                - Write Back Policy - cache updates main memory only when a line of the cache that has been modified is about to be replaced with a new block from memory
