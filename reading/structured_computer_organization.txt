Title: Structured Computer Organization
Authors: Andrew S. Tanenbaum and Todd Austin

Summarization of Content

Chapter 1 - Introduction
    a. Languages, Levels and Virtual Machines
        - Translation - Replace L1 program with L0 program equivalent and then run
        - Interpretation - At exeuction time, replace L1 code with L0 equivalent
    b. Contemporary Multilevel Machines
        - Problem Oriented Language Level - C, C++, Go, Java, Perl, Python, PHP
        - Assembly Language Level- Method to write programs for Levels 1, 2, and 3 translated by assembler
        - Operating System Machine Level - Instructions interpreted by OS and some by the microprogram or hardwired control
        - Instruction Set Architecture - Instructions carried out interpretively by the microprogram or hardware execution circuits
        - Microarchitecture Levels - Registers, ALUs, Data Paths, Microprogram
        - Digital Logical Level - Gates and Boolean Algebra
    c. Evolution of Multilevel Machines
        - Electronic Circuits = Hardware
        - Algorithms in Code = Software
        - Microprogramming - 1951
        - Operating System - 1960 - Systems Calls, Batch System, Tiesharing Systems
        - Microprogram Expansion
        - Microprogrmming Elimination - post 1970s
    d. Milestones in Computer Architecture
        - Zeroth Generation - Mechanical Computers 1642-1945
            - Add, Substract, Multiple and Divide, Difference Engine, Analytical Engine
        - First Generation - Vacuum Tubes 1945-1955
            - ENIAC, EDVAC, IAS, von Neumann
        - Second Generation - Transistors 1955-1965
        - Third Generation - Integrated Circuits 1965-1980
        - Fourth Generation - Very Large Scale Integration 1980-?
            - CISC, RISC, FPGA, GUI
        - Fifth Generation - Low-Power and Invisible Computers
    e. Computer Zoo
        - Moore's Law - Predicts a 60% annual increase in the number of transistors that can be put on a chip
        - Computer Spectrum - Disposable, Microcontroller, Mobile and Game Computers, Personal Computer, Server, Mainframe
        - Disposable
            - Radio Frequency Identification Chip
        - Microcontrollers
            - Processor, Memory, I/O, Networking
    f. Metric Units
        - Bits, Bytes, Kilobytes, Megabytes, Gigabytes, Terabytes

Chapter 2 - Computer Systems
    a. Processors
        - Central Processing Unit - ALU, Registers, Cache, Buses, Control Unit, Data Path
        - Instruction Execution - fetch-decode-execute
        - Interpreter - fetches, decodes, and executes another programs instructions
        - RISC vs. CISC
            - Reduced Instruction Set Computer
            - Complex Instruction Set Computer
        - Design Principles
            - Maximize the rate at which instructions are issued
            - Instructions should be easy to decode
            - Only loads and stores should reference memory
            - Provide plenty of registers
        - Instruction-Level Parallelism
            - Pipelining - multiple stages for instruction exection
            - Latency - how long it takes to execute an instruction
            - Processor Bandwidth - Million Instructions Per Seconds MIPS
            - Superscalar - Single pipeline with multiple functional units
        - Processor-Level Parallelism
            - Multiple CPUs
            - SIMD, SISD, MISD, MIMD
            - Multiprocessors - multiple CPUs sharing a common memory
            - Multicomputers - interconnected systems with no common memory
    b. Primary Memory
        - Bits  - 0 or 1, Binary Coded Decimal, Byte is 8-bit cell, Word is 4-bytes or 32-bits
        - Memory Addresses - address for each cell
        - Byte Ordering
            - Little Endian (low-order) vs. Big Endian (high-order)
        - Error-Correcting Codes
            - XOR codewords, Hamming Distance, Parity Bit
        - Cache Memory
            - L1 - L4
            - Locality and Temporality Principles
            - Hit/Miss Ratios
        - Memory Packaging Types
            - Single Inline Memory Module
            - Dual Inline Memory Module
    c. Secondary Memory
        - Memory Hierarchy - Registers Cache, Main Memory Magnetic or Solid State Disk, Tape/Optical
        - Magnetic Disks
            - Platter, Actuator, Read/Write Head, Spindle, Track, Sectors, Seek, Rotational Latency, Disk Controller
        - IDE Disks
            - Integrated Drive Electronics IDE
            - Extended Integrated Drive Electronics EIDE and Logical Block Addressing LBA
        - Small Computer System Interface Disks SCSI
        - Redundant Array of Inexpensive Disks RAID
            - Levels 0 through Level 5
            - Striping - distributing data over multiple drives
        - Solid State Disks SSDs
            - Non-Volatile Memory
            - Single-Level Cells vs. Multi-Level Cells and Triple-Level Cells
            - Wear Leveling
        - Compact Disk-Read Only Memories CD-ROMS - Lands, Pits, Transition
        - CD-Recordables, CD-Rewritables, DVD, Blu-Ray
    d. Input/Output
        - Buses
            - Connects components of microarchitecture
        - Direct Memory Access - controller reads or writes data to or from memory without CPU intervention
        - Peripheral Component Interconnect PCI Bus and PCIe Bus
        - Terminals, Keyboards, Touch Screen, Flat Panel Display, Video RAM, Mice, Game Controllers, Printers, 
        - Telecommunications Equipment - Modems, DSLs, Routers, Communication Linsks and Switches
        - Character Code - ASCII, Unicode, UTF-8

Chapter 3 - The Digital Logic Level
    a. Gates and Boolean Algebra
        - Gates
            - Transistor acts as a binary switch
            - Collector, Base, Eitter, Inverter
            - NAND, NOT, NOR, AND, OR
        - Boolean Algebra and Functions
            - Switching Algebra w/ Truth Table
        - Circuit Equivalence
            - Identity, Null, Idempotent, Inverse, Commutative, Associative, Distributive, Absoprtion, De Morgan's Laws
            - Positive and Negative Logic
    b. Basic Digital Logic Circuits
        - Integrated Circuits
            - Dual-in-Line, Pin Grid Array, and Land Grid Array packages
        - Combinational Circuits
            - Outputs are unique determiend by the current input values
            - Multiplexers, Decoders, Comparators
    c. Arithmetic Circuits
        - Shifters, Adders, Arithmetic Logic Units, Clocks
    d Memory
        - Latches, Clocked SR Latched, Clocked D Latches, Flip-Flops, Registers, Memory Chips, RAM, DRAM, ROM
        - RAM, SRAM, DRAM, SDRAM, ROM, PROM, EPROM, EEPROM, Flash
    e. CPU Chips and Buses
        - CPU Chips
        - Buses - Driver, Receiver, Transceiver, Open-Collector, Wired-OR
        - Bus Width, Clocking, Async
        - Bus Arbitration - Daisy Chaining, Signals, Interrupts, Transactions
    f. Interfacing
        - Universal Asynchronous Receiver Transmitter UART, USART
        - Parallel Input/Output
        - Address Decoding - Memory-Mapped I/O and Partial Address Decoding

Chapter 4 - The Microarchitecture Level
    a. Example Microarchitecture
        - The Data Path - ALU, Inputs, Outputs, Bus, ALU Control, Registers 
            - Cycle - control signals are set up, registers loaded onto bus, alu and shifter operate, results stored in registers
        - Memory Operation
            - Control signals drive registers
        - Microinstructions
            - Writing data, enabling registers, ALU, shifter, memory read/write, memory fetch
    b. Example ISA: IJVM
        - Stacks
            - Operand stack, local variable frame
        - Memory Model
            -  Constant pool, local variable frame, operand stack, method area
        - IJVM Instruction Set
            - Push, Pop, Invoke, Return, Delete, Swap, Branch
    c. Design of the Microarchitecture Level
        - Speed vs. Cost
            - Reduce the number of clock cycles needed to execute an instruction
            - Simplify the organization so that the clock cycle can be shorter
            - Overlap the execution of instructions
            - Path Length - number o clock cycles needed to execute a set of operations
        - Reducing the execution path length
            - Merging the Interpreter Loop with the Microcode
            - Three Bus Architecture
            - Instruction Fetch Unit
    d. Improving Performance
        - Cache Memory
            - L1 to L3 Cache with replacement policy considering spatial and temporal locality
            - Direct-Mapped Caches
            - Set-Associative, N-Way Set Associative, and Full Associative
            - Replacement Policy - Least Recently Used
        - Branch Prediction
            - Static and Dynamic Branch Prediction
        - Out of Order Execution and Register Renaming
            - Interleaveing
            - WAR, WAW, RAW, RAR Issues
            - Tomasulo's Algorithm
        - Speculation
            - Executing code before it is known if it is needed
            - Basic Blocks, Hoisting, Poison Bit

Chapter 5 - The Instruction Set Architecture
    a. Overview of the ISA Level
        - Properties
            - How the machine appears to a machine-langauge programmer
            - Normative Sections - Requirements
            - Informative Sections - Help
            - Kernel and User Modes
        - Registers
            - Control program execution, hold temporary results, and other purposes
            - Program Status Word or Flags Register
        - Instructions
            - Instructions control what the machine does
    b. Data Types
        - Numeric Data Types
            - Integers - 8, 16, 32, and 64 Bits, Signed and Unsigned
            - Floating Point
        - Nonnumeric Data Types
            - Characters, Booleas
    c. Instruction Formats
        - Design Criteria for Instruction Formats
            - Short vs. Long
            - Room in th einstruction format to express all the operations desired
            - Number of bits in an address field
    d. Addressing
        - Addressing Modes
            - Immediate Addressing - Address part of instruction contains operand
            - Direct Addresssing - Full address specifying operand in memory
            - Register Addressing - Full address specifying register in memory
            - Register Indirect Addressing - Address is pointer to address contained in register
            - Indexed Addressing - Giving a register plus a constant offset
            - Based-Indexed Addressing - Addres is two registers added plus an optional offset
            - Stack Addressing - Reverse Polish Notation - Postfix ABCx+
            - Addressing Modes for Branch Instructions - Offset in instruction is added to program counter
            - Orthogonality of Opcodes and Addressing Modes
    e. Instruction Types
        - Data Movement - Creating new object with the identical bit pattern
        - Dyadic Operations - Combine two operands to produce a result
        - Monadic Operations - Single operand to produce one result
        - Comparisons and Conditional Branches - Test and alter sequence of instructions
        - Procedure Call - Call to group of instructions to perform some task - subrouting
        - Loop Control - Execute a group of instructions a fixed number of times
        - Input/Output - Programmed, Interrupt-Drive, and DMA
    f. Flow of Control
        - Sequnetial Flow of Control and Branches
        - Procedures - Recursion
        - Coroutines
        - Traps - Automatic procedure call initiated by some condition caused by the program
        - Interrupts - Changes in the flow of control caused not by the running program
        
Chapter 6 - The Operating System
    a. Virtual Memory
        - Paging
            - Automatically creating overlays for virtual memory management
            - Pages - chunks of data read in from disk
            - Virtual Address Space - addresses programs refer to
            - Physical Address Space - actual hardwired physical memory locations
            - Transparent - programmer is not worried abut pages, that is handled by the OS
        - Implementation of Paging
            - Page Frame - pieces of main meory into which the pages go
            - Memory Management Unit - performs the virtual to physical address mapping
            - Present/Absent Bit - used to check whether the page referenced is currently in main memory
        - Demand Paging and the Working-Set Model
            - Page Fault - reference is made to an address on a page not present in main memory
            - Demand Paging - when a page fault occurs, load the missing page into memory
        - Page Replacement Policy
            - Locality Principle - references tend to cluster on a small number of pages, your next request will be near current location
            - Working Set - a set of all pages used by the k most recent memory references
            - Least Recently Used LRU
            - First-In First-Out FIFO
            - Thrashing - program that generates page faults frequently and continously
        - Page Size and Fragmentation
            - Internal Fragmentation - wasted bytes within pages
        - Segmentation
            - Segments - independent address spaces identified by segment number and address within segment
        - Implementation of Segmentation
            - Swapping and Paging
            - External Fragmentation - memory divided into a number of chunks, some containing segments and some containing holes
            - Best Fit - hole management algorithm which choosest the smallest hole into which the needed segment will fit
            - First Fit - hole management algorithm that chooses the first hole big enough for the segment to fit into
            - Multiplexed Information and Computing Service MULTICS - os that combined segmentation with paging
    b. Hardware Virtualization
        - Vocabulary
            - Hardware Virtualization - combination of hardware and software suppor that enables simultaneous execution of multiple operating systems on a single physical computer
            - Virtual Machine - virtualized operating system running on a host machine
            - Hypervisor - software component that creates and manages instances of virtual machines using hardware provided events to implement sharing policies for the CPU, storage and I/O devices        
    c. OSM-Level I/O Instructions
        - Contains most of the ISA-level instructions
        - Vocabulary
            - File - sequence of bytes writetn to an I/O device
            - File Index - table which gives the allocation units and their actual disk addresses
            - Free List - list of which blocks are available and which are already in use, specifically all the holes that exist
        - Implementation
            - Programmer File - linear sequence of bytes
            - OS File - ordered but not necessarily consecutive collocation of allocation units on disk
        - Directory Management Instructions
            - Directories - a file which contains a group of files
    d. OSM-Level Instructions for Parallel Processing
        - Process Creation
            - Process - characterized by a state and an address space where the program and data can be accessed
            - System call needed to create a process
        - Race Conditions - any situation where two processes or threads are altering the same memory location
        - Semaphores - mechanism to implement conditional variables and locks by Dijkstra
    e. Example Operating Systems
        - UNIX, POSIX, Linux, MacOS, Windows
        
Chapter 7 - The Assembly Language Level
    a. Introduction
        - Translator - converts a user's program written in some langauge to another language
        - Source Language - language in which the original program was written
        - Target Langauge - language that original language is converted into 
    b. Introduction to Assembly Language
        - Assembler - converts assemby language into numerical machine language
        - Compiler - converts high-level language into a numerical machine language or a symbolic representation of one
        - What is an Assembly Language?
            - Langauge where each statement produces exactly one machine instruction
        - Why use Assembly Language?
            - Performance and access to the machine
        - Format of Assembly Language Statement
            - Label, Opcode, Operand, Comments
        - Pseudoinstructions or Assembler Directive - commands to the assembler itself
    c. Macros
        - Macro Definition, Call, and Expansion
            - Macro Definition - a way to give a name to a piece of text
            - Macro Call - use of a macro name as an opcode
            - Macro Expansion - replacement of macro name by the macro body
        - Macros with Parameters
            - Formal/Actual Parameters - providing formal parameters that are replaced by actual parameters
        - Advanced Features
            - Local labels for unique value on expansion
            - Macros within macros
            - Macros calling other macros
    d. The Assembly Process
        - Two-Pass Assemblers
            - Pass One - definitions of symbols are collected and stored in a table
            - Pass Two - reading assembly program once, converting into an intermediate form, and storing this in a table in memory
        - Forward Reference Problem - reference made to a symbol whose definition occurs later
        - The Symbol Table
            - Associative Memory
            - Array of Pairs (Symbol, Value), Sort Symbol with Binary Search, Hashing
    e. Linking and Loading
        - Function - collect procedures translated separately and link them together to be run as a unit called an executable binary program
        - Tasks Performed by the Linker
            - Bring object modules from disk into main memory to form the image of the executable binary program
            - Relocation Problem - each module brought together represents a separate address space
            - Externel Reference Problem - address of module is not known until linking time
        - Structure of an Object Module
            - Identification, Entry Point Table, External Reference Table, Relocation Dictionary, End
        - Binding Time and Dynamic Relocation
            - Binding Time - time at which the actual main memory address corresponding to symbolic name is determined
            - Dynamic Linking - link each procedure at the time it is first called
            
Chapter 8 - Parallel Computer Architectures
