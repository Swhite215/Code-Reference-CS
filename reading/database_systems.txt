Title: Database Systems: Design Implementation and Management
Authors: Coronel, Morris, and Rob

Summarization of Content

1. Database Systems
    a. Data vs. Information
        - Data - raw facts
        - Information - interpretation of data
        - Knowledge - body of information and facts about a specific subject
        - Data Management - discipline that focuses on the proper generation, storage, and retrieval of data
    b. Introducing the Database
        - Database - a shared, integrated computer structure that stores collections of data and metadata
            - Data - raw facts
            - Meta-Data - information about the data
        - Database Management System (DBMS) - collection of programs that manages database structure and controls access to the stored data
        - Role and Advantages of the DBMS
            - Role - intermediary between the user and the database
            - Advantages
                - Improved Data Sharing
                - Improved Data Security
                - Better Data Integration
                - Minimized Data Inconsistency
                - Improved Data Access
                - Improved Decision Making
                - Increased End-User Productivity
        - Types of Databases
            - Single or Multi-User Databases
            - Workgroup Database < 50 users
            - Enterprise Database > 50 users
            - Centralized Database vs. Decentralized Databases
            - Discipline Specific Database
            - Operational Database - supports businesses day to day
            - Online Transaction Processsing Transactional or Production Database
            - Analytical Databases - focuses primarily on storing historical data and business metrics used exclusively for tactical and strategic decision making
            - Data Warehouse - specialized database that stores data in a format optimized for decisions support
            - Online Analytical Processing OLAP - set of tools that work together to provide advanced data analysis environment
            - Business Intelligence - comprehensive approach to capture and process business data
            - XML Database
            - Social Media
            - NoSQL - describes database systems that are not based on traditional relationship database model
            - Big Data
            - In-Memory
            - Very Large Databases VLD
            - Cloud Databases
        - Types of Data
            - Unstructured - raw state
            - Structured Data - result of formatting unstructured data to facilitate storage, use, and generation of information
            - Semi-structured Data - data already processed to some extent
            - Extensible Markup Language - language used to represent and manipulate data elements
    c. Why Database Design is Important
        - Database Design - activities that focus on the design of the database structure that will be used to store and manage data
    d. Evolution of File System Data Processing
        - Manual File Systems
        - Computerized File Systems
            - Data Processing Specialist
        - File System Redux: Modern End-User Productivity Tools
    e. Problems with File System Data Processing
        - Lengthy Development Time
        - Difficulty of Getting Quick Answers
        - Complex System Administration
        - Lack of Security and Limited Data Sharing
        - Extensive Programmming
        - Structural and Data Dependence
            - Structural Dependence - access to a file is dependent on its structure
            - Data Dependence - access is altered by change of data characteristics
            - Logical Data Format - how the human views the data
            - Physical Data Format - how the computer must work with the data
        - Data Redundancy
            - Islands of Information - scattered data locations
            - Redundancy - same data is stored unnecessarily at different places
            - Issues
                - Poor Data Security
                - Data Inconsistency
                - Anomalies
        - Lack of Design and Data-Modeling
    f. Database Systems
        - System - organization of components that define and regulate the collection, storage, management and use of data within a database environment
        - Components
            - Hardware - physical system devices
            - Software
                - Operating System, Application Programs and Utility Software
            - People
                - System Administrators
                - Designers
                - End Users
            - Procedures - instructions and rules that govern the design and sue of the database systems
            - Data
        - DBMS Functions
            - Data Dictionary Managment - stores definitions of data elements and their relationships
            - Data Storage Management - creates and manages the complex structures required for data storage
            - Performance Tuning - activities that make the database perform more efficiently
            - Data Transformation and Presentation - transforms entered data to conform to required data structures
            - Security Management - creates a security system that enfroces user security and data privacy
            - Multiuser Access Control
            - Backup and Recovery Management
            - Data Integrity Managment - promotes and enforce integrity rules
            - Database Access Langauges and Application Programming Interface
                - Structured Query Language - specify what must be done with having to specify how
            - Database Communication Interfaces
            - Why a spreadsheet is not a database: pg. 25
        - DBMS Disadvantages
            - Increased Costs
            - Management Complexity
            - Maintaining Currency
            - Vendor Dependence
            - Frequent Upgrade/Replacement Cycles

2. Data Models
    a. Data Model
        - Definition - relatively simple representation, usually graphical, of more complex real world data structures
        - Implementation Ready Data Model Components
            - A description of the data structure that will store the end-user data
            - A set of enforceable rules to guarantee the integrity of the data
            - A data manipulations methodology to support the real world data transformations
    b. Data Model Basic Building Blocks
        - Entity - a person, place, thing, or event about which data will be collected and stored
            - Each entity occurrent should be unique and distinct
        - Attribute - characteristic of an entity, e.g. a CUSTOMER entity would be described by such attributes as customer last name, customer first name, etc.
        - Relationship - describes an association among entities e.g. an agent SERVES many customers
            - One to Many 1:M - e.g. a painter paints many paintings
            - Many to Many M:M - e.g. an employee may learn many job skills and many job skills can be learned by many employees
            - One to One 1:1 - e.g. a person has only one driver license
        - Constraint - restriction place on the data to help ensure data integrity
    c. Business Rules
        - Definition - a brief, precise, and unambiguous description of a policy, procedure, or principlae within a specific organization
        - Examples
            - A customer may generate many invoices
            - An invoice is generated by only one customer
            - A training sessions cannot be scheduled for fewer than 10 employees or for more than 30 employees
        - Important of Identifying and Documenting Business Rules
            - They help to standardize the company's view of data
            - They can be communication tols between users and designers
            - They allow the designer to understand the nature, role, and scope of the data
            - They allow the designer to understand business processes
            - They allow the designer to develop appropriate relationship participation rules and constraints and to create an accurate data model
        - Naming Conventions - ENTITY_ATTRIBUTE
    d. Evolution of Data Models
        - First Generation - 1960s to 1970s - File System - VMS/VSAM
        - Second Generation - 1970s - Hierarchical and Network - IMS, ADABAS
            - Hierarchical Design - upside down tree
            - Segment - recvord type
            - Network Model - represent complex data relationships more effectively
                - Schema - conceptual organization of the entire database as viewed by the database administrators
                - Subschem - defines the portion of the database seen by the application programs that actually produce the desired information from the data within the database
                - Data Manipulation Language - defines the environment in which data can be managed and is used to work with the data in the database
                - Data Definition Language - enables the database administrator to defined the schema components
        - Third Generation - Mid 1970s - Relational - DB2, Oracle, MS SQL Server, MySQL
            - Introduced by E.F. COdd of IBM - A Relational Model of Data for Large Shared Databanks
            - Relation/Table - matrix composed of intersecting rows and columns, each row is tuple
            - Relational Database Management System RDBMS - performs the basic functions provided by the hierarchical and network DBMS systems, hides the complexities of the relational data model from the user
            - Relational Diagram - representation of the relational database's entities, the attributes within those entitities, and the relationship between those entities
            - Entity Relationship Model - uses graphical representations to model database components
                - Entity - anything about which data will be collected and stored, represented as a rectangle
                - Relationships - decsribes association among data
                - Types of Notation pg. 43
                    - Original Chen Notation
                    - Crow's Foot Notation
                    - Class Diagram Notation
        - Fourth Generation - Mid 1980s - Object Oriented, Object/Relational - Versant, DB2\
            - Object Oriented Data Model OODM - data and their relationships are contained in a single structure known as an object, semantic data model
                - Object - abstraction of a real world entity
                - Attribute - describe the properties of an object
                - Class - collection of similar objects with shared structure and behavior
                - Method - represents a real world action
                - Hierarchy - resembles an upside down tree in which each class has only one parent
                - Inheritance - ability of an object within the class hierarchy to inherit the attributes and methods of the classes above it
                - Unified Modeling Langauge - language based on OO concepts that describes a set of diagrams and symbols you can use to graphically model a system
                - UML Class Diagrams - used to represent data and their relationships within the larger UML object oriented system modeling language
            - Object Oriented Database Management System OODMBS
        - Fifth Generation - Mid 1990s - XML,, Hybrid DBMS - dbXML, MS SQL Server
            - Extended Relational Data Model - adds OO model features within the inherently simpler relational database structure
            - Extensible Markup Language - standard for the efficient and effective exchange of structured, semi-structured, and unstructured data
        - Emerging - Late 2000s to Present - Key-Value Store, Column Store - BigTable, CouchDB, MongoD
            - Big Data - refers to a movement to find new and better ways to manage large amounts of generated data and derive business insights from it while simultaenously providing high performance and scalability at a reasonable cost
            - NoSQL Databases
                - Support Distributed Database Architectures
                - Provides High Scalability, Availability, and Fault Tolerance
                - Supports Very Large Amounts of Sparse Data - large number of attributes but the number of actual data instances is low
                - Geared Toward Performance Rather Than Transaction Consistency - eventual consitency - data is not guaranteed to be consistent across all copies of the data immediately after an update
                - Key-Value
    e. Additional Models
        - External Model - end users' view of the data environment
        - Conceptual Model - represents a global view of the entire database by the entire organization
            - Software Independence - model does not depend on the DBMS software used to implement the model
            - Hardware Independence - model does not depend on the hardware used in the implementation of the model
        - Internal Model - maps the conceptual model to the DBMS, representation of the database as seen by the DBMS
            - Logical Independence - changing the internal model does not affect the conceptual model
        - Physical Model - operates at the lowest level of abstraction, decsribing the way data are saved on storage media such as disks or tapes 
            - Requirements - definition of both the physical storage devices and the physical access methods required to reach the data within those storage devices

3. The Relational Database Model
    a. A Logical View of Data
        - Tables and Their Characteristics
            - A table is perceived as a two-dimensional structure composed of rows and columns
            - Each table row (tuple) represents a single entity occurence within the entity set
            - Each table column represents an attribute, and each column has a distinct name
            - Each intersection of a row and column represents a single data value
            - All values in a column must conform to the same data format
            - Each column has a specific range of values known as the attribute domain
            - The order of the rows and columns is immaterial to the DBMS
            - Each table must have an attribute or combination of attributes that uniquely identifies each row
    b. Key 
        - Definition - consists of one or more attributes that determine other attributes
        - Dependencies
            - Determination - is the state in which knowing the value of one attribute makes it possible to determine the value of another
            - Functional Dependence - the value of one or more attributes determines the value of one or more other attributes
            - Determinant - the attribute whose value determines another is called the determinant
            - Dependent - the attribute whose value i sdetermined by the other attributes
            - Full Functional Dependence - refer to functional dependencies in which the entire collection of attributes in the determinant is necessary for the relationship
        - Types of Keys
            - Composite Key - key that is composed of more than one attribute
            - Key Attribute - attribute that is part of a key
            - Superkey - key that can uniquely identify any rows in the table
            - Candidate Key - superkey without any unncessary attributes
            - Entity Integrity - condition in which each row in the table has its own unique identity
            - Null - absence of any data value, and should never be allowed to be any part of the primary key
            - Foreign Key - primary key of one table that has been placed into another table to create common attribute
            - Referential Integrity - condition in which every reference to an entity instance by another entity instance is valid
            - Secondary Key - defined as a key that is used strictly for data retrieval purposes
    c. Integrity Rules
        - Entity Integrity
        - Referential Integrity
        - Flags - indicates the absence of some value
    d. Relational Set Operators
        - Relational Algebra - defines the theoretical way of manipulating table contents using the eight relational operators
            - SELECT - yields values for all rows found in a table that satisfy a given condition
            - PROJECT - yields all values for selected attributes
            - JOIN - allows information to be combined from two or more tables
                - Natural Join - links tables by selecting only the rows with common values in their common attributes
                - Order - Product -> Select -> Project
                - Equijoin - links tables on the basis of an equality condition that compares specified columsn of each table
                - Thetajoin - Not equijoin...
                - Inner Join - only returns matched records from the tables that are being joined
                - Outer Join - matched pairs would be retained, and any unmatchedvalues in the other table would be left null
                - Left Outer Join - yields all of the rows of one table, including those that do not have a matching value in the other table
                - Right Outer Join - yields all of the rows in the other table, including those that do not have a matching value in one table
            - INTERSECT - yield only the rows that appear in both tables
            - UNION - combines all rows from two tables, excluding duplicates
            - DIFFERENCE- yields all rows in one table that are not found in the other table
            - PRODUCT - yield all possible pairs of rows from two tables
            - DIVIDE - uses one two column table as the dividend and one single column table as the divisor
        - Closure - the use of relational algebra operators on existing relations produce new relation
    e. The Data Dictionary and System Catalog
        - Data Dictionary - provides a detailed description of all tables in the database created by the user and designer
        - System Catalog - detailed system data dictionary that describes all objects within the database, including data about table names, table creator, and creation date, number of columns, data type of each column, index filenames, index creators, users, and access privileges
        - Homonyms - indicates the use of the samed name to label different attributes, these should be avoided
        - Synonym - use of a different name to describe the same attribute, these should be avoided
    f. Relationships within the Relational Database
        - 1:M - supported
        - 1:1 - supported
        - M:N - not supported directly in the relational environment
            - Composite/Bridge/Associative Entity - link many to many tables
    g. Data Redundancy Revisited
    h. Indexes - orderely arrangedment used to logically access rows in a table
        - Index Key - index's reference point
        - Unique Index - index key can only have one pointer value associated with it
    i. Codd's Relational Database Rules
        - Information - all information in a relational database must be logically represented as column values in rows within tables
        - Guaranteed Access - Every value in a table is guaranteed to be accessible through a combination of table name, primary key value, and column name
        - Systematic Treatment of Nulls - Nulls must be represented and treated in a systematic way, independent of data types
        - Dynamic Online Catalog Based On the Relational Model - The metadata must be stored and managed in a ordinary way, that is, within tables within the database
        - Comprehensive Data Sublanguage - must support one well-defined, declarative langauge
        - View Updating - Any view that is theoretically updatable must be updatable through the system
        - High Level Insert, Update, and Delete - the database must support set level inserts, updates, and deletes
        - Physical Data Independence - Application programs and ad hoc facilities are logically unaffected when physical access methods or storage structures are changed
        - Logical Data Independence - Application programs and ad hoc facilities are logically unaffected when changes are made to the table structures that preserve the original table values e..g. changing order of columns
        - Integrity Independence - All relational integrity constraints must be definable in the relational language and stored in the system catalog
        - Distribution Independence - The end users and application programs are unaware of and unaffected by the data location
        - Nonsubversion - users must not be allowed to bypass the integrity rules of the database
        - Rule Zero - All preceedeing rules are based on the notion that to be considered relational, a database must use its relational facilities exclusively for management

4. Entity Relationship Modeling
    a. Entity Relationship Model
        - ERD - represents conceptual database as viewed by the end user
        - Notations - Chen, Crow's Foot and UML
        - Entities - entity set i.e. an entire table
        - Attributes - characteristics of entities
            - Required - attribute that must have a value
            - Optional - attribute that doesn't require a value
        - Domains - set of possible values for a given attribute
        - Identifiers - one or more attributes that uniquely identify each entity instance
        - Composite Identifier - primary composed composed of more than one attribute
        - Composite and Simple Attributes
            - Composite - attribute that can be further subdivided to yield additional attributes
            - Simple - attribute that cannot be subdivided
        - Single Valued Attributes - attribute that can only have a single value
        - Multivalued Attributes - attributes that can have many values
        - Derived Attribute - attribute whose value is calculated from other attributes
        - Relationships - association between entities
        - Connectivituy and Cardinality
            - Connectivity - relationship classification
            - Cardinality - minimum and maximum numnber of entity occurences associated with one occurence of the related entity
        - Existing Dependence - entity can exists in the database only when it is associated with another related entity occurence
        - Existence Independent - entity can exist apart from all of its related entities - strong or regular entity
        - Weak Relationships/Non-Identifying - exists if the primary key of the related entity does not contain a primary key component of the parent entity
        - Stong Relationships/Identifying - exists when the primary key of th related entity contains a primary key component of the parent entity
        - Relationship Participation
            - Optional - one entity occurrence does not require a corresponding entity occurrence in a particular relationship - course does not have to have classes
            - Mandatory - one entity occurrence requres a corresponding entity occurence in a particular relationship - class must be taught be professor
        - Relationship Degree - indicates the number of entities or participants associated with a relationship
            - Unary - association is maintained within a single entity
                - employee requires another employee to be manager
            - Binary - two entities are associated - most common
                - professor teaches one or more classes
            - Ternary - three entities are associated
                - doctor writes prescriptions
                - patient receives prescriptions
                - drug appears in prescriptions
        - Recursive Relationships - a relationship can exists between occurrences of the same entity set
        - Associative Entities -  composite or bridge entity faciliates turning M:N relationship into two 1:M relationships
    b. Developing an Entity Relationship Diagram
        - Iterative Process Involving
            - Create a detailed narrative of the organization's description of operations
            - Identify the business rules based on the description of operations
            - Identify the main entities and relationships from the business rules
            - Develop the initial ERD
            - Identify the attributes and primary keys that adequately decsribe the entities
            - Revise and review the ERD
            - Example - Tiny College pg. 129
    c. Database Design Challenges: Conflicting Goals
        - Design Standards - standards guide you in developing logical structures that minimize data redundancies
        - Processing Speed - means minimal access time, which may be achieved by minimizing the number and complexity of logically desirable relationships
        - Information Requirements - dictate data transformations, and may expand the number of entities and attributes within the design

5. Advanced Data Modeling
    a. Extended Entity Relationship Model
        - EERM - result of adding more semantic constructs to the original entity relationship
        - Entity Supertypes and Subtypes
            - Benefits
                - Avoids unnecessary nulls in attributes when some employees have characteristics that are not shared by other employees
                - Enables a particular employee type to participate in relationships that are unique to that type
            - Supertype - generic entity type that is related to one or more entity subtypes
                - Contains common characteristics
            - Criteria
                - There must be different, identifiable kinds or types of the entity in the user's environment
                - The different kind or types of instances should each have one or more attributes that are unique to that kind of type of instance
        - Specialization Hierarchy - depicts the arrangement of higher-level entity supertypes and lower-level entity subtypes
            - Supertype - Employee
            - Possible Subtypes - Pilot, Mechanic, and Accountant
            - Specialization Hierachy Provides the Means To:
                - Support attribute inheritance
                - Define a special supertype attribute known as the subtype discriminator
                - Define disjoint/overlapping constraints and complete/partial constraints
        - Inheritance - enables an entity subtype to inherit the attributes and relationships of the supertype
            - Employee HAS Dependent
            - Employee Subtype Pilot - So Pilot HAS Dependent
        - Subtype Discriminator - attribute in the supertype entity that determines to which subtype the supertype occurrence is related
            - Employee Entity has EMP_TYPE
        - Disjoint and Overlapping Constraints
            - Disjoint/Non-Overlapping - subtypes that contain a unique subset of the supertype entity set
            - Overlapping - subtypes that contain nonunique subsets of the supertype entity, that is each entity instance of the supertype may appear in more than one subtype
                - STUDENT and EMPLOYEE are overlapping subtypes of the supertype PERSON
                - PROFESSOR and ADMINSTRATOR are overlapping subtypes of the supertype EMPLOYEE
        - Completeness Constraint - specifies whether each entity supertype occurence must also be a member of at least one subtype
            - Partial Completeness - means that not ever supertype occurrence is a member of a subtype
            - Total Completeness - means that every supertype occurrence must be a member of at least one subtype
        - Specializations and Generalization
            - Specialization - top-down process of identifying lower-level, more specific entity subtypes from a higher-level entity supertype
            - Generalization - bottom-up process of identifyuing a higher-level, more generic supertype from lower-level entity subtypes
    b. Entity Clustering
        - Entity Cluster - virtual entity type used to represent multiple entities and relationships in the Entity Relationship Diagram
            - Formed by combining multiple interrelated entities into a single , abstract entity object
    c. Entity Integrity: Selecting Primary Keys
        - Natural Keys and Primary Keys
            - Natural Key/Natural Identifier - real-world, generally accepted identifier used to distinguish real world objects
        - Primary Key Guidelines
            - Main Function - uniquely identify an entity instance or row within a table
            - Secondary Function - primary keys and foreign keys are used to implement relationships among entities
        - When to Use Composite Primary Keys
            - #1 - As identifiers of composite entities, in which each primary key combination is allowed only once in the M:N relationship
            - #2 - As identifiers of weak entities, in which the weak entity has a strong identifying relationship with the parent entity
        - Desirable Primary Key Characteristics
            - Unique - PK must uniquely identify each entity instance
            - Nonintelligent - PK should not have embedded semantic meaning other than to uniquely identify each entity instance
            - No Change Over Time
            - Preferrable Single Attribute
            - Preferably Numeric
            - Security-Compliant
        - When to Use Surrogate Primary Keys - primary key created by the database desinger to simplify the identification of entity instances
            - #1 - Primary key doesn't exist in the real world or the existing natural key might not be a suitable primary key
    d. Design Cases: Learning Flexible Database Design
        - Case 1 - Implementing 1:1 Relationships
            - Basic Rule - put the primary key of the "one" side (the parent entity) on the "many" side (the dependent entity), as a foreign key
            - 1:1 Options
                - #1 - Place a foreign key in both entities
                - #2 - Place a foreign key in one of the entities
        - Case 2 - Maintaining History of Time-Variant Data
            - Time-Variant Day - refer to data whose values change over time and for which you must keep a history of the data changes
            - Multivalue Attribute Situation
                - Create a new entity in a 1:M relationship with the original entity - EMP_SALARY, multiple entires per employee in EMP_SAL_HISTORY
        - Case 3 - Fan Traps
            - Design Trap - occurs when a relationship is improperly or incompletely identified and is therefore represented in a way that is not consistent with the real world
            - Fan Trap - occurs when you have one entity in two 1:M relationships to toehr entities, thus producing an association among the other entities that is not expressed in the model
                - Issue - DIVISION is 1:M with TEAMS and 1:M with PLAYERS
                - Solution - DIVISION is 1:M with TEAMS and TEAMS is 1:M with PLAYERS
        - Case 4 - Redundant Relationships

6. Normalizations of Database Tables
    a. Database Tables and Normalization
        - Normalization - is a process for evaluating and correcting table structures to minimize data redundancies, thereby reducing the likelihood of data anomalies
        - Normal Forms - 1NF < 2NF < 3NF < 4NF
        - Denomalization - produces a lower normal form
    b. The Need for Normalization
        - Situation #1 - after the initial ERD is complete, the designer can use normalization to analyze the relationships among the attributes within each entity and determine if the structure can be improved through normalization
        - Situation #2 - modify existing data structures that can be in the form of flat files, spreadsheets, or older database structures
    c. The Normalization Process
        - Goal: ensure each table conforms to the concept of well-formed relations - in other words, tables that have the following characteristics
            - Each table represents a single subject
            - No data item will be unnecessarily stored in more than one table (minimum controlled redundancy)
            - All nonprime attributes in a table are dependent on the primary key - the entire primary key and nothing but the primary key
            - Each table is void of insertion, update, or deletion anomalies, which ensures the integrity and consistency of the data
        - Normal Forms
            - First Normal Form 1NF - Table format, no repeating groups, and PK identified
            - Second Normal Form 2NF - 1NF and no partial dependencies
            - Third Normal Form 3NF - 2NF and no transitive dependencies
            - Boyce-Codd Normal Form BCNF - Every determinant is a candidate key
            - Fourth Normal Form 4NF - 3NF and no independent mutlivalued dependencies
                - Candidate Key - minimal irreducible superkey
                - Primary Key - candidate key selected to be the primary means used to identify the rows in the table
            - Goal - data modeler wants to ensure that all tables are at least in third normal form 3NF
        - Determination and Functional Dependnence
            - Functional Dependence - The attribute B is fully functionally dependent on the attribute A if each value of A determines one and only one value of B
            - Functional Dependence - Attribute A determines Attributw B if all of the rows in the table that agree in value for Attribute A also agree in value for Attribute B
            - Fully Functional Dependence - If Attribute B is functioanlly depedendent on a composite key A but not on any subset of that composite key, the Attribute B is fully functionally dependent on A
            - Partial Dependencuy - exists when there is a functional dependence on which the determinant is only part of the primary key e.g. (A, B) -> (C,D), B -> C and (A,B) is the primary key, then B -> C is a partial dependency
            - Transitive Dependency - exists when there are functional dependencies such that X -> Y, Y -> Z, and X is the primary key. Transitive becauser X determines the value of Z via Y.\
            - Repeating Group - derives its name from the fact that a group of multiple entries of the same type can exist for a single key attribute occurrence
        - Guide
            - Conversion to First Normal Form
                - Step 1: Eliminate the Repeating Groups
                - Step 2: Identify the Primary Key - May Be Composite
                - Step 3: Identify All Dependencies - Dependency Diagram
            - Conversion to Second Normal Form
                - Step 1: Make New Tables to Eliminate Partial Dependencies
                - Step 2: Reassign Corresponding Dependent Attributes
            - Conversion to Third Normal Form
                - Step 1: Make New Tables To Eliminate Transitive Dependencies
                - Step 2: Reassign Corresponding Dependent Attributes
    d. Improving the Design
        - Evaluate PK Assignment
        - Evaluate Naming Conventions
        - Refine Attribute Atomicity
        - Identify New Attributes
        - Identify New Relationships
        - Refine Primary Keys as Required for Data Granularity
        - Maintain Historical Accuracy
        - Evaluate Using Derived Attributes
    e. Higher Level Normal Forms
        - The Boyce-Codd Normal Form - every determinant in the table is a candidate key
        - Fourth Normal Form - 3NF and has no multivalued dependencies
    f. Normalization and Database Design
        - Good Design Principles and Procedures Alongside Normalization Procedures
            - Develop an ERD through iterative process
                - Identify relevant entities, attributes, and their relationships
            - Use Normaliztion to focus on the characteristices of specific entities
    g. Denormalization
    h. Data Modeling Checklist
        - Business Rules
            - Properly document and verify all business rules with the end users
            - Ensure that all business rules are written precisely, clearly, and simpl.
            - Identify the source of all business rules, and ensure that each business role is justified, dated, and signed off by an approving authority
        - Data Modeling
            - Naming Conventions
                - Entity Names
                    - Should be nouns that are familiar to business and should be short and meaningful
                    - Should document abbreviations, synonyms, and aliases for each entity
                    - Should be unique within the model
                    - For composite entities, may include a combinmation of abbreviated names of the entities linked through the composite entity
                - Attribute Names
                    - Should be unique within the entity
                    - Should use the entity abbreviation as a prefix
                    - Should be descriptive of the characteristic
                    - Should use suffixes such as _ID, _NUM, _CODE for the PK attribute
                    - Should not be a reserved word
                    - Should not contain spaces or special characters
                - Relationship Names
                    - sShould be active or passive verbs that clearly indicate the nature of the relationship
            - Entities
                - Each entity should represent a single subject
                - Each entity should represent a set of distinguishable entity instnace
                - All entities should be in 3NF or higher, any below 3NF should be justified
                - The granularity of the entity instance should be clearly defined
                - The PK should be clearly defined and support the selected data granularity
            - Attributes
                - Should be simple and single valued
                - Should document default values, constraints, synonyms and aliases
                - Derived attributes shoudl be clearly identified and include sources
                - Should not be redundant unless this is required for transaction accuracy, performance, or maintaining a history
                - Nonkey attributes must be fully dependent on the PK attribute
            - Relationships
                - Should clearly identify relationship participants
                - Should clearly define participation, connectivity, and document cardinality
            - ER Model
                - Should be validated against expected processes: inserts, updates, and deletes
                - Should evaluate where, when, and how to maintain a history
                - Should not contain redundant relationships except as required
                - Should minimze data redundancy to ensure single place updates
                - Should conform to the minimal data rule. All that is needed is there, and all that is there is needed

7. Introduction to Structured Query Language
    a. Introduction to SQL
        - SQL Data Definition Commands
            - CREATE SCHEMA AUTHORIZATION - Create a database schema
            - CREATE TABLE - Creates a new table in the user's database schema
            - NOT NULL - Ensures that a column will not have null values
            - UNIQUE - Ensures that a column will not have duplicate values
            - PRIMARY KEY - Defines a primary key for a table
            - FOREIGN KEY - Defines a foreign key for a table
            - DEFAULT - Defines a default value for a column (when no value is given)
            - CHECK - Validates data in an attribute
            - CREATE INDEX - Creates an index for a table
            - CREATE VIEW - Creates a dynamic subset of rows and columns from one or more tables
            - ALTER TABLE - Modifies a table's definitions (adds, modifies, or deletes attributes or constraints)
            - CREATE TABLE AS - Creates a new table based on a query in the user's database schema
            - DROP TABLE - Permanently deletes a table (and its data)
            - DROP INDEX - Permanently deletes an index
            - DROP VIEWQ - Permanently deletes a view
        - SQL Categories
            - Data Definition Language - SQL includes commands to create database objects such as tables, indexes, and views
            - Datat Manipulation Language - SQL includes commands to insert, update, delete, and retrieve data within the database tables
        - SQL Data Manipulation Commands
            - INSERT - Insert rows into a table
            - SELECT - Selects Attributes from rows in one or more tables or views
                - WHERE - Restricts the selection of rows based on a conditional expression
                - GROUP BY - Groups the selected rows based on one or more attributes
                - HAVING - Restricts the selection of grouped rows based on a condition
                - ORDER BY - Orders the selected rows based on one or more attributes
            - UPDATE - Modifies an attribute's values in one or more table's rows
            - DELETE - Deletes one or more rows from a table
            - COMMIT - Permanently saves data changes
            - ROLLBACK - Restores data to their original values
            - Comparison Operators - =,<,>,<=,>=,<>
            - Logical Operators - AND, OR, NOT
            - Special Operators
                - BETWEEN - Checks whether an attribute value is within a range
                - IS NULL - Checks whether an attribute value is null
                - LIKE - Checks whether an attribute value matches a given string pattern
                - IN - Checks whether an attribute value matches any value within a value list
                - EXISTS - Checks whether a subquery returns any rows
                - DISTINCT - Limits values to unique values
            - Aggregate Functions - used with SELECT to retun mathematical summaries on columns
                - COUNT - Returns the number of rows with non-null values for a given column
                - MIN - Returns the minimum attribute value found in a given column
                - MAX - Returns thae maximum attribute value found in a given column
                - SUM - Returns the sum of all values for a given column
                - AVG - Returns the average of all values for a given column
    b. Data Definition Commands
        - Create the Database
        - Create The Database Schema - CREATE SCHEMA
        - Data Types
            - PK - Primary Key
            - FK - Foreign Key
            - CHAR - Fixed length character data (1 to 255 characters)
            - VARCHAR - Variable length character data (1 to 2000 characters)
            - NUMBER - Numeric data
                - NUMBER(9,2) - numbers that have two decimal places an dup to nine digits long
            - INT - Integet values
            - SMALLINT
            - DATE
            - DECIMAL
        - Create Table Structures - CREATE TABLE
        - Create SQL Constraints
            - NOT NULL, UNIQUE, DEFAULT, CHECK, CONSTRAINT
        - Create SQL Indexes
            - CREATE INDEX - improves the efficiency of searches and avoids duplicate column values
    c. Data Manipulation Commands
        - Adding Table Rows - INSERT
            - Inserting Rows with Null Attributes
            - Inserting Rows with Optional Attributes
                - INSERT INTO TABLE (OPTIONAL_VALUES) VALUES (VALUES)
        - Saving Table Changes - COMMIT - any changes made to the table contents are not saved on disk until you close the database
        - Listing Table Rows - SELECT
        - Updating Table Rows - UPDATE
        - Restoring Table Contents - ROLLBACK
        - Deleting Table Rows - DELETE
        - Inserting Tbale Rows with a SELECT Subquery
            - INSERT INTO tablename SELECT columnlist FROM tablename;
    d. SELECT Queries
        - Selecting Rows with Conditional Restrictions
            - SELECT columnlist FROM tablelist WHERE conditionlist
        - Using Comparison Operators on Dates
            - SELECT columnlist FROM tablelist WEHERE DATE >= '20-Jan-2012
        - Arithmetic Operators: The Rule of Precedence
            - Perform operations within parentheses
            - Perform power operations
            - Perform multiplication and divisions
            - Perform additions and substractions
        - Logical Operators: AND, OR, and NOT
        - Special Opertions: BETWEEN, IS NULL, LIKE, IN, EXISTS
    e. Additional Data Definition COmmands
        - Changing a Column's Data Type - ALTER TABLE tablename MODIFY (columnlist DATE_TYPE)
        - Changing a Column's Data Characteristics - ALTER TABLE tablename MODIFY (columnlist DECIMAL(10,2))
        - Adding a Column - ALTER TABLE tablename ADD (columnlist DATA_TYPE)
        - Dropping a Column - ALTER TABLE tablename DROP columnlist
        - Advanced Data Updates - UPDATE tablename SET columnlist = VALUE WHERE columnlist = VALUE
        - Copying Parts of Tables - INSERT INTO target_tablename SELECT source_columnlist FROM source_tablename
        - Adding Primary and Foreign Key Designations - ALTER TABLE tablename ADD PRIMARY_KEY(column)
        - Deleting a Table from the Database - DROP TABLE
    f. Additional SELECT Query Keywords
        - Ordering a listing - ORDER BY
        - Listing Unique Values - UNIQUE
        - Aggregate Functions - COUNT, MAX and MIN, SUM, AVG
        - Grouping Data - GROUP BY
    g. Joining Database Tables
        - SEELCT columnlist FROM tablenname WHERE PRIMARY_KEY = FOREIGN_KEY
        - Joining Tables with an Alias
        - Recursive Joins

8. Advanced SQL
    a. SQL Join Operators
        - Conditions
            - Natural Join - two rows have common values in common columns
            - Equality or Inequality - two rows meet a given join condition
            - Outer Join - have common values in common columns or have no matching values
        - Joins
            - Inner Join - traditional join in which only rows that meet a given criterion are selected
            - Outer Join - returns not only the matching rows but the rows with unmatched attribute values for one table or both tables to be joined
            - Cross Join - performs a relational product off two tables
            - Natural Join - returns all rows with matchings values in the matching columns and eliminates duplicate columns
            - Join Using Clause - returns only the rows with matchings values in the column indicated in the USING clause
            - Join ON Clause - return only the rows that meet the indicated join condition
    b. Subqueries and Correlated Queries
        - Characteristics
            - A subquery is a query, SELECT statement, inside a query
            - A subquery is normally expressed inside parentheses
            - The first query in the SQL statement is known as the outer query
            - The query inside the SQL statement is known as the inner query
            - The inner query is executed first
            - The output of an inner query is used as the input for the outer query
            - The entire SQL statement is sometimes referred to as a nested query
        - Types
            - WHERE Subqueries - uses an inner SELECT subquery on the right side of a WHERE comparison (single value)
            - IN Subqueries - uses an inner SELECT subquery on the right side of a WHERE comparison (multiple values)
            - HAVING Subqueries - uses an inner SELECT subquery on the right side of a HAVING comparison
            - Multirow Subquery Operators: ANY and ALL
            - FROM Subqueries - SELECT subquery within FROM statements
            - Correlated Subqueries - subquery that executes once for each row in the outer query
    c. SQL Functions
        - Date and Time Functions - take one parameter of a datter or character data type and return a value
            - YEAR - returns a four digit year
            - MONTH - returns a two digit month
            - DAY - returns the number of the day
            - DATE - returns today's date
            - DATEADD - adds a number of selected time periods to a date
            - DATEDIFF - subtracts two dates
            - TO_CHAR - returns a character string or a formatted sting from a date value
            - TO_DATE - returns a date value using a character string and a date format mask
            - SYSDATE - returns today's date
            - ADD_MONTHS - adds a number of months or years to a date
            - LAST_DAY - returns the date of the last day of the month given in a date
        - Numeric Functions
            - ABS - returns absolute value of a number
            - ROUND - rounds a value to a specified precision
            - CEIL/CEILING/FLOOR - returns the smallest integer greater than or equal to a number or returns the largbest integer equal to or less than a number
        - String Functions
            - Concatenation - concatenates data from two different character columns and returns a single column
            - UPPER and LOWER - returns a string in all capital or all lowercase letters
            - SUBSTRING - returns a substring or part of a given string parameter
            - LENGTH - returns the number of characters in a single value
        - Conversion Functions
            - TO_CHAR - returns a character string from a numeric value
            - TO_CHAR - returns a character string or a formatted character string from a date value
            - TO_NUMBER - returns a formatted number from a character string
            - DECODE - compares an attribute or expression with a series of values and returns an assocaited value or a default value
    d. Relational Set Operators
        - UNION - combines rows from two or more queries without including duplicate rows - query UNION query
        - UNION ALL - combines rows from two or more queries including duplicates - query UNION ALL query
        - INTERSECT - combine rows from two queries, returning only the rows that appear in both sets
        - MINUS - combines rows from two queries and returns only the rows that appear in the first set but not in the second - query MINUS query
        - Syntax Alternatives - IN or NOT IN to obtain results similar to INTERSECT or MINUS
    e. Virtual Tables: Creating a View
        - View - virtual table based on a SELECT query
        - Base Tables - tables on which the view is based
        - CREATE VIEW viewname AS SELECT query
        - Updatable Views
            - Batch Update Routine - pools multiple transactions into a single batch to update a master table field in a single operation
            - Updatable View - can be used to update attributes in any base table used in the view
    f. Oracle Sequences
    g. Procedural SQL
        - Persistent Stored Module - block of conde containing standard SQL statements and procedural extensions that is stored and executed at the DBMS server
        - Procedural Language SQL - langauge that makes it possible to use and store procedural code and SQL statements within the database and to merge SQL and traditional programming constructs, such as variables, conditional processing, basic loops, and error trapping
        - Anonymous PL/SQL Block
        - PL/SQL Basic Data Types
            - CHAR, VARCHAR, NUMBER, DATE, %TYPE
        - Triggers - procedural SQL code that is automatically invoked by the RDBMs upon the occurrence of a given data manipulation event
            - Invoked before or after a data row is inserted, updated, or deleted
            - Associated with a database table
            - Each database table may have one or more triggers
            - Executed as part of the transaction that triggered it
            - Uses
                - Enforce constraints that cannot be enforced at the DBMS design and implementation levels
                - Add functionality by automating critical actions and providing appropriate warnings and suggestions for remedial action
                - Can be used to update table values, insert records in tables, and call other stored proceedures
                - Auditing
                - Automatic generation of derived column values
                - Enforcement of business or security constraints
                - Creation fo replica tables for backup purposes
            - Definition
                - Trigger Timing - BEFORE or AFTER
                - Trigger Event - Statement that causes the trigger to execute - INSERT, UPDATE, or DELETE
                - Trigger Level
                    - Statement-Level Trigger
                    - Row-Level Trigger
                - Trigger Action
        - Stored Procedures - named collection of procedural and SQL statments
        - PL/SQL Processing with Cursors
            - Cursor - special construct used in procedural SQL to hold the data rows returned by a SQL query
                - Implicit Cursor - automatically created in procedural SQL when the SQL statement returns only one value
                - Explicit Cursor - created to hold the output of a SQL statement that may return two or more rows (but neven zero or only one)
        - PL/SQL Stored Functions - basically a named group of procedural and SQL statements that returns a value
    h. Embedded SQL - term used to refer to SQL statements contained within an application programming language