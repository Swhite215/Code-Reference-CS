Title: Database Systems: Design Implementation and Management
Authors: Coronel, Morris, and Rob

Summarization of Content

1. Database Systems
    a. Data vs. Information
        - Data - raw facts
        - Information - interpretation of data
        - Knowledge - body of information and facts about a specific subject
        - Data Management - discipline that focuses on the proper generation, storage, and retrieval of data
    b. Introducing the Database
        - Database - a shared, integrated computer structure that stores collections of data and metadata
            - Data - raw facts
            - Meta-Data - information about the data
        - Database Management System (DBMS) - collection of programs that manages database structure and controls access to the stored data
        - Role and Advantages of the DBMS
            - Role - intermediary between the user and the database
            - Advantages
                - Improved Data Sharing
                - Improved Data Security
                - Better Data Integration
                - Minimized Data Inconsistency
                - Improved Data Access
                - Improved Decision Making
                - Increased End-User Productivity
        - Types of Databases
            - Single or Multi-User Databases
            - Workgroup Database < 50 users
            - Enterprise Database > 50 users
            - Centralized Database vs. Decentralized Databases
            - Discipline Specific Database
            - Operational Database - supports businesses day to day
            - Online Transaction Processsing Transactional or Production Database
            - Analytical Databases - focuses primarily on storing historical data and business metrics used exclusively for tactical and strategic decision making
            - Data Warehouse - specialized database that stores data in a format optimized for decisions support
            - Online Analytical Processing OLAP - set of tools that work together to provide advanced data analysis environment
            - Business Intelligence - comprehensive approach to capture and process business data
            - XML Database
            - Social Media
            - NoSQL - describes database systems that are not based on traditional relationship database model
            - Big Data
            - In-Memory
            - Very Large Databases VLD
            - Cloud Databases
        - Types of Data
            - Unstructured - raw state
            - Structured Data - result of formatting unstructured data to facilitate storage, use, and generation of information
            - Semi-structured Data - data already processed to some extent
            - Extensible Markup Language - language used to represent and manipulate data elements
    c. Why Database Design is Important
        - Database Design - activities that focus on the design of the database structure that will be used to store and manage data
    d. Evolution of File System Data Processing
        - Manual File Systems
        - Computerized File Systems
            - Data Processing Specialist
        - File System Redux: Modern End-User Productivity Tools
    e. Problems with File System Data Processing
        - Lengthy Development Time
        - Difficulty of Getting Quick Answers
        - Complex System Administration
        - Lack of Security and Limited Data Sharing
        - Extensive Programmming
        - Structural and Data Dependence
            - Structural Dependence - access to a file is dependent on its structure
            - Data Dependence - access is altered by change of data characteristics
            - Logical Data Format - how the human views the data
            - Physical Data Format - how the computer must work with the data
        - Data Redundancy
            - Islands of Information - scattered data locations
            - Redundancy - same data is stored unnecessarily at different places
            - Issues
                - Poor Data Security
                - Data Inconsistency
                - Anomalies
        - Lack of Design and Data-Modeling
    f. Database Systems
        - System - organization of components that define and regulate the collection, storage, management and use of data within a database environment
        - Components
            - Hardware - physical system devices
            - Software
                - Operating System, Application Programs and Utility Software
            - People
                - System Administrators
                - Designers
                - End Users
            - Procedures - instructions and rules that govern the design and sue of the database systems
            - Data
        - DBMS Functions
            - Data Dictionary Managment - stores definitions of data elements and their relationships
            - Data Storage Management - creates and manages the complex structures required for data storage
            - Performance Tuning - activities that make the database perform more efficiently
            - Data Transformation and Presentation - transforms entered data to conform to required data structures
            - Security Management - creates a security system that enfroces user security and data privacy
            - Multiuser Access Control
            - Backup and Recovery Management
            - Data Integrity Managment - promotes and enforce integrity rules
            - Database Access Langauges and Application Programming Interface
                - Structured Query Language - specify what must be done with having to specify how
            - Database Communication Interfaces
            - Why a spreadsheet is not a database: pg. 25
        - DBMS Disadvantages
            - Increased Costs
            - Management Complexity
            - Maintaining Currency
            - Vendor Dependence
            - Frequent Upgrade/Replacement Cycles

2. Data Models
    a. Data Model
        - Definition - relatively simple representation, usually graphical, of more complex real world data structures
        - Implementation Ready Data Model Components
            - A description of the data structure that will store the end-user data
            - A set of enforceable rules to guarantee the integrity of the data
            - A data manipulations methodology to support the real world data transformations
    b. Data Model Basic Building Blocks
        - Entity - a person, place, thing, or event about which data will be collected and stored
            - Each entity occurrent should be unique and distinct
        - Attribute - characteristic of an entity, e.g. a CUSTOMER entity would be described by such attributes as customer last name, customer first name, etc.
        - Relationship - describes an association among entities e.g. an agent SERVES many customers
            - One to Many 1:M - e.g. a painter paints many paintings
            - Many to Many M:M - e.g. an employee may learn many job skills and many job skills can be learned by many employees
            - One to One 1:1 - e.g. a person has only one driver license
        - Constraint - restriction place on the data to help ensure data integrity
    c. Business Rules
        - Definition - a brief, precise, and unambiguous description of a policy, procedure, or principlae within a specific organization
        - Examples
            - A customer may generate many invoices
            - An invoice is generated by only one customer
            - A training sessions cannot be scheduled for fewer than 10 employees or for more than 30 employees
        - Important of Identifying and Documenting Business Rules
            - They help to standardize the company's view of data
            - They can be communication tols between users and designers
            - They allow the designer to understand the nature, role, and scope of the data
            - They allow the designer to understand business processes
            - They allow the designer to develop appropriate relationship participation rules and constraints and to create an accurate data model
        - Naming Conventions - ENTITY_ATTRIBUTE
    d. Evolution of Data Models
        - First Generation - 1960s to 1970s - File System - VMS/VSAM
        - Second Generation - 1970s - Hierarchical and Network - IMS, ADABAS
            - Hierarchical Design - upside down tree
            - Segment - recvord type
            - Network Model - represent complex data relationships more effectively
                - Schema - conceptual organization of the entire database as viewed by the database administrators
                - Subschem - defines the portion of the database seen by the application programs that actually produce the desired information from the data within the database
                - Data Manipulation Language - defines the environment in which data can be managed and is used to work with the data in the database
                - Data Definition Language - enables the database administrator to defined the schema components
        - Third Generation - Mid 1970s - Relational - DB2, Oracle, MS SQL Server, MySQL
            - Introduced by E.F. COdd of IBM - A Relational Model of Data for Large Shared Databanks
            - Relation/Table - matrix composed of intersecting rows and columns, each row is tuple
            - Relational Database Management System RDBMS - performs the basic functions provided by the hierarchical and network DBMS systems, hides the complexities of the relational data model from the user
            - Relational Diagram - representation of the relational database's entities, the attributes within those entitities, and the relationship between those entities
            - Entity Relationship Model - uses graphical representations to model database components
                - Entity - anything about which data will be collected and stored, represented as a rectangle
                - Relationships - decsribes association among data
                - Types of Notation pg. 43
                    - Original Chen Notation
                    - Crow's Foot Notation
                    - Class Diagram Notation
        - Fourth Generation - Mid 1980s - Object Oriented, Object/Relational - Versant, DB2\
            - Object Oriented Data Model OODM - data and their relationships are contained in a single structure known as an object, semantic data model
                - Object - abstraction of a real world entity
                - Attribute - describe the properties of an object
                - Class - collection of similar objects with shared structure and behavior
                - Method - represents a real world action
                - Hierarchy - resembles an upside down tree in which each class has only one parent
                - Inheritance - ability of an object within the class hierarchy to inherit the attributes and methods of the classes above it
                - Unified Modeling Langauge - language based on OO concepts that describes a set of diagrams and symbols you can use to graphically model a system
                - UML Class Diagrams - used to represent data and their relationships within the larger UML object oriented system modeling language
            - Object Oriented Database Management System OODMBS
        - Fifth Generation - Mid 1990s - XML,, Hybrid DBMS - dbXML, MS SQL Server
            - Extended Relational Data Model - adds OO model features within the inherently simpler relational database structure
            - Extensible Markup Language - standard for the efficient and effective exchange of structured, semi-structured, and unstructured data
        - Emerging - Late 2000s to Present - Key-Value Store, Column Store - BigTable, CouchDB, MongoD
            - Big Data - refers to a movement to find new and better ways to manage large amounts of generated data and derive business insights from it while simultaenously providing high performance and scalability at a reasonable cost
            - NoSQL Databases
                - Support Distributed Database Architectures
                - Provides High Scalability, Availability, and Fault Tolerance
                - Supports Very Large Amounts of Sparse Data - large number of attributes but the number of actual data instances is low
                - Geared Toward Performance Rather Than Transaction Consistency - eventual consitency - data is not guaranteed to be consistent across all copies of the data immediately after an update
                - Key-Value
    e. Additional Models
        - External Model - end users' view of the data environment
        - Conceptual Model - represents a global view of the entire database by the entire organization
            - Software Independence - model does not depend on the DBMS software used to implement the model
            - Hardware Independence - model does not depend on the hardware used in the implementation of the model
        - Internal Model - maps the conceptual model to the DBMS, representation of the database as seen by the DBMS
            - Logical Independence - changing the internal model does not affect the conceptual model
        - Physical Model - operates at the lowest level of abstraction, decsribing the way data are saved on storage media such as disks or tapes 
            - Requirements - definition of both the physical storage devices and the physical access methods required to reach the data within those storage devices

3. The Relational Database Model
    a. A Logical View of Data
        - Tables and Their Characteristics
            - A table is perceived as a two-dimensional structure composed of rows and columns
            - Each table row (tuple) represents a single entity occurence within the entity set
            - Each table column represents an attribute, and each column has a distinct name
            - Each intersection of a row and column represents a single data value
            - All values in a column must conform to the same data format
            - Each column has a specific range of values known as the attribute domain
            - The order of the rows and columns is immaterial to the DBMS
            - Each table must have an attribute or combination of attributes that uniquely identifies each row
    b. Key 
        - Definition - consists of one or more attributes that determine other attributes
        - Dependencies
            - Determination - is the state in which knowing the value of one attribute makes it possible to determine the value of another
            - Functional Dependence - the value of one or more attributes determines the value of one or more other attributes
            - Determinant - the attribute whose value determines another is called the determinant
            - Dependent - the attribute whose value i sdetermined by the other attributes
            - Full Functional Dependence - refer to functional dependencies in which the entire collection of attributes in the determinant is necessary for the relationship
        - Types of Keys
            - Composite Key - key that is composed of more than one attribute
            - Key Attribute - attribute that is part of a key
            - Superkey - key that can uniquely identify any rows in the table
            - Candidate Key - superkey without any unncessary attributes
            - Entity Integrity - condition in which each row in the table has its own unique identity
            - Null - absence of any data value, and should never be allowed to be any part of the primary key
            - Foreign Key - primary key of one table that has been placed into another table to create common attribute
            - Referential Integrity - condition in which every reference to an entity instance by another entity instance is valid
            - Secondary Key - defined as a key that is used strictly for data retrieval purposes
    c. Integrity Rules
        - Entity Integrity
        - Referential Integrity
        - Flags - indicates the absence of some value
    d. Relational Set Operators
        - Relational Algebra - defines the theoretical way of manipulating table contents using the eight relational operators
            - SELECT - yields values for all rows found in a table that satisfy a given condition
            - PROJECT - yields all values for selected attributes
            - JOIN - allows information to be combined from two or more tables
                - Natural Join - links tables by selecting only the rows with common values in their common attributes
                - Order - Product -> Select -> Project
                - Equijoin - links tables on the basis of an equality condition that compares specified columsn of each table
                - Thetajoin - Not equijoin...
                - Inner Join - only returns matched records from the tables that are being joined
                - Outer Join - matched pairs would be retained, and any unmatchedvalues in the other table would be left null
                - Left Outer Join - yields all of the rows of one table, including those that do not have a matching value in the other table
                - Right Outer Join - yields all of the rows in the other table, including those that do not have a matching value in one table
            - INTERSECT - yield only the rows that appear in both tables
            - UNION - combines all rows from two tables, excluding duplicates
            - DIFFERENCE- yields all rows in one table that are not found in the other table
            - PRODUCT - yield all possible pairs of rows from two tables
            - DIVIDE - uses one two column table as the dividend and one single column table as the divisor
        - Closure - the use of relational algebra operators on existing relations produce new relation
    e. The Data Dictionary and System Catalog
        - Data Dictionary - provides a detailed description of all tables in the database created by the user and designer
        - System Catalog - detailed system data dictionary that describes all objects within the database, including data about table names, table creator, and creation date, number of columns, data type of each column, index filenames, index creators, users, and access privileges
        - Homonyms - indicates the use of the samed name to label different attributes, these should be avoided
        - Synonym - use of a different name to describe the same attribute, these should be avoided
    f. Relationships within the Relational Database
        - 1:M - supported
        - 1:1 - supported
        - M:N - not supported directly in the relational environment
            - Composite/Bridge/Associative Entity - link many to many tables
    g. Data Redundancy Revisited
    h. Indexes - orderely arrangedment used to logically access rows in a table
        - Index Key - index's reference point
        - Unique Index - index key can only have one pointer value associated with it
    i. Codd's Relational Database Rules
        - Information - all information in a relational database must be logically represented as column values in rows within tables
        - Guaranteed Access - Every value in a table is guaranteed to be accessible through a combination of table name, primary key value, and column name
        - Systematic Treatment of Nulls - Nulls must be represented and treated in a systematic way, independent of data types
        - Dynamic Online Catalog Based On the Relational Model - The metadata must be stored and managed in a ordinary way, that is, within tables within the database
        - Comprehensive Data Sublanguage - must support one well-defined, declarative langauge
        - View Updating - Any view that is theoretically updatable must be updatable through the system
        - High Level Insert, Update, and Delete - the database must support set level inserts, updates, and deletes
        - Physical Data Independence - Application programs and ad hoc facilities are logically unaffected when physical access methods or storage structures are changed
        - Logical Data Independence - Application programs and ad hoc facilities are logically unaffected when changes are made to the table structures that preserve the original table values e..g. changing order of columns
        - Integrity Independence - All relational integrity constraints must be definable in the relational language and stored in the system catalog
        - Distribution Independence - The end users and application programs are unaware of and unaffected by the data location
        - Nonsubversion - users must not be allowed to bypass the integrity rules of the database
        - Rule Zero - All preceedeing rules are based on the notion that to be considered relational, a database must use its relational facilities exclusively for management

4. Entity Relationship Modeling
    a. Entity Relationship Model
        - ERD - represents conceptual database as viewed by the end user
        - Notations - Chen, Crow's Foot and UML
        - Entities - entity set i.e. an entire table
        - Attributes - characteristics of entities
            - Required - attribute that must have a value
            - Optional - attribute that doesn't require a value
        - Domains - set of possible values for a given attribute
        - Identifiers - one or more attributes that uniquely identify each entity instance
        - Composite Identifier - primary composed composed of more than one attribute
        - Composite and Simple Attributes
            - Composite - attribute that can be further subdivided to yield additional attributes
            - Simple - attribute that cannot be subdivided
        - Single Valued Attributes - attribute that can only have a single value
        - Multivalued Attributes - attributes that can have many values
        - Derived Attribute - attribute whose value is calculated from other attributes
        - Relationships - association between entities
        - Connectivituy and Cardinality
            - Connectivity - relationship classification
            - Cardinality - minimum and maximum numnber of entity occurences associated with one occurence of the related entity
        - Existing Dependence - entity can exists in the database only when it is associated with another related entity occurence
        - Existence Independent - entity can exist apart from all of its related entities - strong or regular entity
        - Weak Relationships/Non-Identifying - exists if the primary key of the related entity does not contain a primary key component of the parent entity
        - Stong Relationships/Identifying - exists when the primary key of th related entity contains a primary key component of the parent entity
        - Relationship Participation
            - Optional - one entity occurrence does not require a corresponding entity occurrence in a particular relationship - course does not have to have classes
            - Mandatory - one entity occurrence requres a corresponding entity occurence in a particular relationship - class must be taught be professor
        - Relationship Degree - indicates the number of entities or participants associated with a relationship
            - Unary - association is maintained within a single entity
                - employee requires another employee to be manager
            - Binary - two entities are associated - most common
                - professor teaches one or more classes
            - Ternary - three entities are associated
                - doctor writes prescriptions
                - patient receives prescriptions
                - drug appears in prescriptions
        - Recursive Relationships - a relationship can exists between occurrences of the same entity set
        - Associative Entities -  composite or bridge entity faciliates turning M:N relationship into two 1:M relationships
    b. Developing an Entity Relationship Diagram
        - Iterative Process Involving
            - Create a detailed narrative of the organization's description of operations
            - Identify the business rules based on the description of operations
            - Identify the main entities and relationships from the business rules
            - Develop the initial ERD
            - Identify the attributes and primary keys that adequately decsribe the entities
            - Revise and review the ERD
            - Example - Tiny College pg. 129
    c. Database Design Challenges: Conflicting Goals
        - Design Standards - standards guide you in developing logical structures that minimize data redundancies
        - Processing Speed - means minimal access time, which may be achieved by minimizing the number and complexity of logically desirable relationships
        - Information Requirements - dictate data transformations, and may expand the number of entities and attributes within the design
