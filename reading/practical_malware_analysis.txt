Title: Practical Malware Analysis
Authors: Michael Sikorski and Andrew Honig

Summarization of Content

Malware Analysis Primer
    - What is malware analysis?
        - Act of dissecting malware to understand how it works, how to identify it, and how to defeat or eliminate it
    - The Goals of Malware Analysis
        - Purpose - provide the information you need to respond to a network intrusion
    - Malware Analysis Techniques
        - Basic Static Analysis - examining the executable file without viewing the actual instructions
        - Basic Dynamic Analysis - running the malware and observing its behavior on the system in order to remove the infection, produce effective signatures, or both
        - Advanced Static Analysis - reverse-enginerring the malware's internals by loading the executable into a disassembler and looking at the program instructions in order to discover what the program does
        - Advanced Dynamic Analysis - uses a debugger to examine the internal state of a running malicious executable
    - Types of Malware
        - Backdoor - code that installs itself onto a computer to allow the attacker access
        - Botnet - allows the attacker access to teh system, but all computers infected receive the same instruction from a single command and control server
        - Downloader - malicious code that downloads other malicion code
        - Information-Stealing Malware - collects information from victim's computer and usually sends it to the attacker
        - Launcher - launches other malicious prorgams
        - Rootkit - code designed to conceal the existence of other code
        - Scareware - designed to frighten an infected user into buying something
        - Spam-sending Malware - malware that infects a user's machine and then uses that machine to send spam
        - Worm or Virus - malicious code that can copy itself and infect additional computers
        - Note - malware often spans multiple categories, complex, collaborative
    - General Rules for Malware Analysis
        - Don't get caught up in the details, focus on the key features
        - Remember that different tools and approaches are available for different jobs, there is no one approach
        - Malware analysis is a pendulum, back and forth

Chapter 1 - Basic Static Analysis
    - Antivirus Scanning: A Useful First Step
        - Run the malware through various antivirus programs
        - This relies on a database of identifiable pieces of known suspicious code (file signatures), as well as behavior and pattern matching analysis (heurisitcs)
    - Hashing: A Fingerprint for Malware
        - Use Message Digest Algorithm to produce a unique hash that identifies the malware
        - Use Hash
            - Use the hash as a label
            - Share that hash with other analysts to help them to identify malware
            - Search for that hash online to see if the file has already been identified
    - Finding Strings
        - Searching through strings can be a simple way to get hints about the functionality of a program
    - Packed and Obfuscated Malware
        - Obfuscated programs are ones whose execution the malware author has attempted to hide
        - Packed programs are a subset of obfuscated programs in which the malicious programs is compressed and cannot be analyzed
        - Packing Files
            - When a packed program is run, a small wrapper program also runs to decompresse the packed file and then run it, when analyzed statically, only the small wrapper program can be dissected
            - Detecting Packers with PEiD - Use PEiD to detect the type of packer or compiler employed to build an application which makes analyzing the packed file much easier
    - Portable Executable File Format
        - PE format is used by Windows executables, object code, and DLLs, contains information necessary for the Windows OS loader to manage the wrapped executable code
    - Linked Libraries and Functions
        - Static, Runtime, and Dynamic Linking
            - Static - all code from that library is copied into the executable
            - Runtime - connect to libraries only when that function is needed
                - Common Functions - LoadLibrary, GetProcAddress - allow programmers to import linked functions not listed in a program's file header
            - Dynamic - most common, host OS searches for the necessary libraries when the program is loaded
        - Exploring Dynamically Linked Functions with Dependency Walker
            - Dependency Walker - lists dynamically linked functions in an executable
    - Static Analysis in Practice
        - PotentialKeylogger.exe: An Unpacked Executable
            - Dependency Walker -> Imported Functions
            - Key Imports
                - Kernel32.dll
                    - OpenProcess, GetCurrentProcess, GetProcessHeap, ReadFile, CreateFile, WriteFile, FindFirstFile, FindNextFile - can open and manipulate processes
                - User32.dll
                    - RegisterClassEx, SetWindowText, ShowWindow, RegsiterHotKey - high likelihood that this program has a GUI that may be used by hacker, triggered open using custom hotkey
                - GDI32.dll - confirm program probably has a GUI
                - Shell32.dll - program can launch other programs
                - Advapi32.dll - program uses registry which in turn tells us that we should search for strings that look like registry keys
                - Exports - LowLevelKeyboardProc and LowLevelMouseProc - used with SetWindowsHookEx to specify which function will be called when a specific event occurs
            - Packed Program.exe: A Dead End - with basic static analysis that is
    - The PE File Headers and Sections
        - Can provide a considerably larger amount of information than just imports
            - .text - contains the instructions that the CPU executes
            - .rdata - contains the import and export information
            - .data - contains programs global data
            - .rsrc - includes the resources used by the executable that are not considered part of the executable
        - Examining PE Files with PEview
            - Allows browsing through above described information
        - Viewing the Resource Section with Resource Hacker
        - Other PE Tool 
            - PEBrowse Professional and PE Explorer