Title: Linux Programming Interface
Authors: Michael Kerrisk

Summarization of Content

Chapter 1 - History
    a. A Brief History of UNIX and C
        - First Edition - November 1971 - PDP-11 w/ FORTRAN compiler
            - ar, cat, chmod, chown, cp, dc, ed, find, ln, ls, mail, mkdir, mv, rm, sh, su, who
        - Second Edition - June 1972 - Installed on 10 Machines
        - Third Edtiion - February 1973 - C Compiler and Pipes
        - Fourth Edition - November 1973 - Almost Totally C
        - Fifth Edition - June 1974 - Installed on > 50 Systems
        - Sixth Edition - May 1975 - Widely used outside of AT&T
        - Seventh Edition  - January 1979 - Improved Reliability and File System
            - awk, make, sed, tar, uucp, Bourne Shell, FORTRAN 77 Compiler
        - 3BSD - December 1979 - Berkely Software Distribution
        - System V - 1989 - Commercial Licensing
    b. A Brief History of Linux
        - GNU Project - 1984 - Richard Stallman develops free UNIX-like system without kernel
        - GNU Public License
        - Linux - March 1994
        - Linux 2.6 - December 2003
    c. Standardization
        - C Programming Language
            - American National Standards Institute ANSI C89
            - International Standard Organization ISO C99
        - POSIX - Portable Operating System Interface
            - Institute of Electrical and Electronic Engineers - POSIX.1 1988
            - POSIX.2 1992
        - FIPS 151-1 and FIPS 151-2
        - X/Open Company and The Open Group
        - SUSv3 and POSIX.1-2001
        - SUSv4 and POSIX.1-2008

Chapter 2 - Fundamental Concepts
    a. Core Operating System: The Kernel
        - Kernel - central software that manages and allocates computer resources i.e. CPU, RAM, and Devices
        - Tasks: Process Scheduling, Memory Management, Provision of File System, Processes Management, Device Access, Networking, System API
        - Modes: Kernel vs. User
    b. Shell
        - Versions: Bourne (sh), C (csh), Korn (ksh), Bourne Again (bash)
        - Capabilities: variables, loops, conditional statements, functions, I/O
    c. Users and Groups
        - Users - User ID, Home Directory, Login Shell
        - Groups - Group Name, Group ID, User List
        - Superuser - ID = 0, Name = root
    d. Single Directory
        - / -> bin,boot,etc,home,usr
        - File Types - link, directory, devices, pipes, sockets
        - Directory - special file whose contents take the form of a table of filenames coupled with references to files
        - Symbolic Links - contains name of another file
        - Filenames - 255 char portable filename character set
        - Pathnames - string of / separated directories ending in a file or directory
    e. File I/O Model
        - System Calls - open(), read(), write(), close()
        - Descriptors - 0 is standard input, 1 is standard output, and 2 is standard error
        - stdio - fopen(), fclose(), scan(), printf(), fgets(), fputs()
    f. Programs
        - Source-Code - human-readable text
        - Binary - machine-language instructions that a computer can understand
        - Filter - program reads from stdin, performs a transformation, and writes transformed data to stdout
        - CLI Arguments
            - int main(int argc, char *argv[])
            - argc is total number of arguments
            - argv is array of individual arguments
    g. Processes - instance of an executing program
        - Segments
            - Text - instruction of the program
            - Data - static variables used by the program
            - Heap - area from which programs can dynamically allocate extra memory
            - Stack - piece of memory that grows and shrinks as functions are called and returned
        - Create - parent process uses fork() to create child process that inherits parent's data, stack, and heap
        - Process Identifier PID and Parent Process Identifier PPID
        - Termination - _exit() or kill w/ signal
        - IDs
            - Process Real User ID and Real Group ID
            - Effective User ID and Effective Group ID
            - Supplementary Group IDs
        - Privilege Process - effective user id is 0 and bypasses permission restrictions
        - Init - parent of all processes, /sbin/init, creates and monitors a range of processes required by a running system
        - Daemon - special purpose process that is long-lived and runs in the background
        - Environment List - environment variables used to communicate information to processes
        - Resource Limits - setrlimit() to set soft limit and hard limit
    h. Memory Mappings
        - File Mapping - maps a region of a file into the calling process's virtual memory
        - Anonymous Mapping - initialized to 0
    i. Static and Shared Libraries
        - Static - structured bundle of compiled object modules
        - Shared - grabbed by dynamic linker and loaded into memory when needed by program
    j. Interprocess Communication
        - Mechanisms
            - Signals - indicate an event has occurred, "software interrupts"
            - Pipes - transfers data between processes
            - Sockets - transfer data from one process to another, either on same host or different hosts connected by a network
            - File Locking - allows a process to lock regions of a file in order to prevent other processes from reading or updating
            - Message Queues - used to exchange messages (packets of data) between processes
            - Semaphores - used to synchronize the actions of processes
            - Shared Memory - allows two or more processes to share a piece of memory
    k. Threads
        - Processes that share the same virtual memory as well as a range of other attributes
    l. Sessions, Controlling Terminals, and Controlling Processes
        - Session - collection of process groups
        - Controlling Terminal - established when session leader process first opens a terminal device
        - Foreground Process - may read input from terminal and send output to it
        - Background Process
    m. Pseudoterminals
        - Pair of connected virtual devices, known as master and slave with an IPC channel allowing two way data transfer
        - Slave provides an interface that behaves like a terminal, allowing another program to drive the terminal-oriented program connected to slave device
        - Examples Telnet and SSH
    n. Date and Time
        - Real Time - calendar time since Midnight on 01/01/1970
        - Process Time - total amount of CPU time that a process has used since starting
            - System CPU Time - time spent executing code in kernel mode
            - User CPU Time - time spent executing code in user mode
        - Time command - real, system CPU, and user CPU time
    o. Client-Server Architecture
        - Client - asks the server to carry out some service by sending it a request message
        - Server - examines client's request, performs appropriate actions, and then sends a response message back to client
    p. Realtime
        - Extensions - asynchronous I/O, shared memory, memory-mapped files, memory locking, realtime clocks and timers, scheduling policies, realtime signals, message queues and semaphores

Chapter 3: System Programming Concepts
    a. System Calls
        - Goal - controlled entry point into the kernel, allowing a process to request that the kernel perform some action on the process' behalf
        - System Call API
        - System Calls
            - Change the processor state from user mode to kernel mode
            - Set of system calls is fixed
            - Each system call may have a set of arguments that specify information transferred from user space to kernel space and vice-versa
        - Order
            - Application program makes a system call by invoking a wrapper function in the C Library
            - Wrapper function makes system call arguments available to the system by copying arguments into specific registers
            - Wrapper function copies system call number into CPU register %eax
            - Wrapper function executes a trap machine instruction, which causes the processor to switch from user mode to kernel mode and execute code pointed to by location 0x80
            - Kernel invokes system_call() routine
                - Saves register values onto the kernel stack
                - Checks validity of the system call number
                - Invokes appropriate system call service routine using system call number to index a table of all system calls sys_call_table
                - Service routine performs the required task and then returns a result status to system_call() routine
                - Restores register values from the kernel stack and places the system call return value on the stack
                - Returns to the wrapper function
            - Processor switches back to user mode
            - If return value of system call indicates an error, wrapper function sets errno using the value
            - Wrapper function returns to the caller, providing an integer return value indicating the success or failure of the system call
        - Overhead - system calls have a small but appreciable overhead
    b. Library Functions
        - Goal - one of the multitude of functions that constitutes the standard C library
        - Some use system calls and others do not
        - Standard C Library
            - GNU C Library - glibc
            - Version - /lib/libc.so.6
    c. Handling Errors
        - Important - always check status value from system call and library functionss for an error
        - System Call Errors
            - Error is normally indicated by -1
            - Check Example - fd = system call, if (fd == -1) {/* Code to Handle an Error */}
            - Print Error Message - perror() and strerror()
        - Library Function Errors Three Types
            - Return in same way as system calls
            - Set errno to indicate specific error condition aand returns a value other than -1 on error
            - Errno is not used at all
    d. Example Programs in this Book
        - Command-Line Options and Arguments
            - standard getopt() library
        - Common Functions and Header Files
            - Header File - tlpi_hdr.h pg. 51
            - Error Diagnostic Functions - error_functions.h
                - errMsg() - prints a message on standard error
                - errExit() - prints a message on standard error and terminates the program
                - err_exit() - similar to errExit() but does not flush standard output before print error and does not flush stdio buffers or invoke exit handlers
                - errExitEN)() - similar to errExit() but prints error number instead
                - fatal() - used to diagnose general errors, including errors that don't set errno
                - usageErr() - diagnose errors in command-line argument usage
                - cmdLineErr() - diagnose errors in command-line arguments specified to a program
                - Parsing Command Line Arguments
                    - getInt()
                    - getLong()
    e. Portability Issues
        - Feature Test Macros - have header files expose the definitions (constants, function prototypes, and so on) that follow a particular standard
        - System Data Types - pg. 65
