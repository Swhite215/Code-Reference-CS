Docker Fundamentals
    1. Quick Start
        - Three Innovations
            - Image, Registry, and Container
                - Image - representation of application
                    - Applicaiton, Dependencies, Binaries, Libraries
                - Registry - image/app distribution
                - Container - identical runtime environments
        - Playground - labs.play-with-docker.com
        - Docker System
            - Client
            - Server - Socket, TCP/TLS, SSH Tunnel
        - Major Linux
            - Namespaces, CGroups, VETH, IP Tables, Union Mount
        - Areas
            - Isolation - running multiwple applications on same system and avoiding conflicts
            - Environments - reduced envirnoment variances, contain runs same way with same dependencies 
                - The "Matrix From Hell" Breeds Complexity
            - Speed - develop, build, test, and deploy faster
                - Mainframe to PC
                - Baremetal to Virtual
                - Datacenter to Cloud
                - Host to Container
    2. Course Introduction
    3. Setup
    4. Creating and Using Containers Like a Boss
        - CLI Command Structure
            - docker command
            - docker command sub-command
        - Image vs. Container
            - Image - binary source code
            - Container - running instance
            - Registry - contains images
        - Running a Container
            - Look for image locally in image cache
            - Look in remote image repository
            - Download version
            - Create new container based on image
            - Gives it a virtual IP on a private network inside docker engine
            - Open up port 80 on host and forward to port 80 on container
        - Containers vs Virtual Machines
            - Container - process running on host machines hardware
            - Virtual Machines - virtualized hardware
            - Docker runs lightweight Linux Virtual Machine
        - Assignment Manage Multiple Containers
            - Documentation - docs.docker.com
            - Run nginx, mysql, and httpd, detach and name
        - Container Information
        - Docker Networks: Concepts
            - Bridge Network Default
            - Each network routes through NAT firewall on host IP
            - Best practice, create a new virtual network for each app
            - Batteries Included, But Removable - defaults can be swapped
        - Docker Networks: CLI Management of Virtual Networks
            - Frequently we overexpose applications on traditional hosting in virtual machines
        - Docker Networks - DNS
            - Note: Containers shuol dnot rely on IPs for inter-communication
            - Docker uses container name as equivalent to host name
        - DNS Round Robin
            - Create Virtual Network
            - Create Containers
            - Set Network Alias to give them an additional DNS name to respond to
        5. Container Images
            - Image - binaries and dependencies, metadata about image data and how to run the image
            - Docker Hub Registry Images
                - Official - image
                - Personal - accountname/image
                - Tags - description of image
                - Best Practice - specify exact version of the image
            - Images and Layers
                - Layers
                    - First Layer - Scratch
                    - Each Change = New Layer
                - Cache - only store one copy of a layer, multiple containers can use same layers
            - Image Tagging and Pushing
                - user/repo:tag
                - Pull image
                - Create new tag
                - Push image with new tag
            - Building Images - Dockerfile
                - FROM - normally a minimal distribution to save time and pain
                    - You inherit everything from previous image
                - ENV - set environment varaibles, main way we set keys and values for building
                - RUN - executes shell commands, installing software, file edits, etc.
                    - Best Practice - reduce layers
                - EXPOSE - expose these ports on the docker virtual network, you still need to open/forward to these ports
                - CMD - Required, final command to run when container is launched
                - WORKDIR - changing directories
                - COPY - copy source code from local machine to build
            - Building Images - Running Docker Builds
                - Order is Appropriate
                    - Keep Change Least At the Top of Dockerfile
                    - Keep Change Most At the Bottom of Dockerfile
            - Building Images - Extending Official Images
            - Container Lifetime and Persistent Data
                - Volumes - make special location outside of container UFS
                - Bind Mount - link container path to host path
            - Persistent Data
                - VOLUME - any files in the path, will persist until it is cleaned up, path in container maps to specific location on the host
                - Named Volumes - friendly way to provide a name for a volume name:/path/in/container
                - docker volume create - specify volume driver, metadata, etc.
                - Bind Mounting - mapping of a host file or directory to a container file or directory
                    - Cannot use in dockerfile, can use in docker-compose
        6. Docker Compose
            - CLI Tool and Configuration File
            - Pieces
                - First Portion - YAML Configuration File
                    - Compose YAML Formats 1, 2, 2,1, 3, 3.1
                    - Name - docker.compose.yml is default filename
                    - Segments
                        - Version
                        - Services/Containers
                            - image
                                - build and image together switches to build custom image with a specific name
                            - command
                            - environment
                            - volumes
                        - volumes
                        - networks
                - Second Portion - docker-compose CLI - not a production grade tool, but ideal for local development and test
            - Adding Image Building to Compose Files
        7. Swarms
            - Swarm Mode - Built-In Orchestration - 2016
                - Server Clustering Solution
                - Not enabled by default
                - Nodes
                    - Manager Nodes - Authority in Swarm, Encrypted Traffic
                    - Worker Nodes
                    - Control Plane - How orders are sent around the swarm
                    - RAFT - Consensus Mechanism for Swarms
                    - Service - Swarm Manager
                    - Task or Replicas - Image, Container - Instance
                - Manager
                    - API, Orchestrator, Allocator, Scheduler, Dispatcher
            - Some Important Questions
                - How do we automate?
                - How do we scale up, in down?
                - How can we ensure containers are recerated?
                - How can we replace containers without downtime?
            - First Service
                - docker swarm init - setup, PKI, security automation, RAFT Database
                - docker service - replaces run
            - Paradigm Shift
                - Docker - do something to container
                - Swarm - do something to orchestrate containers