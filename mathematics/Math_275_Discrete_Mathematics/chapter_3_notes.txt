Discrete Math and Its Applications - Rosen, Kenneth

Chapter 3: Algorithms
    a. Algorithms
        - Introduction
            - Definition - an algorithm is a finite sequence of precise instructions for performing a computation or for solving a problem
            - Algorithm - Finding Maxmimum - ice_cream.cpp
            - Properties
                - Input
                - Output
                - Definiteness - Steps of an algorithm must be defined precisely
                - Correctness - An algorithm should produce the correct output values for each set of input values
                - Finiteness - An algorithm should produce the desired output after a finite number of steps for any input in the step
                - Effectivness - It must be possible to perform each step of an algorithm exactly and in an infinite amount of time
                - Generality - The procedure should be applicable for all problems of the desired form, not just for a particular set of input values
        - Searching Algorithms - locating an element in an ordered list
            - General Problem - locate an element x ina list of distinct elements, or determine that it is not in the list
            - Linear Search - compare x to every value in list until x = a1 in which the element is found, or until you reach the end of the list, meaning no match occurs
            - Binary Search - compare x to the middle term of the list, split list and choose which half depending on if x is lower and higher than middle term, repeat check
        - Sorting - ordering the elements of a list
            - Bubble Sort - put a list into increasing order, by successively comparing adjacent elements, interchanging them if they are in the wrong order.
            - Insertion Sort - start with second element, compare to first, if smaller, put in front of first, if larger stay, then third, start with 1, then 2, if larger stary, then n, start with 1, go till n, at end, use linear search
        - String Matching - finding where a patter occurs in a text string
            - Naive String Matcher - run through all possible shifts, checking if starting at new index, next set of characters match each character in text
        - Greedy Algoritms
            - Optimization Problems - goal is to find a solution to a given problem that either minimzes or maximizes the value of some parameter
            - Greedy Algorithm - select "best" choice at each step
            - Example - Cashiers Algorithm
                - Goal - making change using the least total number of coins
                - Action - making a local optimal choice at each step, that is at each step we choose the coin of the largest denomination possible to add to the pile of change without exceeding n cents
            - LEMMA 1 - If n is a positive integer, then n cents in change using quarters, dimes, nickels, and pennies using the fewest coins possible has at most two dimes, at most one nickel, at most four pennies, and cannot have two dimes and a nickel. The amount of change in dimes, nickels, and pennies cannot exceed 24 cents
        - The Halting Problem - problem that cannot be solved using any procedure
    b. Growth of Functions
        - Introduction
        - Big-O Notation
            - Definition - Let f and g be functions from the set of integers or the set of real numbers to the set of real numbers.
                - We say that f(x) is O(g(x)) if there are constants C and k such that |f(x)| <= C|g(x| whenver x > k.
            - Same Order - two functions f(x) and g(x) that satisfy both of these Big-O relationships
            - Why - Big-O is used extensivley to estimate the number of operations an algorithm uses as its input grows. With the help of this notation, we can determine whether it is practical to use a particular algorithm to solve a problem as the size of the input grows