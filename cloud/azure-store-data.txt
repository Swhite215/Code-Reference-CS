Microsoft Certified: Azure Developer Associate

Store Data in Azure

    1. Module 1: Choose a Data Storage Approach in Azure
        a. Classify Data
            - Structured - relational data, strict schema
            - Semi-Structured - tags such as key/value pairs, NoSQL
                - Serialization Languages - XML, JSON, YAML
                - NoSQL - key-value, graph, document
            - Unstructured
                - files, photos, videos
        b. Determine Operational Needs
            - Operations and Latency
                - Will you be doing lookups using an ID?
                - Do you need to query the database for one or more fields?
                - How many create, update, and delete operations do you expect?
                - Do you need to run complex analytical queries?
                - How quickly do these operations need to complete?
        c. Group Multiple Operations in a Transaction
            - Transaction - logical group of database operations that execute together
            - ACID - Atomicity, Consistency, Isolation, and Durability
            - OLTP vs. OLAP - Online Transaction Processing (large volume of data), Online Analytical Processing (large complexity)
    
    2. Module 2: Create an Azure Storage Account
        a.  Decide How Many Storage Accounts You Need
            - Azure Storage - Azure Blogs, Azure Files, Azure Queues, and Azure Tables (Primitive and Cloud-Based)
            - Storage Account - container that groups a set of Azure Storage services together
                - Subscription - Azure subscription that will be billed for the services in the account
                - Location - Datacenter that will store the services in the account
                - Performance - Standard -  Blob, File, Queue, Table or Premium - Page Blob and SSDs
                - Replication - strategy used to make copies of your data (Locally Redundant Storage)
                - Access Tier - Blob access speed is either hot = quick or cool = slower
                - Secure Transfer Required - HTTPs vs. HTTP
                - Virtual Networks - security feature that allows inbound access requests
            - How Many? - One for every group of settings that you want to apply for your data 
                - Data Diversity - e.g. specific to a region or proprietary 
                - Cost Sensitivity - e.g. critical w/ geo-redundant storage and non-critical w/ locally-redundant storage
                - Tolerance for MGMT Overhead - e.g. partitions that share characteristics like location, billing and replication, then storage account for each
        b. Choose Your Account Settings
            - Name - globally unique, lowercase and digits, between 3 and 24 characters
            - Deployment Model - Resource Manager w/ Azure Resource Manager API (Recommended) or Classic w/ Azure Service Management API
            - Account Kind - StorageV2 supports all storage types and features, Storage supports all storage types, Blob supports block blobs and append blobs
        c. Choose Account Creation Tool
            - Azure Portal, Azure CLI, Azure PowerShell, and Management Client Libraries
        d. Exercise - Create a Storage Account
    
    3. Module 3: Connect an App to Azure Storage
        a. Explore Azure Storage Services
            - Durable - redundancy through replication
            - Secure - encrypted
            - Scalable
            - Managed - maintenance and critical problems handled by Azure
            - Types - Blobs, Files, Queues, and Cosmos DB
            - Blob Storage
                - Serving images or documents
                - Storing files for distributed access
                - Streaming video and audio
                - Storing data for backup and restoration, disaster recovery, and archiving
                - Storing data for analysis
                - Blobs
                    - Block - test or binary files up to ~5 TB
                    - Page - random access files up to ~8 TB
                    - Append - Block blobs optimized for append
            - Files Storage
                - network file share using Server Message Block Protocol
            - Queues
                - store and retrieve messages up to 64 KB in size
            - Azure Storage Accounts
                - Unique namespace in Azure to store and access your data objects
        b. Exercise - Create a New App to Work with Azure Storge
            - Create an Azure Storage Account w/ Azure CLI
                - az storage account create --resource-group learn-43b34866-2683-4dad-a47e-6a0d6e788acc --kind StorageV2 --sku Standard_LRS --access-tier Cool --name storage02032020
        c. Exercise - Add the Storage Client Library to Your App
            - npm i azure-storage --save
        d. Exercise - Connect to Azure Storage Account
            - Pre-Requisties - access key, REST API endpoint
            - REST API Endpoints
                - Blobs - https://[name].blob.core.windows.net/
                - Queues - https://[name].queue.core.windows.net/
                - Table - https://[name].table.core.windows.net/
                - Files - https://[name].file.core.windows.net/
            - Connection String - DefaultEndpointsProtocol=https;AccountName={your-storage};AccountKey={your-access-key};EndpointSuffix=core.windows.net
        e. Exercise - Add Azure Storage Configuration to Your App
            - Create .env configuratio file
                - touch .env
                - AZURE_STORAGE_CONNECTION_STRING=<value
            - Get Connection String
                - az storage account show-connection-string --resource-group learn-43b34866-2683-4dad-a47e-6a0d6e788acc --query connectionString --name storage02032020
                - Paste into .env file
            - Add Support to Read .env File
                - npm install dotenv --save
            - Add Code to Read the Configuration File
                - require('dotenv').config()
        f. Initialize Storage Account Model
            - const storage = require('azure-storage')
            - Services
                - const blobService = storage.createBlobService();
                - const fileService = storage.createFileService();
                - const queueService = storage.createQueueService();
                - const tableService = storage.createTableService();
            - Tip: Use util.promisify to convert callback methods into promises, then use async/await
        g. Exercise - Connect with your Azure Storage Configuration
            - code - createBlob.js