Microsoft Certified: Azure Developer Associate

Deploy a Website to Azure with Azure App Service

    1. Module 1: Prepare Your Development Environment for Azure
        a. Exercise - Set Up Visual Studio Code
            - Install Visual Studio Code
            - Install Azure App Service Extension
    
    2. Module 2: Host a Web Application with Azure App Service
        a. Create a Web App in the Azure Portal
            - Step One: Create a Web App/ App Service App
            - Azure App Service - fully managed web application hosting platform
            - Deployment Slots - live apps with their own hostnames (development, staging, production)
            - Continuous Integration/Deployment Support
                - Azure DevOps, GitHub, Bitbucket, FTP, or Local Git
            - Built-in Auto Scale Support (automatic scale out based on real world load)
            - Creating a Web App
                - Create a Resource -> Web App -> Runtime ~ Operating System
            - App Service Plans
                - Set of virtual server resources that run App Service apps
                - Size or sku or pricing tier, determines the performance characteristics of the virtual servers that run the apps
                - 1 App Service Plan - Many App Service Web Apps
        b. Exercise - Create a Web App in the Azure Portal
            - Create a Resource -> Web: Web App -> Configure -> Resource -> URL -> Confirm Placholder Page
        c. Exercise - Write Code to Implement a Web Application
            - mkdir -> npm init -> index.js w/ simple server
        d. Deploy Code to App Service
            - Automated Deployment
                - Azure DevOps, GitHub, Bitbucket, OneDrive, DropBox
            - Manual Deployment
                - Git, az webapp up, zip deploy, visual studio, FTP/S
        e. Exercise - Deploy Your Code to App Service
            - Necessary Variables
                - APPNAME=$(az webapp list --query [0].name --output tsv)
                - APPRG=$(az webapp list --query [0].resourceGroup --output tsv)
                - APPPLAN=$(az appservice plan list --query [0].name --output tsv)
                - APPSKU=$(az appservice plan list --query [0].sku.name --output tsv)
                - APPLOCATION=$(az appservice plan list --query [0].location --output tsv)
            - Spin Up Web Application
                - az webapp up --name $APPNAME --resource-group $APPRG --plan $APPPLAN --sku $APPSKU --location "$APPLOCATION"
            - Spin Up React Web Application
                - Prepare React Application
                    - Add web.config to public folder
                    - Add index.js to public folder
                    - npm run build
                - FTP React Application
                    - App Service -> Deployment Center -> FTP -> FileZilla
                    - Copy everything in build folder to wwwroot
                - Install Express
                    - App Service -> Development Tools: Advanced Tools -> Bash > cd site/wwroot
                    - npm i express --save
                    - RESTART Azure Web App
                
    3. Module 3: Publish a Web App to Azure with Visual Studio
        a. Install the Necessary Workloads
            - ASP.NET and Web Development
            - Azure Development
        b. Exercise - Create a new ASP.NET Core App
        c. Explore the Azure App Service
            - Azure App Service - service for hosting web applications, REST APIs, and mobile backends
            - App Service Plan - defines the compute resources your app will consume, where those resources are located, how many additional resources and pricing tier
                - Region, # of VM instances, Size of VM instances, Pricing Tier
                - Pricing and Reliability
                    - Shared Compute: Free and Shared
                    - Dedicated Compute: Basic, Standard, Premium and Premium V2
                    - Isolated
        d. Exervise - Publish an ASP.NET app from Visual Studio
        e. Explore Your Visual Studio App Project
            - Dependencies - internals needed to run app
            - Properties - configuration data for where web app is hosted
            - wwwroot - contains all static assets (where work should be done)
            - Pages - templates for pages of the site in Razor, .cshtml and .cs
            - appsetting.json - configuration file for ASP.NET Core
            - bundleconfig.json - preprocessing configuration
            - Program.cs and Startup.cs - configure and launch your web host for your site
        f. Exercise - Publish an update to your site

    4. Module 4: Stage a Web App Deployment and Rollback by Using App Service Deployment Slots
        a. Create Deployment Slots
            - Use a Deployment Slot
                - Slot - seaparate instance of web app with separate host name
                - Production Slot - what users see when they connect, should be stable and well tested
                - Swap Slot - instantaneous app and host name switch
                - Each slot shares the resources of the App Service plan
            - Deployment Slot Tiers
                - Only available when your app uses an App Service Plan of; Standard, Premium, or Isolated
                - Slots Per Tier: Free - 0, Shared - 0, Basic - 0, Standard - 5, Premium - 20, Isolated - 20
            - Avoid a Cold Start
                - Swap results in a warm-up of the app
            - Create
                - Web App -> Deployment Slots -> Add Slot -> Name -> Clone?
            - Access A Slot
                - Click on Slot -> URL and Click on Slot -> FTP
        b. Exercise - Create Deployment Slots
            - Create a Web App
            - Configure Git Deployment
                - Web App -> Deployment: Deployment Center -> Local Git -> App Service Build Service -> Continue -> Finish
                - Add New Credentials: Web App -? Deployment: Deployment Center -> FTP/Credentials -> User Credentials -> Add New -> Save Credentials
            - Configure the Git Client
                - Azure Cloud Shell -> git config user.name and user.email
                - mkdir demoapp -> cd demoapp
                - git clone https://github.com/Azure-Samples/app-service-web-dotnet-get-started.git && cd app-service-web-dotnet-get-started
            - Configure a Git Remote to Deploy the App to Production
                - git remote add production <git-clone-url>
                - git push production
            - Create a Staging Slot
                - Web App -> Deployment: Deployment Slots -> Add Slot -> Name -> Add
            - Set up Git Deployment for the Staging Slot
                - Web App -> Deployment: Deployment Center -> Local Git -> App Service Build Service -> Continue -> Finish
            - Set up Git to Deploy the App to the Staging Slot
                - git remote add staging <git-clone-url>
                - git push staging
            - Browse Slots
                - Slot -> URL
        c. Deploy a Web App by Swapping Deployment Slots
            - Manage Configuration for the Swap
                - Slot Setting Example - Database for production vs. for testing, set database connection string as slot setting
            - Configure Slot Settings
                - Slot -> Configuration -> Application Settings -> + New Application Setting -> Set Deployment Slot Setting -> Save
            - Swap Slots
                - Slot -> Swap -> Select Source and Target Slots
            - Slot Swapping Preview
                - Phase 1 - slot settings from target slot are applied to the web app in the source slot for testing
                - Phase 2 - host names for the two sites are swapped, source slot receives its slot settings
            - Auto-Swap
                - Slot -> Auto Swap Enabled = On -> Save
        d. Execise - Deploy a Web App by Using Deployment Slots
            - Roll Back the New Version
                - Slot -> Swap Staging and Production