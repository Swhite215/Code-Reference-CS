Microsoft Certified: Azure Developer Associate

Manage Resources

    1. Module 1: Align Requirements with Cloud Types and Service Models
        a. Azure Solutions for Public, Private, and Hybrid Cloud
            - Cloud Computing - provisioning of service and applications on demand over the internet
            - Public Cloud
                - Services are offered over the public internet and availble to anyone who wants to purchase them
                - Servers and storage are owned and operated by a third-party cloud service provider
                - Why? - Service consumption is on-demand, no upfront hardware, automation, geographic dispersity, reduced hardware maintenance
            - Private Cloud
                - Computing resources used exclusively by users from one business or organization
                - Located at organization's data center or hosted by a third-party service provider
                - Why? - Pre-existing environment, legacy applications, data sovereignty and security, regulatory compliance
            - Hybrid Cloud
                - Combines public and private cloud by allowing data and applications to be shared between them
                - Why? - Existing hardware investment, regulatory requirements, unique operating environments, migration
        b. Cloud Service Models
            - Infrastructure-as-a-Service IaaS - provides instant computing infrastructure that you can provision and manage over the internet
            - Platform-as-a-Serice PaaS - provides ready-made development and deployment environments taht you can use to deliver your own cloud service
            - Software-as-a-Service SaaS - delivers applications over the internet as a web based service
            - Spectrum
                - You Manage - On-Premises, IaaS, PaaS, Provider Managers - SaaS
        c. Infrastructure-as-a-Service
            - Common Scenarios - Website Hosting, Web Apps, Storage/Backup/Recovery, High-Performance Computing, Big Data Analysis
            - Advantages - Eliminates capital expense and reduces ongoing costs, improves business continuity, respond quicker to shifting conditions, increase stability, reliability, and supportability
        d. Platform-as-a-Service
            - Common Scenarios - Development framework, analytics or business intelligence
            - Advantages - Reduced development time, develop for multiple platforms, affordable sophisticated tools, support geographically distributed development teams, efficiently manage application lifecycle
        d. Software-as-a-Service
            - Common Scenarios - Productivity apps such as email, collaboration, calendaring, and sophisticated business applications
            - Advantages - Access to sophisticated applications, use free client software, access app data from anywhere

    2. Module 2: Control Azure Services with the CLI
        a. What is the Azure CLI?
            - Command-line program to connect to Azure and execute administrative commands on Azure resources
        b. Exercise - Install
            - brew update && brew install azure-cli && az --version
        c. Work with the Azure CLI
            - What resources? - resource groups, storage, virtual machines, azure active directory, containers, machine learning and more
            - Group - service provided by Azure
            - Subgroup - divide commands for service into logical groupings
            - Example - storage = group, and account, blob, storage, and queue = subgroups
            - Tips and Tricks
                - az find subgroup/group, az find "az group", az find "az group command"
                - az group subgroup --help
                - az group list --query "[?name == '$RESOURCE_GROUP']"
                - az appservice plan create --help
            - Creating a resource
                - Connect - az login
                - Create - az group create --name <name> --location <location>
                - Verify - az group list & az group list --output table
        d. Exercise - Create an Azure Website Using the CLI
            - Variables
                - export RESOURCE_GROUP=learn-d53fd2e7-4def-4e95-8eb7-e10be0d1dd85
                - export AZURE_REGION=centralus
                - export AZURE_APP_PLAN=popupappplan-$RANDOM
                - export AZURE_WEB_APP=popupwebapp-$RANDOM
            - az group list --output table
            - Create App Service
                - az appservice plan create --name $AZURE_APP_PLAN --resource-group $RESOURCE_GROUP --location $AZURE_REGION --sku FREE
                - az appservice plan list --output table
            - Create WebApp
                - az webapp create --name $AZURE_WEB_APP --resource-group $RESOURCE_GROUP --plan $AZURE_APP_PLAN
                - az webapp list --output table
            - Deploy Code from Github
                - az webapp deployment source config --name $AZURE_WEB_APP --resource-group $RESOURCE_GROUP --repo-url "https://github.com/Azure-Samples/php-docs-hello-world" --branch master --manual-integration
                - curl $AZURE_WEB_APP.azurewebsites.net

    3. Module 3: Automate Azure Tasks Using Scripts with Powershell
        a. Is Powershell right for you?
            - Module added to PowerShell Core or Windows Powershell to let you connect to azure subscriptions and manage resources
            - Interactive Mode (Write and Execute) or Scripting Mode
            - Considerations - automation, learning curve, team skillset
        b. Install PowerShell
            - Base - PowerShell on Windows or PowerShell Core on MacOS and Linux
            - Module - Azure PowerShell
        c. Exercise - Install Azure PowerShell
            - brew tap homebrew/cask
            - brew cask install powershell
            - pwsh
        d. Create an Azure Resource using Scripts in PowerShell
            - PowerShell cmdlets - PowerShell command that should be simple and single-purposed
                - verb-noun e.g. Get-Process, Format-Table, Start-Service
                - Get-Help Verb-Noun -detailed
            - PowerShell Modules - DLL that includes the code to process each available cmdllet
            - Install Module - Install-Module AZ -AllowClobber
            - Update a Module - Update-Module -Name <name>
            - Create a Resource Group
                - Import Azure Cmdlets
                    - Import-Module Az
                - Connect to Azure Subscription
                    - Connect-AzAccount
                - Create Resource Group
                    - Select-AzSubscription -Subscription "Visual Studio Enterprise"
                    - Get-AzResourceGroup | Format-Table
                    - New-AzResourceGroup -Name mynewresourcegroup -Location "East US"
                    - Get-AzResource | ft
                    - Get-AzResource -ResourceGroupName ExerciseResources
                - Create Virtual Machine
                    - New-AzVm -ResourceGroupName <resource group name> -Name <machine name> -Credential <credentials object> -Location <location> -Image <image name>
                    - New-AzVM -Name MyVm -ResourceGroupName ExerciseResources -Credential (Get-Credential) ...
                    - $vm = Get-AzVM  -Name MyVM -ResourceGroupName ExerciseResources
                    - $ResourceGroupName = "ExerciseResources"
                - Verify Creation                    
                    - $vm = Get-AzVM  -Name MyVM -ResourceGroupName $ResourceGroupName
                    - $vm.HardwareProfile.vmSize = "Standard_DS3_v2"
                    - Update-AzVM -ResourceGroupName $ResourceGroupName  -VM $vm
        e. Exercise - Create an Azure Resource Using Scripts in PowerShell
            -  Create Linux VM
                - New-AzVm -ResourceGroupName learn-05157b5a-6053-4f59-8b2a-d3d6fae06523 -Name "testvm-eus-01" -Credential (Get-Credential) -Location "East US" -Image UbuntuLTS -OpenPorts 22
                - $vm = Get-AzVM -Name "testvm-eus-01" -ResourceGroupName learn-05157b5a-6053-4f59-8b2a-d3d6fae06523
                - $vm
                - $vm.HardwareProfile, $vm.NetworkProfile, $vm.OsProfile, $vm.LinuxConfiguration, $vm.Location, $vm.Type, $vm.Name, $vm.VMId, $vm.StorageProfile
                - $vm | Get-AzPublicIpAddress
            - Delete a VM
                - Stop-AzVM -Name $vm.Name -ResourceGroup $vm.ResourceGroupName
                - Remove-AzVM -Name $vm.Name -ResourceGroup $vm.ResourceGroupName
                - Get-AzResource -ResourceGroupName $vm.ResourceGroupName | ft
            - Delete Resources
                - Network Interface
                    - $vm | Remove-AzNetworkInterface â€“Force
                - Managed OS Disks and Storage Account
                    - Get-AzDisk -ResourceGroupName $vm.ResourceGroupName -DiskName $vm.StorageProfile.OSDisk.Name | Remove-AzDisk -Force
                - Virtual Network
                    - Get-AzVirtualNetwork -ResourceGroup $vm.ResourceGroupName | Remove-AzVirtualNetwork -Force
                - Network Security Group
                    - Get-AzNetworkSecurityGroup -ResourceGroup $vm.ResourceGroupName | Remove-AzNetworkSecurityGroup -Force
                - Public IP Address
                    - Get-AzPublicIpAddress -ResourceGroup $vm.ResourceGroupName | Remove-AzPublicIpAddress -Force
        f. Create anbd Save Scripts in Azure PowerShell
            - PowerShell Script - text file containing commands and control constructs that are invocations of cmdlets
            - File Extension - .ps1
            - Execute - .\myscript.ps1
            - Variables - $var = value or $adminCredential = Get-Credential
            - Use Variable - $var
            - Loops - for ($ = 1; $i -lt 3; $i++) { $i }
            - Parameters
                - command - .\setupEnvironment.ps1 -size 5 -location "East US"
                - inside script - param([string]$location, [int]$size)
                - command - .\setupEnvironment.ps1 5 "East US"
                - inside script - param([int]$size, [string]$location)
        g. Exercise - Create and Save Scripts in Azure PowerShell
            - Script
                - touch "./ConferenceDailyReset.ps1"
                - param([string]$resourceGroup)
                - $adminCredential = Get-Credential -Message "Enter a username and password for the VM administrator."
                - For ($i = 1; $i -le 3; $i++) 
                - {
                    $vmName = "ConferenceDemo" + $i
                    Write-Host "Creating VM: " $vmName
                    New-AzVm -ResourceGroupName $resourceGroup -Name $vmName -Credential $adminCredential -Image UbuntuLTS
                - }
            - Execute - .\ConferenceDailyReset.ps1 learn-e475e3df-5e7c-4d05-916e-75e65a12b191
            - Verify - Get-AzResource -ResourceType Microsoft.Compute/virtualMachines
        
    4. Module 4: Predict Costs and Optmize Spending for Azure
        a. Notes - Azure Fundamentals Module 12
    
    5. Module 5: Control and Organize Azure Resources with Azure Resource Manager
        a. Notes - Azure Fundamentals Moduel 11

    6. Module 6: Move Azure Resources to Another Resource Group
        a. Identify Correctly Assigned Resources
            - Consistent Naming Convention
            - Resource Group Actions: Search, Filter, Create, Move
            - Use Tags
        b. Exercise - Identify Correctly Assignerd Resources
        c. Access Resources that Can Move
            - Can Be: Azure Storage Accounts, VMs, Virtual Netoworks
            - Can't Be: Azure Active Directory Domain Services, Azure Backup Vaults, Azure App Service Gateways
        d. Validate Resources in Azure
            - validate move operation from the Azure REST API
            - az rest --method post --uri https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/<your-source-group>/validateMoveResources?api-version=2019-05-10 --body "{\"resources\": [\"<your-resource-id-1>\", \"<your-resource-id-2>\", \"<your-resource-id-3>\"], \"targetResourceGroup\": \"/subscriptions/<your-subscription-id>/resourceGroups/<your-target-group>\"}"
            - az rest --method get --uri <returned-location-from-POST>
        e. Steps to Move Resources Between Azure Resource Groups Azure CLI
            - Create A Resource Group
                - az group create --name <destination resource group name> --location <location name>
            - Get the Resource
                - yourResource=$(az resource show --resource-group <resource group name> --name <resource name> --query id --output tsv)
            - Move Resource
                - az resource move --destination-group <destination resource group name> --ids $yourResource
            - Verify
                - az group show --name <destination resource group name>
        f. Exercise - Move and Verify Resouces Between Azure Resource Groups
            - Search on Tags -> Select Tag -> Select Resource -> Move: Move to another resource group -> Resource Group: New -> OK
        