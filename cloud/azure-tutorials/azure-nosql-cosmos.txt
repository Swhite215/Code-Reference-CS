Microsoft Certified: Azure Developer Associate

Work with NoSQL Data in Azure Cosmos DB

    1. Module 1: Create an Azure Cosmos DB Database Built to Scale
        a. Exercise - Create an Azure Cosmos DB Account in the Azure Portal
            - Azure Cosmos DB - Azure resource that acts as an organizational entity for your databases
                - 1 Azure Cosmos DB - several supported data models
                - APIS - SQL (Document Database), Gremlin (Graph), MongoDB (Document), Azure Table, and Cassandra - each requires a separate account
                - Graph/Tables or Migration - create additional accounts with relevant data models
            - Create A Resource -> Databases -> Azure Cosmos DB -> Configure
        b. Request Unit
            - Request Unit - measurement of throughput, measured per second, request unit / second, must reserve the number of RU/S in advance to handle estimated load
                - Basics - 1 RU is equal to the approximate cost of performing a single GET requests on a 1KB document
                - # of RUs depends on document size, properties of document, operation being performed, and items such as consistency and indexing policy
                - Request Unit Charge - multiple amount of consumed RUs of each operation by the estimate number of times each operation will be executed per second
                - Provision in increments of 100 RUs per second
                - Important Factors - item size, item indexing, item property count, indexed properties, data consistency, query patterns, script usage
                - Exceeding Throughput Limit - requests become rate limited after hitting provisioned throughput
            - Provisioning Throughput - Provision throughput for your containers to perform writes, reads, updates, and deletes
            - Scale - estimate throughput needs by estimates number of operations youll have to support at different times
        c. Choose a Partition Key in Azure Cosmos DB
            - Partition Strategy - scale out, horizontal scaling, enables you to add more partitions to teh database as you neede them
            - Partition Key - value set when creating a container which organizes your data into logical divisions
                - Hot Partition - single partition that receives many more requests than others, which can create a throughput bottleneck
                - Storage space for the data associated with each partition key cannot exceed 10 GB
            - Best Practices
                - Dont be afraid of partition key that has a large number of values
                - Review top three to five queries you plan on using, value most frequently included in the WHERE clause is a good candidate for the partition key
                - For write-heavy workflows, youll need to understand the transaction needs of your workload, because partition key is the scope of multi-document transactions
        d. Exercise - Create a Database and Container in Azure Cosmos DB
            - Create Database and Container
                - Cosmos DB -> Data Explorer -> New Container -> Configure
    
    2. Module 2: Choose the Appropriate API for Azure Cosmos DB Storage
        a. Idenitfy the Technology Options
            - Consistency Levels - strong, bounded staleness, session, consistent prefix, and eventual
            - Core SQL API
                - default api, provides you with a view of your data that resembles a traditional NoSQL document store
                - Query JSON documents with a SQL-like language - SELECT, FROM, WHERE, BETWEEN, COUNT, SUM, MIN, MAX, ORDER BY
                - Uses JavaScript's type system, expression evaluation and function invocation
            - MongoDB API
                - MongoDB Wire Protocol using existing client SDKs, drivers, and tools as if you are running an actual MongoDB database
            - Cassanda API
                - Query data using the Cassandra Query Language - CREATE KEYSPACE, CREATE TABLE, ALTER TABLE, USE, INSERT, SELECT, UPDATE, BATCH, DELETE
                - Data will appear to be a partitioned row store
            - Azure Table API
                - Support for applications written for Azure Table Storage that need premium capabilities like global distribution, high availability, scalable throughput
                - Querying is accomplished using OData and LINQ queries, and original REST API for GET operations
            - Gremlin Graph API
                - Graph based view of data
                - Datat is either a vertex (which is an individua item in the database) or an edge (which is a relationship betwen items in the database)
        b. Analyze the Decision Criteria
            - New Project - Core SQL
            - Existing MongoDB, Cassandra, Azure Table or Gremlin Data - Corresponding API
            - Analysis of Relationships Between Data - Gremlin
            - Everything Else - Core SQL
        c. Use Core SQL to Store a Product Catalog
            - Reasons - Semi-structured data, needed filtering functionality, schema has to be flexible
        d. Use Gremlin Graph API as a Recommendation Engine
            - Reasons - Data store needs to be able to assign weight values to the relationships between products (e.g. number of time relationship occurs)
        e. Use MongoDB to Import Historical Order Data
            - Reasons - Semi-structured data that needs the flexibility to store many different data formats
        f. Use Cassandra for Web Analytics
            - Reasons - Previous experience working with Cassandra
        g. Use Azure Table to Store IoT Data
            - Reasons - Moving an existing huge database with low throughput to CosmosDB
    
    3. Module 3: Insert and Query Data in Your Azure Cosmos DB Database
        a. Exercise - Set Up Your Azure Cosmos DB and Container
            - Create Azure Cosmos DB Account and Database with the Azure CLI
                - export NAME=mysupersweetcosmosdb
                - az cosmosdb create --name $NAME --kind GlobalDocumentDB --resource-group learn-b01b7956-0fd1-403d-987a-5b037b930e29
                - az cosmosdb sql database create --account-name $NAME --name "Products" --resource-group learn-b01b7956-0fd1-403d-987a-5b037b930e29
                - az cosmosdb sql container create --account-name $NAME --database-name "Products" --name "Clothing" --partition-key-path "/productId" --throughput 1000 --resource-group learn-b01b7956-0fd1-403d-987a-5b037b930e29
        b. Exercise - Add Data Using Data Explorer
            - Data Explorer - A tool included in the Azure portal that is used to manage data stored in an Azure Cosmos DB
                - UI for navigating, viewing data, querying and modifying data, and creating and running stored procedures
            - Order
                - Azure Cosmos DB -> Data Explorer -> Open Full Screen -> Database -> Container -> Items -> New Item -> JSON
        c. Explore SQL Query Types
            - SELECT - SELECT * FROM Products p
            - FROM CLAUSE - SELECT p.id FROM Products AS p or SELECT p.id FROM Products p
            - Sub-Documents - SELECT * FROM Products.shipping
            - WHERE CLAUSE - SELECT * FROM Products p WHERE p.id ="1"
            - ORDER BY - SELECT p.price, p.description, p.productId FROM Products p ORDER BY p.price ASC
            - JOIN - SELECT p.productId FROM Products p JOIN p.shipping
        d. Exercise - Run Queries Using Data Explorer
            - Azure Cosmos DB -> Data Explorer -> Open Full Screen -> Database -> Container -> New SQL Query -> Execute Query
        e. Define Stored Procedures and User-Defined Functions
            - Ensure Atomicity, Consistency, Isolation, and Durability ACID
            - Stored Procedures Basics - stored procedures perform complex transactions on documents and properties, written in javascript and stored in a container on Azure Cosmos DB
            - User-Defined Function Basics - extends the Azure Cosmos DB SQL query language grammar and implement custom business logic
        f. Excercise - Run Complex Operations on Your Data
            - Stored Procedure Order
                - Azure Cosmos DB -> Data Explorer -> Open Full Screen -> Database -> Container -> New Stored Procedure -> Execute -> Input Parameters
            - User Defined Function Order
                - Azure Cosmos DB -> Data Explorer -> Open Full Screen -> Database -> Container -> New UDF -> Query (udf.function(arguments))
    
    4. Module 4: Store and Access Graph Data in Azure Cosmos DB with the Graph API
        a. Determing If a Graph Database Fits the Needs of Your Application
            - Graph Database
                - Graph - structure that is composed of vertices (objects) and edges (relationships)
                - Properties - express information about the vertices and edges
                - Nodes or Vertices e.g. Customer, Employee, Product, Order, Category, Invoice
                - Relationships or Edges e.g. Likes, Places, Belongs to, Submits
            - Strengths and Weaknesses
                - Performance - performance is constant
                - Flexibility - easy to add an existing structure with affecting functionality
                - Weaknesses - not as efficient at processing high volumes of transactions nor handling queries that traverse an entire database
        b. Build an Application that Stores Graph Data using the Gremlin API
            - Order - Create Datrabase, Run Queries
            - Gremlin API supporst modeling graph data and provides APIs to traverse the graph data
            - Gremlin Graph Traversal Language - high-performance language used to traverse and query data from graph databases
        c. Exercise - Build an Application that Stores Graph Data using the Gremlin API
            - Create an Azure Cosmos DB Account
            - Add a Graph
                - Cosmos DB -> Copy Gremline Endpoint -> Data Explorer -> New Graph -> Add Graph -> Configure -> Keys -> Copy Primary Key
            - Create a Node.js App
                - mkdir gremlin app && cd gremlinapp && npm i gremlin
                - touch config.js && touch app.js
        d. Query Graph Data from an Application Using Gremlin API
        e. Exercise - Query Graph Data from an Application Using Gremlin API
    
    5. Module 5: Store and Access NoSQL Data with Azure Cosmos DB and the Table API
        a. Move an App to Azure Cosmos DB Table Storage
            - Azure Storage Services - Queue, File, Blob, and Table
            - Azure Storage Data Replication - Locally Redundant Storage, Zone Redundant Storage, Geo Redundant Storage, Read-Access Geo Redundant Storage
            - Differences between Azure Storage and Azure Cosmos DB Table
                - Azure Cosmos DB charges for capacity, even if it isn't used
                - Query results from Azure Cosmos DB are not sorted in order of partition key and row key as they are from Storage tables
                - Row keys in Azure Cosmos DB are limited to 255 bytes
                - Batch operations are limited to 2 MBs
                - Cross-Origin Resource SHaring is not currently supported by Azure Cosmos DB
                - Table names are only case sensitive in Azure Cosmos DB
            - Choose a Storage Location
                - Latency - Guaranteed response time in Azure Cosmos DB Tables
                - Throughput - No limit in Azure Cosmos DB Tables
                - Distribution - Replication of data for read and write to more than 30 regions in Azure Cosmos DB Tables
                - Indexes - Automatic with Azure Cosmos DB Table
                - Data Consistency - Five levels with Azure Cosmos DB Table
                - Pricing - Optmized for storage wtih Azure Storage Table and optimized for throughput with Azure Cosmos DB Table
                - SLA - Two 9s for both and three 9s for Azure Cosmos DB Table
            - How to Migrate
                - Azure Cosmos DB Data Migration Tool - import data into Azure Cosmos DB, GUI and CLI
                - AzCopy - copy to and from Azure Storage Accounts - Export, Import, CLI
        b. Exercise - Move an App to Azure Cosmos DB Table Storage
            - Create a Storage Account
            - Clone the Lenses App
                - git clone https://github.com/MicrosoftDocs/mslearn-store-access-data-cosmos-table-api lensesapp
            - Configure Lenses App with Connection String
            - Run Lenses to Populate Tables
            - Create an Azure Cosmos DB w/ Table API
            - Switch Lenses to Azure Cosmos DB
            - Populate Azure Cosmos DB
    
    6. Module 6: Build a .NET Core App for Azure Cosmos DB in Visual Studio Code
        a. Exercise - Create Cosmos DB Resourcs in Visual Studio Code
            - Install VS Code and Azure Cosmos DB extension
            - VS Code: Azure Extension -> New Cosmos DB Account -> Configure
            - Account -> Create Database -> Configure
        b. Exercise - Set Up Your App in Visual Studio Code
            - Create Console App
                - mkdir learning-module && cd learning-module
                - dotnet new console & dotnet run
            - Connect App to Azure Cosmos DB
                - ./installNuGetPackages.sh
                - /Users/pramitamitra/E.C.R.I.C.-Development/2020/learning-module/Program.CS
        c. Exercise - Create, Read, Update, and Delete NoSQL Data Programatically
            - Working with Documents Programatically
                - DocumentClient
                    - CreateDocumentAsync, ReadDocumentAsync, ReplaceDocumentAsync, UpsertDocumentAsync, DeleteDocumentAsync
                - Create, Read, Replace, Update
        d. Exerrcise - Query Using the Azure Cosmos DB .NET Core SDK
        e. Exercise - Create and Run Stored Procedures from Your App
            - Create A Stored Procedure
                - Cosmos DB Account -> Database -> Container -> Stored Procedures -> Create Stored Procedures
        
    7. Module 7: Optimize Performance of Azure Cosmos DB Using Partitioning and Indexing Strategies
        a. Measure the Rate of Data Processing in Request Units
        b. Exercise - Create and Populate Your Azure Cosmos DB Collections
            - Create Database Account
            - Azure Cosmos DB Concepts
                - Resources 
                    - Account is container for many databases
                    - Database is a container for many collections
                    - Collection is a container for many documents
                - Partitioning
                    - Distribution and grouping of your data across the underlying resources
                    - Documents are grouped in a partition based on the value of the partition key
                    - Cannot be changed after a collection is provisioned
                - Indexing
                    - Catalog of document properties and their values
                    - Can change indexing at runtime
            - Set Environment Variables for Endpoint and Keys
            - Create Collections
            - Populate Collections
                - git clone https://github.com/MicrosoftDocs/mslearn-monitor-azure-cosmos-db
                - cd mslearn-monitor-azure-cosmos-db/ExerciseCosmosDB
                - export COSMOS_NAME=$(az cosmosdb list --output tsv --query [0].name)
                - Populate the Collections
                    - dotnet run -- -c Small -o InsertDocument -n 4000 -p 10
                    - dotnet run -- -c HotPartition -o InsertDocument -n 20000 -p 10
                    - dotnet run -- -c Orders -o InsertDocument -n 20000 -p 10
        c. Exercise - Monitor and Measure Your Azure Cosmos DB Database
            - Review Metrics
                - Azure Cosmos DB -> Monitoring: Metrics
            - Measure the Throughput That Individual Queries Require by Using Data Explorer
                - Cosmos DB -> Data Explorer -> Database -> Collection -> Item -> Copy ID
                - Run Query -> Query Stats: Request Charge
            - Measure the Throughput Required for Direct Write and Reads for a Single Document
        d. Identify a Partition Strategy for Your Azure Cosmos DB
            - Avoid Hot Partitions - overusing one partition
            - Partition Design Considerations
                - Estimate the scale of your data needs
                    - range of document size, required throughput in reads/second and writes/second, volumes of documents being queried
                - Understand the workload
                    - read-heavy, write-heavy or both, top five queries, transactions needed? 
                - Propose some partition key options
                    - Does the key choices have a large number of possible values?
                    - Do the values have a consisten spread across the data?
                    - Are some values accessed more than others?
                    - Can the query be within a single partition?
                    - Can the transaction be within a single partition
        e. Exercise - Measure the Impact of Partition Key Choice
            - Measure the Impact of Partitions on Throughput
                - Review unevenly distributed parititions for throughput
                - Review evenly distributed partitions for throughput
            - Measure the Impact of Partitions on Storage
                - Review Unevenly Distributed Partitions for Storage
                - Review Evenly Distributed Partitions for Storage
        f. Identify Indexing Straegies for Your Azure Cosmos DB Data
            - Indexing Modes - extra information that sits alongside a collection to make querying more efficient
                - Consistent - index is updated synchronously every time a new document is written to the collection
                - Lazy - index is updated at a lower priority, reads and writes take a higher priority
                - None - no index, queries are expensive on collections that aren't indexed
            - Changing the Indexing Strategy
                - Add Document Properties to the Index in includedPaths
        g. Exercise - Measure the Impact of Index Policy Change
            - Measure RUs for No Index
            - Measure the RUs for Partial Index
            - Measure RUs for Lazy Indexing
            - Compare RUs Across Indexing Strategies
                - Query - Indexed = Lower RU
                - Insert - No Index = Lower RU
                - As indexing complexity goes up, write consumption goes up and read consumption goes down

    8. Module 8: Distribute Your Data Globally with Azure Cosmos DB
        a. Exercise - Dsitrbute Data Globally
            - Basics - enables you to replicate data from one region into multiple Azure regions
            - Why Replicate - delivere low latency data access and adding regional resiliency for business continuity and disaster recovery
            - Create Azure Cosmos DB Account
            - Replicate Data
                - Cosmos DB Account -> Replicate Data Globally -> Select Regions -> Save
        b. Write to Multiple Regions
            - Multi-Master Support - option where each region is a master region, equally pariticipating in a write-anywhere model, active-active pattern
            - Benefits
                - Single-Digit Write Latency
                - Three 9s Read Write Availability
                - Unlimited Write Scalability and Throughput
                - Built-In Conflict Resolution
            - Conflict Resolution
                - Last-Writer-Wins
                - Custom UDF
                - Custom Async
        c. Exercise - Change Global Read and Write Priorities
            - Automate Failover - feature that comes into play when theres a disaster or other event
            - Failover Basics
                - Read Region Outage - disconnected from write region and marked offline
                - Write Region Outage - region marked offline, alternate region is promoted as write region 
            - Set Read Region Priorities
                - Azure Cosmos DB -> Replicate Data Globally -> Automatic Failover -> Enable Automatic Failover -> Read Regions -> Order Priorities
        d. Choose a Consistency Level
            - Consistency Basics
                - Levels - strong, bounded-staleness, session, consistent prefix, eventual
                - Goal - guarantee to return the most recent version of an item
                - 73% use session consistency and 20% prefer bounded-staleness
            - Consistency Levels in Detail
                - Azure Cosmos DB -> Default Consistency -> Click Level
            - Strong Consistency - linearizability, reads guaranteed to return the most recent version of an item
            - Bounded Staleness - reads may lag behind writes by at most K versions
            - Session - scoped to a client session
            - ConsistenT Prefix Consistency - in absence of further writes, replicas within the group eventually converge
            - Eventual Consistency - in absence of any further writes, the replicas within the group eventually converge
        