Microsoft Certified: Azure Developer Associate

Connect Your Services Together

    1. Module 1: Choose a Messaging Model for Loose Connection
        a. Choose Message or Events
            - Sender or Receiver
            - Message - raw data, one component, consumed by another, contains data
            - Event - light weight notification that something happened, does not contain data
                - sender - publisher, receiver - subscriber
                - publish-subscribe architecture - components subscribe through intermediary and intermediary routes events
            - Options - Storage Queues, Event Hubs, Event Grid, or Service Bus
        b. Choose a Message Based Delivery with Queues
            - Azure Queue Storage - stores a large number of messages that can be securely accessed from anywhere using a REST API
            - Azure Service Bus - message broker system intended for enterprise applications
            - Azure Service Bus Topics - queues with multiple subscribers
            - Benefits of Queues - increased reliability, message delivery guarantees (At-Least-Once, At-Most-Once, First-In-First-Out),
            transaction support (all messages are processed or none)
            - Choose Service Bus Topics IF:
                - You need multiple receivers to handle each message
            - Choose Service Bus Queues IF:
                - You need At-Most-Once
                - You need a FIFO
                - You want to group messages into transactions
                - You want messages without polling the queue
                - You need to provide a RBAC model to queues
                - You handle messages larger than 64 KB and less than 256 KB
                - You queue will not grow larger than 80GB
                - You would like to be able to publish and consume batches of messages
            - Choose Queue Storage IF:
                - You need an audit trail of all messages that pass through the queue
                - You expect the queue to exceed 80 GB in size
                - You want to track progess for processing a message inside of the queue
        c. Choose Azure Event Grid
            - Azure Event Grid - fully managed event routing service running on Azure Service Fabric
                - distributes events from different sources, such as Azure Blob Storage or Azure Media Services, to different handlers
                such as Azure Functions or Webhooks
            - Concepts
                - Events - What happened, data messages
                - Event Sources - Where the event took place
                - Topics - Endpoints where publishers send events
                - Subscriptions - endpoint or mechanism to route events, somtetimes to multiple handlers
                - Event Handlers - app or service reacting to the event
            - Choose Azure Event Grid IF:
                - Simplicity, Advanced Filtering, Fan-Out, Reliability, and Pay-Per-Event
                - One Event at A Time
        d. Choose Azure Event Hubs
            - Azure Event Hubs - intermediary for the publish-subscribe communication pattern, optimized for extremely high-throughput,
            a large number of publishers, security, and resiliency
            - Additional Services
                - Partitions - buffers into which the communications are saved
                - Real-Time and Batch Processing
                - Capture to Azure Data Lake and Azure Blob Storage
                - Authentication through token
            - Choose Event Hubs IF:
                - You need to support authenticating a large number of publishers
                - You need to save a stream of events to a Data Lake or Blob Storage
                - You need aggregation or analytics on your event stream
                - You need reliable messaging or resiliency
    
    2. Module 2: Implement Message-Based Communication Workflows with Azure Service Bus
        a. Choose a Messaging Platform
            - Messages and Events are both datagrams - packages of data senbt from one component to another
            - Messages - important component contributing to integrity of the application, contains data
            - Events - triggers a notification that something has occurred, contains no data
            - Pizza Example - Pizza Order = Message, Pizza Status = Events
            - Service Bus Topics, Queues, and Relays
                - Queue - simple temporary storage location for messages
                - Topic - similar to a queue but multiple subscriptions
                - Relay - object that performs synchronous, two-way communication between applications
            - Service Bus Queues and Storage Queues
                - Advantages of Service Bus Queues
                    - Supports large message sizes 256KB to 1MB
                    - Supports at-least-once and at-most-once delivery
                    - Guarantees FIFO order
                    - Can group multiple messages into a transaction
                    - Supports RBAC
                    - Does not require destination components to continuously poll
                - Advantages of Storage Queues
                    - Supports unlimited queue size
                    - Maintains a log of all messages
            - How to Choose
                - Is the communication an event, i.e. no data and notification? Event Grid or Event Hubs
                - Should a single message be delivered to more than one destination? Service Bus, Else Queue
                - If you decide queue
                    - Choose Service Bus IF:
                        - At-most-once, FIFO, group messages, no pollling, RBAC, 64KB to 256KB, queue < 80GB
                    - Chose Queue Storage IF:
                        - Simple queue, audit trail, queue > 80GB, track progress for processing a message in queue
        b. Exercise - Implement a Service Bus Topic and Queue
            - Create A Service Bus Namespace - container with a unique fully qualified domain name for queues, topics, and relays
                - All Services -> Integration -> Service Bus
                - Service Bus Namespace -> + Queue
            - Create A Service Bus Topic and Subscriptions
                - + Topic
                - Entities -> Topics -> Topic -> + Subscription x N
        c. Write Code that Uses Service Bus Queues
            - Microsoft.Azure.ServiceBus NuGet Package
            - Connection Strings and Keys
                - Location of Service Bus - Endpoint - Fully Qualified Domain
                - Access Key - Service Bus restricst access to queues, topics, and relays by requiring an access key
                - Location + Access Key - provided in the form of a connection string
            - Calling Methods Asynchronously
                - Async/Await Pattern
            - Sending #1: Service Bus Queue Code
                - using System.Threading;
                - using System.Threading.Tasks;
                - using Microsoft.Azure.ServiceBus;
            - Sending #2: Create QueueClient Object and Provide Connection String
                - queueClient = new QueueClient(TextAppConnectionString, "PrivateMessageQueue");
            - Sending #3: Send Message
                - string message = "This is a test message";
                - var encodedMessage = new Message(Encoding.UTF8.GetBytes(message));
                - await queueClient.SendAsync(encodedMessage);
            - Receiving #1: Register Message Handler
                - queueClient.RegisterMessageHandler(MessageHandler, messageHandlerOptions);
            - Receiving #2: Process the Message inside MessageHandler function
            - Receiving #3: Remove Message from Queue
                - await queueClient.CompleteAsync(message.SystemProperties.LockToken);\
        d. Exercise - Write Code that Uses Service Bus Queues
            - Clone Starter Application and Open
                - cd ~
                - git clone https://github.com/MicrosoftDocs/mslearn-connect-services-together.git
                - cd mslearn-connect-services-together/implement-message-workflows-with-service-bus/src/start
                - code .
            - Configure a Connection String to a Service Bus Namespace
                - Display Primary Connection String
                    - az servicebus namespace authorization-rule keys list --resource-group learn-8735aa38-33b7-485a-9b51-b97ca841857c --name RootManageSharedAccessKey --query primaryConnectionString --output tsv --namespace-name salesteamappsw2020
            - Write Code that Sends a Message to Queue
            - Send a Message to Queue
                - dotnet run -p -privatemessagesender
            - Check Messages in Queue
                - az servicebus queue show --resource-group learn-8735aa38-33b7-485a-9b51-b97ca841857c --name salesmessage --query messageCount --namespace-name salesteamappsw2020
            - Write Code that Receives a Message from the Queue
            - Retrieve a Message from the Queue
                - dotnet run -p privatemessagereceiver
        e. Write Code that Uses Service Bus Topics
            - Microsoft.Azure.ServiceBus NuGet Package
            - Connection Strings and Keys
                - Location of Service Bus - Endpoint - Fully Qualified Domain
                - Access Key - Service Bus restricst access to queues, topics, and relays by requiring an access key
                - Location + Access Key - provided in the form of a connection string
            - Calling Methods Asynchronously
                - Async/Await Pattern
            - Sending #1: Service Bus Topic Code
                - using System.Threading;
                - using System.Threading.Tasks;
                - using Microsoft.Azure.ServiceBus
            - Sending #2: Create a TopicClient Object and Provide Connection String
                - topicClient = new TopicClient(TextAppConnectionString, "GroupMessageTopic");
            - Sending #3: Send A Message
                - string message = "This is a test message"
                - var encodedMessage = new Message(Encoding.UTF8.GetBytes(message));
                - await topicClient.SendAsync(encodedMessage)
            - Receiving #1: Create SubscriptionClient with ConnectionString, Topic and Subscription
                - subscriptionClient = new SubscriptionClient(ServiceBusConnectionString, "GroupMessageTopic", "NorthAmerica");
            - Receiving #2: Register a Message Handler
                - subscriptionClient.RegisterMessageHandler(MessageHandler, messageHandlerOptions);
            - Receiving #3: Process the Message inside MessageHandler function
            - Receiving #4: Remove Message from Queue
                - await subscriptionClient.CompleteAsync(message.SystemProperties.LockToken);
        f. Exercise - Write Code that Uses Service Bus Topics
            - Configure a Connection String to a Service Bus Namespace
                - Display Primary Connection String
                    - az servicebus namespace authorization-rule keys list --resource-group learn-8735aa38-33b7-485a-9b51-b97ca841857c --name RootManageSharedAccessKey --query primaryConnectionString --output tsv --namespace-name salesteamappsw2020
            - Write Code that Sends a Message to Topic
            - Send a Message to Topic
                - dotnet run -p -privatemessagesender
            - Check Messages in Topic
                - az servicebus queue show --resource-group learn-8735aa38-33b7-485a-9b51-b97ca841857c --topic-name salesperformancemessage --name Americas --query messageCount --namespace-name salesteamappsw2020
            - Write Code that Receives a Message from the Topic
            - Retrieve a Message from the Topic
                - dotnet run -p privatemessagereceiver
    
    3. Module 3: Communicate Between Applications with Azure Queue Storage
        a. Create Azure Storage Infrastructure
            - Azure Queue Storage - cloud-based queues
            - Why use Queues? - increases resiliency by temporarily storing waiting messages - 500TB - 2000 messages/second
            - Message - byte array of up to 64KB
            - Storage Account -> Queue
                - General Purposae Storage Account v1 or v2
                - Access Tier in StorageV2 applies to Blob Storage
                - Location that is close
                - Locally Redundant Storage LRS Geo-Redundant Storage GRS replication
                - Standard HDD and Performance SSD
                - Require secure transfer
        b. Exercise - Create a Storage Account
            - az storage account create --name <unique-name> -g <resource-group> --kind StorageV2 --sku Standard_LRS
        c. Identify a Queue
            - Three Key Pieces of Information
                - Storage Account Name, Queue Name, Authorization Token
            - Queue Identity
                - Unique Name
            - Access Authorization
                - Azure Active Directory - RBAC
                - Shared Key - Encrypted Key
                - Shared Access Signature - URI that grants limited access
            - Retrieivng Account Key
                - Azure CLI - az storage account keys list ...
                - PowerShell - Get-AzStorageAccountKey ...
            - Accessing Queues
                - REST API - http://<storage account>/queue.core.windows.net/<queue name>
                - Authorization Header inclufed with every request
            - Azure Storage Client Library for .NET
                - Connection String - string connectionString = "DefaultEndpointsProtocol=https;AccountName=<your storage account name>;AccountKey=<your key>;EndpointSuffix=core.windows.net"
        d. Exercise - Identify a Queue
            - Create the Application
                - dotnet new console -n QueueApp
                - cd QueueApp
                - dotnet build
            - Get Connection String
                - az storage account show-connection-string --name uniquename12345 --resource-group learn-87115c20-3ba8-48c5-a77b-8ed52595855b
            - Add Connection String to Queue Access Program
        e. Programmatically Access a Queue
            - Azure Storage Client Library
                - CloudStorageAccount - represents your Azure Storage Account
                - CloudQueueClient - represents Azure Queue Storage
                - CloudQueue - represents one of your queue instances
                - CloudQueueMesssage - represents a message
            - Sending #2: How to Connect to a Queue
                - CloudStorageAccount account = CloudStorageAccount.Parse(connectionString);
                - CloudQueueClient client = account.CreateCloudQueueClient();
                - CloudQueue queue = client.GetQueueReference("myqueue")
            - Sending #3: How to Create a Queue
                - await queue.CreateIfNotExistsAsync();
            - Sending #4: How to Send a Message
                - var message = new CloudQueueMessage("Test Message");
                - await queue.AddMessageAsync(message);
            - Receiving #1: How to Receive and Delete a Message
                - CloudQueue queue;
                - CloudQueueMessage message = await queue.GetMessageAsync();
                - if (message != null) {//Process the Message await queue.DeleteMessageAsync(message)}
        f. Exercise - Add A Message to the Queue
            - Add Client Library for Azure Storage
                - dotnet add package WindowsAzure.Storage
            - Add A Method to Sends a News Alert
                - Sending #1: Add Namespaces
                    - using System.Threading.Tasks;
                    - using Microsoft.WindowsAzure.Storage;
                    - using Microsoft.WindowsAzure.Storage.Queue;
                - SendMethod - String Parameters and Task Return Value
                - Above Steps #1-4 in Programmatically Access a Queue
            - Add Code to Send Message
                - Call SendMethod in Main() while passing appropriate arguments
            - Check Your Results
                - All Resources -> Storage Account -> Storage Explorer -> Queues -> QueueName
                - Azure CLI - az storage message peek --queue-name newsqueue --connection-string DefaultEndpointsProtocol=https;EndpointSuffix=core.windows.net;AccountName=uniquename12345;AccountKey=uHRE2/J9YmY089k4G9Nf01n8x+7ODdY37F/UvG0Z6b27cMJ7AhBfM9gGjUfJXrcnKp2g8BTDfhca/hBdBp4Kug==
        g. Exercise - Retrieve a Message From the Queue
            - Add A Method to Receive
                - Above Steps Sending #1-4 and Receiving #1