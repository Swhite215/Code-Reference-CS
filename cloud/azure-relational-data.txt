Microsoft Certified: Azure Developer Associate

Working with Relational Data

    1. Module 1: Provision an Azure SQL Database to Store Application Data
        a. Plan Your Azure SQL Database
            - Why choose Azure SQL Database?
                - Convenience, Cost, Scale, Security
        b. Exercise - Create Your Azure SQL Database
            - Azure SQL Logical Server - administrative container for databases
                - Control logins, firewall rules, and security policies
            - DTUs vs. vCores
                - DTU - Database Transaction Unit - measure of compute, storage and IO resources
                - eDTU - elastic DTU
                - vCore - Virtual Cores - configure compute, storage, and IO independently
            - SQL Elastic Pools - enable you to buy a set of compute and storage resources that are shared among all the DBs in the pool
            - Collation - rules that sort and compare data dealing with case sensitivity, accent marks, and other language characteristics
                - SQL_Latin1_General_CP1_CI_AS
                    - Latin1_General - Western European Languages
                    - CP1 - Code Page 1252
                    - CI - Case Insensitive
                    - AS - Accent Sensitive
            - Create Azure SQL Database
                - Create A Resource -> Databases -> SQL Database
                - Configure Server Admin
                - Configure Application Needs
                - Configure Additional Settings
            - Set the Server Firewall
                - Logistics SQL Database -> Set Server Firewall -> Add Client IP
        c. Exercise - Connect to Your Database and Add Sample Data
            - Get Information About SQL Database
                - az configure --defaults group=learn-a789d569-c53f-404f-ae6f-25a657dc892b sql-server=servernameswhit
                - az sql db list
                - az sql db list | jq '[.[] | {name: .name}]'
                - az sql db show --name Logistics
                - az sql db show --name Logistics | jq '{name: .name, maxSizeBytes: .maxSizeBytes, status: .status}'\
            - Connect to Database
                - az sql db show-connection-string --client sqlcmd --name Logistics
                - sqlcmd -S tcp:servernameswhit.database.windows.net,1433 -d Logistics -U adminlogin -P Password1234 -N -l 30
            - Work with Database
                - Database -> Query Editor -> Run Queries
                - CREATE TABLE Drivers (DriverID int, LastName varchar(255), FirstName varchar(255), OriginCity varchar(255));
                - SELECT name FROM sys.tables;
                - INSERT INTO Drivers (DriverID, LastName, FirstName, OriginCity) VALUES (123, 'Zirne', 'Laura', 'Springfield');
                - SELECT DriverID, OriginCity FROM Drivers;
                - UPDATE Drivers SET OriginCity='Boston' WHERE DriverID=123;
                - DELETE FROM Drivers WHERE DriverID=123;
                - SELECT COUNT(*) FROM DRIVERS;
    
    2. Module 2: Create an Azure Database for PostgreSQL
        a. Benefits
            - High Availability, Simple and Flexible Pricing, Scaling, Automatic Backups and Restores, Enterprise Grade Security
        b. Create an Azure Database for PostgreSQL using Azure Portal
            - Azure Database for PostgreSQL - parent resource for the database
            - Server Resource - container with stong lifetime implicaitons for  your server and databases
            - Server Name - <resource-name>.postgres.database.azure.com
            - Connection Scope - login, firewall, users, roles, and configuration
            - Pricing Tiers - Basic, General Purpose, Memory Optimized
            - Steps
                - Create a Resource -> Databases -> Azure Database for PostgreSQL
                - Provide - name, subscription, resource group, source, server admin login name, password, confirm password, location, version, pricing tier
        c. Create an Azure Database for PostgreSQL using Azure CLI
            -  as postgres server create ...
        d. Exercise - Create an Azure Database for PostgreSQL via Azure CLI
            - serverName=wingtiptoys-$RANDOM
            - userName=azureuser
            - az postgres server create --name $serverName --resource-group learn-2b48ea79-6cc9-4290-8cc7-e6aac23f199d --location centralus --sku-name B_Gen5_1 --storage-size 20480 --backup-retention 15 --version 10 --admin-user $userName --admin-password "P@ssw0rd"
        e. Server Security Considerations
            - Restricting Access - User Accounts, Virtual Networks, Firewalls
            - Add Firewall using Azure CLI
                - az postgres server firewall-rule create --resource-group learn-2b48ea79-6cc9-4290-8cc7-e6aac23f199d --server <server-name> --name AllowAll --start-ip-address 0.0.0.0 --end-ip-address 255.255.255.255
            - Remove Firewall using Azure CLI
                - az postgres server firewall-rule delete --name AllowAll --resource-group learn-2b48ea79-6cc9-4290-8cc7-e6aac23f199d --server-name <server-name>
            - Connecting to Server - psql
                - psql --host=<server-name>.postgres.database.azure.com --username=<admin-user>@<server-name> --dbname=<database>
        f. Exercise - Connect to Azure Database for PostgreSQL Server
            - Allow Azure Service Access
                - Server Resoure -> Connection Security -> Allow Access to Azure Services
            - Connect to DB with psql
                - psql --host=$serverName.postgres.database.azure.com --username=$userName@$serverName --dbname=postgres
            - Run Commands
                - \l - list all databases, q - to exit
                - CREATE DATABASE "Adventureworks"
                - \c Adventureworks
                - CREATE TABLE PEOPLE(NAME TEXT NOT NULL, AGE INT NOT NULL)
                - INSERT INTO PEOPLE(NAME, AGE) VALUES ('Bob', 35)
                - INSERT INTO PEOPLE(NAME, AGE) VALUES ('Sarah', 28)
                - CREATE TABLE LOCATIONS(CITY TEXT NOT NULL, STATE TEXT NOT NULL)
                - INSERT INTO LOCATIONS(CITY, STATE) VALUES ('New York', 'NY')
                - INSERT INTO LOCATIONS(CITY, STATE) VALUES ('Flint', 'MI')