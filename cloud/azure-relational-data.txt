Microsoft Certified: Azure Developer Associate

Working with Relational Data

    1. Module 1: Provision an Azure SQL Database to Store Application Data
        a. Plan Your Azure SQL Database
            - Why choose Azure SQL Database?
                - Convenience, Cost, Scale, Security
        b. Exercise - Create Your Azure SQL Database
            - Azure SQL Logical Server - administrative container for databases
                - Control logins, firewall rules, and security policies
            - DTUs vs. vCores
                - DTU - Database Transaction Unit - measure of compute, storage and IO resources
                - eDTU - elastic DTU
                - vCore - Virtual Cores - configure compute, storage, and IO independently
            - SQL Elastic Pools - enable you to buy a set of compute and storage resources that are shared among all the DBs in the pool
            - Collation - rules that sort and compare data dealing with case sensitivity, accent marks, and other language characteristics
                - SQL_Latin1_General_CP1_CI_AS
                    - Latin1_General - Western European Languages
                    - CP1 - Code Page 1252
                    - CI - Case Insensitive
                    - AS - Accent Sensitive
            - Create Azure SQL Database
                - Create A Resource -> Databases -> SQL Database
                - Configure Server Admin
                - Configure Application Needs
                - Configure Additional Settings
            - Set the Server Firewall
                - Logistics SQL Database -> Set Server Firewall -> Add Client IP
        c. Exercise - Connect to Your Database and Add Sample Data
            - Get Information About SQL Database
                - az configure --defaults group=learn-a789d569-c53f-404f-ae6f-25a657dc892b sql-server=servernameswhit
                - az sql db list
                - az sql db list | jq '[.[] | {name: .name}]'
                - az sql db show --name Logistics
                - az sql db show --name Logistics | jq '{name: .name, maxSizeBytes: .maxSizeBytes, status: .status}'\
            - Connect to Database
                - az sql db show-connection-string --client sqlcmd --name Logistics
                - sqlcmd -S tcp:servernameswhit.database.windows.net,1433 -d Logistics -U adminlogin -P Password1234 -N -l 30
            - Work with Database
                - Database -> Query Editor -> Run Queries
                - CREATE TABLE Drivers (DriverID int, LastName varchar(255), FirstName varchar(255), OriginCity varchar(255));
                - SELECT name FROM sys.tables;
                - INSERT INTO Drivers (DriverID, LastName, FirstName, OriginCity) VALUES (123, 'Zirne', 'Laura', 'Springfield');
                - SELECT DriverID, OriginCity FROM Drivers;
                - UPDATE Drivers SET OriginCity='Boston' WHERE DriverID=123;
                - DELETE FROM Drivers WHERE DriverID=123;
                - SELECT COUNT(*) FROM DRIVERS;
    
    2. Module 2: Create an Azure Database for PostgreSQL
        a. Benefits
            - High Availability, Simple and Flexible Pricing, Scaling, Automatic Backups and Restores, Enterprise Grade Security
        b. Create an Azure Database for PostgreSQL using Azure Portal
            - Azure Database for PostgreSQL - parent resource for the database
            - Server Resource - container with stong lifetime implicaitons for  your server and databases
            - Server Name - <resource-name>.postgres.database.azure.com
            - Connection Scope - login, firewall, users, roles, and configuration
            - Pricing Tiers - Basic, General Purpose, Memory Optimized
            - Steps
                - Create a Resource -> Databases -> Azure Database for PostgreSQL
                - Provide - name, subscription, resource group, source, server admin login name, password, confirm password, location, version, pricing tier
        c. Create an Azure Database for PostgreSQL using Azure CLI
            -  as postgres server create ...
        d. Exercise - Create an Azure Database for PostgreSQL via Azure CLI
            - serverName=wingtiptoys-$RANDOM
            - userName=azureuser
            - az postgres server create --name $serverName --resource-group learn-2b48ea79-6cc9-4290-8cc7-e6aac23f199d --location centralus --sku-name B_Gen5_1 --storage-size 20480 --backup-retention 15 --version 10 --admin-user $userName --admin-password "P@ssw0rd"
        e. Server Security Considerations
            - Restricting Access - User Accounts, Virtual Networks, Firewalls
            - Add Firewall using Azure CLI
                - az postgres server firewall-rule create --resource-group learn-2b48ea79-6cc9-4290-8cc7-e6aac23f199d --server <server-name> --name AllowAll --start-ip-address 0.0.0.0 --end-ip-address 255.255.255.255
            - Remove Firewall using Azure CLI
                - az postgres server firewall-rule delete --name AllowAll --resource-group learn-2b48ea79-6cc9-4290-8cc7-e6aac23f199d --server-name <server-name>
            - Connecting to Server - psql
                - psql --host=<server-name>.postgres.database.azure.com --username=<admin-user>@<server-name> --dbname=<database>
        f. Exercise - Connect to Azure Database for PostgreSQL Server
            - Allow Azure Service Access
                - Server Resoure -> Connection Security -> Allow Access to Azure Services
            - Connect to DB with psql
                - psql --host=$serverName.postgres.database.azure.com --username=$userName@$serverName --dbname=postgres
            - Run Commands
                - \l - list all databases, q - to exit
                - CREATE DATABASE "Adventureworks"
                - \c Adventureworks
                - CREATE TABLE PEOPLE(NAME TEXT NOT NULL, AGE INT NOT NULL)
                - INSERT INTO PEOPLE(NAME, AGE) VALUES ('Bob', 35)
                - INSERT INTO PEOPLE(NAME, AGE) VALUES ('Sarah', 28)
                - CREATE TABLE LOCATIONS(CITY TEXT NOT NULL, STATE TEXT NOT NULL)
                - INSERT INTO LOCATIONS(CITY, STATE) VALUES ('New York', 'NY')
                - INSERT INTO LOCATIONS(CITY, STATE) VALUES ('Flint', 'MI')
    
    3. Module 3: Scale Multiple Azure SQL Databases with SQL Elastic Pools
        a. Create a SQL Elastic Pool
            - SQL Elastric Pool - resource allocation service used to scale and manage performance and cost of a group of SQL DBs
            - When? - You have several databases that have low average utilization but infrequent, high utilization spikes
            - How Many? - combined individual DB resources > 1.5 x Capacity of Elastic Pool
                - Two S3 or Fifteen S0
            - Creating
                - Specify SQL server
                - az sql elastic-pools create ...
                - New-AzSqlElasticPool
            - Add Databases
                - az sql db create --elastic-pool-name
                - New-AzSqlDatabase and Set-AzSqlDatabase
        b. Exercise - Create a SQL Elastic Pool
            - Create SQL Servers
                - ADMIN_LOGIN="ServerAdmin"
                - RESOURCE_GROUP=learn-b6d4edca-ff7a-4504-8ec7-2f74803cf246
                - SERVERNAME=FitnessSQLServer-$RANDOM
                - LOCATION=eastus
                - PASSWORD=Password1234@.?*hgasdfhjgfasycvygjsavdeghjsvcytwexSDS
                - az sql server create --name $SERVERNAME --resource-group $RESOURCE_GROUP --location $LOCATION --admin-user $ADMIN_LOGIN --admin-password $PASSWORD
            - Add Databases
                - az sql db create --resource-group $RESOURCE_GROUP --server $SERVERNAME --name FitnessVancouverDB
                - az sql db create --resource-group $RESOURCE_GROUP --server $SERVERNAME --name FitnessParisDB
            - Create Elastic Pool
                - Create a Resource -> SQL Elastic Database Pool -> Create -> Configuration
                - Go to Resource -> Settings: Configure -> Databases -> + Add Databases -> Click Databases -> Apply and Save
        c. Manage SQL Elastic Pools Performance and Cost
            - DTU-Based Pricing Model - database transaction units - basic, standard, and premium
            - vCore-Based Pricing Model - logical CPU offered
            - Review Cost Estimates
        d. Exercise - Manage SQL Elastic Pools
            - Adjust Elastic Pool Settings
                - Go to Resource -> Settings: Configure
            - Adjust Per Database Settings
                - Per Database Settings -> Configure
            - Create a New Database in the Pool
                - Overview - + Create Database -> Configure
    
    4. Module 4: Secure Your Azure SQL Database
        a. Setting Up
            - Create an Azure SQL Database
                - # Set an admin login and password for your database
                    - export ADMINLOGIN='serverAdmin'
                    - export PASSWORD='serverPassword!234'
                - # Set the logical SQL server name. We'll add a random string as it needs to be globally unique.
                    - export SERVERNAME=server12345678910111213
                    - export RESOURCEGROUP=learn-46974354-3416-40f7-be94-095717543d07
                - # Set the location, we'll pull the location from our resource group.
                    - export LOCATION=$(az group show --name $RESOURCEGROUP | jq -r '.location')
                - Create Azure SQL Database Logical Server
                    - az sql server create --name $SERVERNAME --resource-group $RESOURCEGROUP --location $LOCATION --admin-user $ADMINLOGIN --admin-password "$PASSWORD"
                - Create Database
                    - az sql db create --resource-group $RESOURCEGROUP --server $SERVERNAME --name marketplaceDb --sample-name AdventureWorksLT --service-objective Basic
                - Get Connection String
                    - az sql db show-connection-string --client sqlcmd --name marketplaceDb --server $SERVERNAME | jq -r
                    - RESULT: sqlcmd -S tcp:server12345678910111213.database.windows.net,1433 -d marketplaceDb -U serverAdmin -P 'serverPassword!234' -N -l 30
            - Create and Configure a Linux Virtual Machine
                - Create VM
                    - az vm create --resource-group $RESOURCEGROUP --name appServer --image UbuntuLTS --size Standard_DS2_v2 --generate-ssh-keys
                - Connect to VM
                    - ssh
                - Install mssql-tools
                    - echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
                    - echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
                    - source ~/.bashrc
                    - curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
                    - curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
                    - sudo apt-get update
                    - sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
        b. Restrict Network Access
            - Firewall Rules
                - Server-Level - Allow Access tp Azure Web Services, IP Address Rules, Virtual Network Rules
                - Database-Level - IP Address Rules
            - Restricting Access in Practice
                - Use DB Level Firewall Rules in General
                - Use Server Level for Admins
            - Create DB Level
                - EXECUTE sp_set_database_firewall_rule N'My Firewall Rule', '40.112.128.214', '40.112.128.214'
                - EXECUTE sp_set_database_firewall_rule N'Allow appServer database level rule', '13.83.86.128', '13.83.86.128';
            - Create Server Level
                - SQL Server -> Firewalls and Virtual Networks -> Rule Name + Start IP + End IP
                - SQL Server -> Firewalls and Virtual Networks -> + Add Existing Virtual Network -> Configure
        c. Control Who Can Access Database
            - Authentication - Verifying Identity, Authorization - Verifying Access
            - Types 
                - SQL Authentication - username and password
                - Azure Active Directory Authentication - identities managed by Azure Active Directory
            - Create a DB User
                - Connect to Database
                    - sqlcmd -S tcp:server12345678910111213.database.windows.net,1433 -d marketplaceDb -U '[ADMIN]' -P '[PASSWORD]' -N -l 30
                - Create User
                    - CREATE USER ApplicationUser WITH PASSWORD = 'YourStrongPassword1'; GO;
                - Grant Permissions
                    - ALTER ROLE db_datareader ADD MEMBER ApplicationUser;
                    - ALTER ROLE db_datawriter ADD MEMBER ApplicationUser;
                    - GO;
                    - DENY SELECT ON SalesLT.Address TO ApplicationUser;
                    - Go
                - Test
                    - Login as User: sqlcmd -S tcp:server12345678910111213.database.windows.net,1433 -d marketplaceDb -U '[USER]' -P '[PASSWORD]' -N -l 30
        d. Secure Data in Transit, At Rest, and on Display
            - TLS Network Encryption - transit
            - Transparent Data Encryption - encryption and decryption at the page level, read into memory and then encrypted before written to disk
                - Database -> Security: Transparent Data Encryption
            - Dynamic Data Masking - limit data displayed to user
                - column to apply mask, and how the data should be masked
                - Masks - default value, credit card, email, number, custom string
                - Database -> Security: Dynamic Data Masking -> + Add Mask -> Configure
        e. Monitor Your Database
            - DB Auditing
                - Retain an audit trail of selected events
                - Report on database activity
                - Analyze reports
            - Auditing in Practice
                - Enable Server Level
                - Server -> Security: Auditing -> ON -> Storage
            - Advanced Data Security
                - Data Discovery and Classification, Vulnerability Assessment, Advanced Threat Protection
                - Setup and Configuration
                    - SQL Server -> Security: Advanced Data Security -> ON
    
    5. Module 5: Develop and Configure an ASP.NET Application that Queries Azure SQL Database
        a. Create Tables, Bulk Import, and Query Data
            - Create Tables - query editor, sqlcmd, sql server management studio
            - Bulk Import - sql server integration, sql bulk insert statement, bulk copy program (bcp) utility
        b. Exercise - Create Tables, Bulk Import, and Query Data
            - Clone Respository
                - git clone https://github.com/MicrosoftDocs/mslearn-develop-app-that-queries-azure-sql education
                - mv ~/education/data ~/educationdata
                - cd ~/educationdata
                - ls
            - IMPORT Data
                - export DATABASE_NAME=coursedatabase987
                - export DATABASE_SERVER=courseserver987
                - export AZURE_USER=azuresql
                - export AZURE_PASSWORD=Password$1234
                - bcp "$DATABASE_NAME.dbo.courses" format nul -c -f courses.fmt -t, -S "$DATABASE_SERVER.database.windows.net" -U $AZURE_USER -P $AZURE_PASSWORD
                - bcp "$DATABASE_NAME.dbo.courses" in courses.csv -f courses.fmt -S "$DATABASE_SERVER.database.windows.net" -U $AZURE_USER -P $AZURE_PASSWORD -F 2
        c. Connect an ASP.NET Application to Azure SQL Database
            - System.Data.SqlClient Library - types and methods to connect to a SQL Server DB
            