Objectives:
    1. Consistency Models
        - CAP Theorem: You can only have 2 of Consistency, Availability, and Partition Tolerance
            - Consistency - Every read recveives the most recent write or an error
            - Availability - Every request recevieves a (non-error) response - without the guarantees that it contains the most recent write
            - Partition Tolerance - The system continues to operate despite an arbitrary number of messages being dropped or delayed by the network between nodes
        - RDBMS - High Availability and Consistency
        - CouchDB and Cassandra - High Availability and Partition Tolerance
        - MongoDB, HBase, and BigTable - Consistency and Partition Tolerance
        - Levels
            - Strong Consistency - All writes are read immediately by anyone. Everyone sees the same thing. RDMBS. C: Highest, A: Lowest, P: Lowest
            - Bounded Stalenesss - Trades off lag for ensuring reads return the most recent write. C: Consistent to a Bound, A: Low, P: Low
            - Session - Default consistency in CosmosDB. All reads on the same session are consistent. C: Strong for the Session, A: High, P: Moderate
            - Consistent Prefix - Bounded staleness without lag/delay. You will read consistent data, but it may be an older version. C: Low, A: High, P: Low
            - Eventual Consistency - Highest availability and performance, but no guarantee that a read within any specific time, for anyone, sees the latest data. C: Lowest, A: Highest, P: Highest
    2. SQL API Surface - Store, retrieve, and query JSON documents

Important Information:
    1. CosmosDB
        - Multi-modal globally distributed database service
        - Low-Latency, high elasticity, and high availability
        - Types of Data: Table, Cassandra, MongoDO, Graph
    2. Components of Solution
    3. Order of Operations
        - Create Azure CosmosDB Account w/ Type of Database
        - Create a Database
        - Create A Document Collection
        - Upload Documents
        - Get Documents
        - Query Documents
        - Delete Documents
    4. Exam Essentials
        - Consistency Models - "Read reflects the most recent write"
        - SQL API - Storage of JSON and SQL Queries
        - az cosmosdb create -g $resourceGroupName --name $accountName --kind GlobalDocumentDB --locations "West US=0" "North Central US=1" --default-consistency-level Strong --enable-multiple-write-locations true --enable-automatic-failover true
    5. Resources
        - https://docs.microsoft.com/en-us/azure/cosmos-db/consistency-levels
        - https://blog.jeremylikness.com/blog/2018-03-23_getting-behind-the-9ball-cosmosdb-consistency-levels/
        - https://en.wikipedia.org/wiki/CAP_theorem
        - https://docs.microsoft.com/en-us/azure/cosmos-db/sql-query-getting-started