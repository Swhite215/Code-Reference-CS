Discrete Math and Its Applications - Rosen, Kenneth

Chapter 1: The Foundations: Logic and Proofs
    a. Propositional Logic - a proposition is a declarative sentence that is either true or false
        - Sentential Variables - variables that represent propositions just as letters are used to denote numerical variables - p, q, r, s, ....
        - Atomic Propositions - propositions that cannot be expressed in terms of simpler propositons are called atomic propositions
        - Examples
            - Correct Examples
                - The moon is made of green cheese.
                - Trenton is the capital of New Jersey.
                - Toronto is the capital of Canada.
                - 1 + 0 = 1
                - 0 + 0 = 2
            - Incorrect Examples
                - Sit Down!
                - What time is it?
                - x + 1 = 2
                - x + y = z
        -  Propositional Logic
            - Variables - p, q, r, s, ....
            - Proposition that is always true is denoted by T
            - Proposition that is always false is denoted by F
            - Compound Propositions (Operands)
                - Negation (-) - NOT
                - Conjunction ^ - AND
                - Disjunction V - OR
                - Implication -> - IMPLY
                - Biconditional <-> - IF AND ONLY IF
        - Compound Propositions - Connectives - REVIEW
            - DEFINITION: The negation of a proposition p is denoted by -p and has this truth table
                - p     (-p)
                - T       F
                - F       T
            - Example - if p denotes "the earth is round", then -p denotes "the earth is not round"
        - Conjunction - Connectives - REVIEW
            - DEFINITION: The conjunction of propositions p and q is denoted by p ^ q and has this truth table:
                - p     q       p^q
                - T     T        T
                - T     F        F
                - F     T        F
                - F     F        F
            - Example - if p denotes "I am at home", and q denotes "it is raining", then p^q denotes "I am at home and it is raining"
        - Disjunction - Connectives - REVIEW
            - DEFINITION: The disjunction of proposition p and q is denoted p V q and has this truth table
                - p     q       pVq
                - T     T        T
                - T     F        T
                - F     T        T
                - F     F        F
            - Example - if p denotes "I am at home" and q denotes "it is raining" then pVq denotes "I am at home or it is raining" 
        - Connective Or Disjunction - REVIEW
            - DEFINITIONS: The connective or disjunctrion of proposition p and q is denoted by P XOR q and has this truth table
                - p     q       p XOR q
                - T     T       F
                - T     F       T
                - F     T       T
                - F     F       F
        - Implication (IMPORTANT: If q is FALSE, check p, if p is TRUE, the statement is FALSE, else it is true) - REVIEW
            - DEFINITION: the conditional statement p -> q is the proposition "if p, then q." The conditional statement p -> q is false when p is true and q is false, and true otherwise. In the conditional statement p -> q, p is called the hypothesis (or antecedent or premise) and q is called the conclusion (or consequence)
                - p     q       p -> q
                - T     T       T
                - T     F       F
                - F     T       T
                - F     F       T
            - Example
                - if p, then q
                - if p, q
                - p is sufficient for q
                - q if p
                - q when p
                - a necessary condition for p is q
                - q unless -p
                - p implies q
                - p only if q
                - a sufficient condition for q is p
                - q whenever p
                - q is necessary for p
                - q follows from p
                - q provided that p
        - Converse, Contrapositive, and Inverse - REVIEW
            - Converse - q -> p is the CONVERSE of p -> q
            - Contrapositive - -q -> -p is the CONTRAPOSITIVE of p -> q
            - Inverse - -p -> -q is the INVERSE of p -> q
            - Example
                - "The home team wins whenever it is raining"
                    - INVERSE - "The home team loses whenver it is not raining"
                    - CONVERSE - "If it is raining, the home team wins"
                    - CONTRAPOSITIVE - "If it is not raining, then the home team does not win"
            - IMPORTANT - only the contrapositive of a conditional statement is equivalent
        - Biconditionals
            - DEFINITION: let p and q be propositions. The biconditionals statement p <-> q is the proposition "p if and only if q." The biconditional statement p <-> q is true when p and q have the same truth values, and is false otherwise. Biconditional statements are also called bi-implications
                - p     q       p <-> q
                - T     T       T
                - T     F       F
                - F     T       F
                - F     F       T
            - Example
                - p is necessary and sufficient for q
                - if p then q, and conversely
                - p iff q = p exactly when q
            - Example
                - p is You can take the flight
                - q is You buy a ticket
                - You can take the flight if and only if you buy a ticket
            - Example Common Language
                - If you finish dinner, then you can have dessert
                - If you give the presentation, then you can go to dinner
        - Truth Tables of Compound Propositions
            - Example
                - (p V -q) -> (p ^ q)
                - Table
                    - p     q     (-q)      pV-q       p^q       (pV-q) -> (p^q)  
                    - T     T       F         T         T                T
                    - T     F       T         T         F                F
                    - F     T       F         F         F                T
                    - F     F       T         T         F                F
        - Precedence of Logical Operators
            - RULE 1: (-p^q) is the conjunction of -p and q, namely (-p)^q
            - RULE 2: conjunction operator takes precedence over the disjunction operator
                - (pVq^r) means pV(q^r)
                - (p^qVr) means (p^q)Vr
            - RULE 3: conditional and biconditional operators -> and <-> have lower precedence than the conjunction and disjunction operators ^ and V
                - p -> qVr means p -> (qVr)
                - pVq -> r means (pVq) -> r
        - Logical and Bit Operations
            - Bit - symbol with two possible values 0 or 1
            - Bit Operations - correspond to logical connectives
            - Bit String - sequence of zero or more bits. the length of this string is the number of bits in the string
            - Table for Bit Values
                - Truth Value       Bit
                -       T            1
                -       F            0
            - Table for Bit Operators OR, AND, and XOR
                - x     y     xVy     x^y       x XOR Y
                - 0     0      0       0           0
                - 0     1      1       0           1
                - 1     0      1       0           1
                - 1     1      1       1           0
            - Bit String Operations (Think Downwards) - We define the bitwise OR, bitwise AND, and bitwise XOR of two strings of the same length to be the strings that have as their bits the OR, AND, and XOR of the corresponding bits in the two strings respectively
                - 01 1011 0110 - First String
                - 11 0001 1101 - Second String
                ------------------------------
                - 11 1011 1111 - Bitwise OR
                - 01 0001 0100 - Bitwise AND
                - 10 1010 1011 - Bitwise XOR
    b. Propositional Equivalences
        - Introduction
            - Compound Proposition - expression formed from propositional variabels using logical operators such as p^q
            - Tautology - a compound proposition that is always true, no matter what thet truth values of the propositional variables that occur in it
            - Contradiction - a compound proposition that is always false
            - Contingency - a compound proposition that is neither a tautology nor a contradiction
            - Examples of Tautology and Contradiction
                - p     (-p)        (p V -p)    (p ^ -p)
                - T       F            T            F
                - F       T            T            F
                - (p V -p) is a tautology
                - (p ^ -p) is a contradicton
        - Logical Equivalences
            - Logically Equivalent - compound propositions that have the same truth values in all possible cases
            - DEFINITION - the compound propositions p and q are logically equivalent if p <-> q is tautology, the notation/statement p THREE q denotes p and q are logically equivalent
            - De Morgan's Law
                - Important Logical Equivalence -(p^q) is logically equivalent to -pV-q
                - Important Logical Equivalence -(pVq) is logically equivalent to -p^-q
                - Important Logical Equivalence - (-pVq) is logically equivalent to p -> q
            - Truth Table for -(pVq) and -p^-q
                - p     q       (pVq)     -(pVq)      -p      -q      (-p^-q)
                - T     T         T          F         F       F         F
                - T     F         T          F         F       T         F
                - F     T         T          F         T       F         F
                - F     F         F          T         T       T         T
            - Truth Table for Conditional Disjunction Equivalence -pVq and p -> q
                - p     q       -p      (-pVq)      p -> q
                - T     T        F         T           T
                - T     F        F         F           F
                - F     T        T         T           T
                - F     F        T         T           T
            - Truth Table for Logical Equivalence pV(q^r) and (pVq)^(pVr) - Distributive Law of Disjunction over Conjunction
                - p     q       r       q^r     pV(q^r)     pVq     pVr     (pVq)^(pVr)
                - T     T       T        T         T         T       T           T
                - T     T       F        F         T         T       T           T
                - T     F       T        F         T         T       T           T
                - T     F       F        F         T         T       T           T
                - F     T       T        T         T         T       T           T
                - F     T       F        F         F         T       F           F
                - F     F       T        F         F         F       T           F
                - F     F       F        F         F         F       F           F
            - Table of Logical Equivalences
                - Identity Laws
                    - p ^ T is logically equivalent to p
                    - p V F is logically equivalent to p
                - Domination Laws
                    - p V T is logically equivalent to T
                    - p ^ F is logically equivalent to F
                - Idempotent Laws
                    - p V p is logically equivalent to p
                    - p ^ p is logically equivalent to p
                - Double Negation Laws
                    - -(-p) is logically equivalent to p
                - Commutative Laws
                    - p V q is logically equivalent to q V p
                    - p ^ q is logically equivalent to q ^ p
                - Associative Laws
                    - (pVq)Vr is logically equivalent to pV(qVr)
                    - (p^q)^r is logically equivalent to p^(q^r)
                - Distributive Laws
                    - pV(q^r) is logically equivalent to (pVq)^(pVr)
                    - p^(qVr) is logically equivalent to (p^q)V(p^r)
                - De Morgan's Laws
                    - -(p^q) is logically equivalent to -pV-q
                    - -(pVq) is logically equivalent to -p^-q
                - Absorption Laws
                    - pV(p^q) is logically equivalent to p
                    - p^(pVq) is logically equivalent to p
                - pV-p is logically equivalent to T
                - p^-p is logically equivalent to F
            - Logical Equivalences Involving Conditional Statements
                - p -> q is logically equivalent to -pVq
                - p -> q is logically equivalent to -q -> -p
                - pVq is logically equivalent to -p -> q
                - p^q is logically equivalent to -(-p -> -q)
                - -(p ->q) is logically equivalent to p ^ -q
                - (p -> q) ^ (p -> r) is logically equivalent to p -> (q^r)
                - (p -> r) ^ (q -> r) is logically equivalent to (pVq) -> r
                - (p -> q) V (p -> r) is logically equivalent to p -> (qVr)
                - (p -> r)V (q -> r) is logically equivalent to (P^q) -> r
            - Logical Equivalences Involving Biconditional Statemments
                - p <-> q is logically equivalent to (p -> q) ^ (q -> p)
                - p <-> q is logically equivalent to -p <-> -q
                - p <-> q is logically equivalent to (p^q)V(-p^-q)
                - -(p <-> q) is logically equivalent to p <-> -q
        - Satisfiability - satisfiable if there is an assignment of truth values to its variables that makes it true (tautology ALL T or contradiction at least one T)
        - Trick
            - Calculating Rows - 2^(Number of Variables)
                - p and q - four rows
                - p, q, and r - eight rows
                - p, q, r, and v - 16 rows
    c. Predicates and Quantifiers
        -  Predicates
            - Variables - x, y, z
            - Predicates - P(x), M(x)
            - Quantifiers - to be covered in a few slides
            - Examples
                - x is greater than 3 P(x)
                    - x - variable
                    - P() - is greater than 3 is the predicate
                    - P(x) - is also said to be the value of the propositional function P at x
                    - P(x) is a proposition and has a truth value
                - P(x) = x > 3
                    - P(4) truth value is true
                    - P(2) truth value is false
                - A(x) = Computer x is under attack by an intruder
                    - A(CS1) truth value is false
                    - A(CS2) truth value is true
                    - A(MATH1) truth value is true
                - Q(x, y) = x = y + 3
                     - Q(1,2) truth value is false
                     - Q(3,0) truth value is true
                - R(x,y,z) = x + y = z
                    - R(2, -1, 5) truth value is false
                    - R(3, 4, 7) truth value is true
                    - R(x, 3, z) no truth value, not a proposition
            - Domain - denoted by U
        - Compound Expressions
            - P(x) = x > 0
                - P(3) V P(-1) truth value is true 
                - P(3) ^ P(-1) truth value is false
                - P(3) -> P(-1) truth value is false
                - P(3) -> -P(-1) truth value is true
        - Preconditions and Postconditions
            - Preconditions - statements that describe valid input
            - Postconditions - statements that should describe when the program has run
        - Quantifiers
            - Quantification - expresses thge extent to which a predicate is true over a range of elements
                - Words - all, some, many, none, and few
            - Universal Quantifier - predicate is true for every element under consideration
                - Example
                    - P(x) for all values of x in the Domain
                    - ∀xP(x) denotes the universal quantification of P(x)
                    - ∀ is called the universal quantifier
                    - ∀xP(x) is read as for all xP(x) or for ever xP(x)
                    - Counterexample, an element for which P(x) is false
                - Example
                    - ∀xP(x)
                        - If P(x) denotes x>0 and the domain U is integers, then ∀xP(x) is false
                        - If P(x) denotes x>0 and the domain U is positive integers, then ∀xP(x) is true
                        - If P(x) denotes x is even and hte domain U is integers, then ∀xP(x) is false
            - Existential Quantifier - there is one or more element under consideration for which the predicate is true
                - Example
                    - Theere exists an element x in the domain such that P(x)
                    - ƎxP(x) - there is an x such that P(x)
                    - ƎxP(x) - thjere is at least one x such that P(x)
                - Example
                    - ƎxP(x)
                        - If P(x) denotes x>0 and U is the integers, then ƎxP(x) is true
                        - If P(x) denotes x>0 and U is the negative integers, then ƎxP(x) is false
            - The Uniqueness Quantifier - there exists a unique x such that P(x) is true
            - Thinking About Quantifiers
                - Domain = Finite - then loop and evaluate each element in the array
                    - ∀xP(x) - every evaluation needs to be true
                    - ƎxP(x) - at least one evaluation needs to be true
            - Precedence of Quantifiers
                - ƎxP(x) and ∀xP(x) have higher precedence than all logical operators
                - ∀xP(x) V Q(x) is the disjunction of ∀xP(x) and Q(x)
            - Translating from English into Logical Expressions
                - Example
                    - Every student in this class has taken a course in Java
                    - Option 1:
                        - U is all students
                        - x is student in this class
                        - J(x) dentoes a student in this class has taken a course in Java
                    - Option 2:
                        - U is all people
                        - S(x) denoting x is a student in this class
                        - ∀x(S(x) -> J(x)) - if student in this class, then that student has taken a course in Java
                - Example
                    - Some student in this class has visited Mexico
                        - Option 1
                            - U is all students in this class
                            - x is student in this class
                            - M(x) is student has visited Mexico
                            - ƎxM(x)
                        - Option 2
                            - U is all students
                            - x is student in this class
                            - S(x) is if student in the class
                            - M(x) is student has visited Mexico
                            - Ǝx(S(x) ^ M(x))
            - Equivalence in Predicate Logic
                - Statements involving predicates and quantifiers are logically equivalent if and only if they ahve the same truth value no matter which predicats are substituted into these statements and which domain of discourse is used for the variable in these propositional functions
            - Negating Quantified Expressions
                - Negation of Universal - there is a value for which the universal is false
                    - ∀xJ(x) = Every student in your class has taken a course in Java
                    - Negation of ∀xJ(x) is there is at least one student who has not taken Java
                    - Ǝx-J(x) is equivalent to the negation of ∀xJ(x) or -∀xJ(x) is logically equivalent to Ǝx-J(x)
                - Negation of Existential - for all domain, it is always false
                    - ƎxK(x) = there is a student in this class who has taken a course in Java
                    - Negation of ƎxK(x) is there is no student who has taken java
                    - ∀x-K(x) is the equivalent of the negation of ƎxK(x) or -ƎxK(x) is equivalent to ∀x-K(x) 
            - Predicate Calculus - area of logic that deals with predicates and quantifier
    d. Nested Quantifiers
        - Introduction
            - Nested Quantifier - where one quantifier is within the scope of another
        - Understanding Statements Involving Nested Quantifiers
            - Example 1: ∀x∀y(x+y = y+x)
                - Statement - x+y=y+x for all real numbers x and y.
            - Example 2: ∀xƎy(x+y = 0)
                - Statement - for every real number x, there is a real number y such that x + y = 0
            - Example 3: ∀x∀y((x > 0) ^ (y < 0) -> (xy < 0))
                - Statement - for every real number x, and every real number y, if x > 0 and y < 0, then x times y < 0
            - Thinking of Quantification as Loops
                - ∀x∀yP(x,y) - we loop through the values of x, and for each x we loop through the values of y, if we find that for all values of x that P(x,y) is true for all values of y, then ∀x∀yP(x,y) is true
                    - If we ever hit a value of x, for which we hit a value y for which P(x,y) is false, we have shown that ∀x∀yP(x,y) is false
                - ∀xƎyP(x,y) - we loop through the values of x, and for every value of x, there should be a value of y for which P(x,y) is true
                    - If for even one x, there is not a value for y in which P(x,y) is true, then the statement is false
                - Ǝx∀yP(x,y) - we loop through every value of x, and if there is a value of x, for which every value y P(x,y) is true, we have proved this
                    - If we loop through every value of x, and there is no value of x for which every value of y (Px,y) is true, then we have proved Ǝx∀yP(x,y) false
                - ƎxEyP(x,y) - for at least one value of x, there should be at least one value of y in which P(x,y) is true
                    - If there is no x where there is at least one value of y in which P(x,y) is true, then the statement is false
        - Order of Quantifiers
            - Note - order matters only if the quantififers are not all universal or all existential
            - Example
                - P(x,y) is x+y=y+x, ∀x∀y(x+y = y+x) and ∀y∀x(x+y = y+x) are the same
            - Example
                - Q(x,y) is x + y = 0
                    - Ǝy∀xQ(x,y) - there is at least one y that for every value of x, the statement is true - FALSE
                    - ∀xƎyQ(x,y) - for all values of x, there is at least one value of y where Q(x,y) is true - TRUE
        - Translating Mathematical Statements into Statements Involving Nested Quantifiers
            - Statement - the sum of two positive integers is always positive
                - ∀xVyQ( x + y > 0) - only deals with sum, must deal with "positive integers", this could be true if domain is positive integers
                - ∀xVyQ( (x > 0) ^ (y > 0) -> (x + y > 0)) - domain consists of all integers
            - Statement - Every real number except zero has a multiplicative inverse
                - ∀x((x != 0)) -> Ǝy(xy = 1)
        - Translating from Nested Quantifiers to English
            - Statement - ∀x(C(x) v Ǝy(C(y) ^ F(x,y)))
                - C(x) is x has a computer
                - F(x,y) is x and y are friends
                - Every student in the school has a computer, or that person has a friend and that friend has a computer
            - Statement - Ǝx∀x∀z((F(x,y) ^ F(x,z) ^ (y != z)) -> -F(y,z))
                - There is a student in the school where if the student is friends with 1 student and another student, and those two students are not the same, then those two students are not friend with each other
        - Translating English Sentences into Logical Expressions
            - Statement - if a person is female and is a parent, then this person is someone's mother
                - ∀x(F(x) ^ P(x) -> ƎyM(x, y)) - domain is all people
            - Statement - everyone has exactly one best friend
                - ∀xƎy(F(x,y) ^ ∀z(y != z) -> -F(x,z))
            - Statement - there is a woman who has taken a flight on every airline in the world
                - P(w, f) - w has taken f
                - Q(f, a) - f is a flight on a
                - Ǝw∀aƎf(P(q, f) ^ Q(f, a))
    e. Introduction to Proofs
        - Direct Proof - p -> q
        - Informal Proofs - where more than one rule of inference may be used in each step, where steps may be skipped, where the axios being assumed and the rules of inference used are not explicitly state
        - Some Terminology
            - Theorem - statement that can be shown to be true
            - Propositions - Less important theorem
            - Proof - a valid argument that establishes the truth of the theorem
            - Axioms/Postulates - which are statements we assume to be true
            - Lemma - theorem that is helpful in the proof of other results
            - Corollary - a theorem that can be established directly from a therom that has been proved
            - Conjecture - statement that is being proposed to be a true statement, usuually on the basis of some partial evidence, a heuristic argument, or the intuition of an expert
        - Understanding How Theorems Are Stated
            - For all positive real numbers x and y, if x > y, then x^2 > y^2
        - Methods of Proving Theorems
            - Direct, Contraposition, and Contradiction
        - Direct Proof of conditional statement p -> q is constructed when the first step is the assumption that p is true, subsequent steps are constructed using rules of inference
            - FIRST STEP - assume that p is true
            - Example 1 - if n is an odd integer, than n^2 is odd
                - #1 - assume that n is odd
                - #2 - n = 2k + 1
                - #3 - n^2 = (2k + 1)^2 = 4k^2 + 4k +1 = 2(2k^2 + 2k) + 1 - definition of odd integer, we can conclude that n^2 is an odd integer i.e. it is one more than twice an integer
            - Example 2 -  if m and n are both perfect squares, then nm is also a perfect square
                - #1 - assume that m and n are perfet squares
                - #2 - m = s^2 and n = t^2
                - #3 - mn = s^2t^2
                - #4 - mn = sstt
                - #5 - mn - stst
                - #6 - mn = (st)^2 - perfect square because st is an integer
        - Proof by Contraposition - is valid BECAUSE p -> q is logically equivalent to -q -> -p
            - FIRST STEP -  assume that the conclusion of the conditional statement is false
            - Example 3 - Prove that if n is an integer and 3n+2 is odd, then n is odd
                - #1 - assume n is even i.e. not odd
                - #2 - n = 2k
                - #3 - 3(2k)+2 = 6k+2 = 2(3k+1)
                - #4 - 3n+2 is even, and therefore not odd
        - Vacuous and Trivial Proofs
            - Vacuous - situation with p -> q, if we can show p to be false, then p -> q must be true
            - Trivial - situation with p -> q, if we can show q to be true, then p -> q must be true
        - A Little Proof Strategy - form ∀x(P(x) -> Q(x))
            - #1 - evaluate whether direct proof looks promising
                - Begin by expanding definition of hypotheses
                - Start to reason using these hypotheses, together with axios and available theorems
                - If nothing, try contraposition
            - Definition - real number r is rational if there exists p and q with q != 0 such that r = p/q. A real number that is not rational is called irrational
        - Proofs by Contradiction
            - Goal - prove that -p -> r ^ -r is true, r ^-r is always false i.e. contradiction, so the statement must be true when -p is false i.e. p is true
        - Proofs of Equivalence
            - Prove p <-> q, we show that p -> q and q -> p are both true, based on p <-> q <-> (p -> q) ^ (q -> p)
        - Cyclical
            - Prove p1 -> p2, p2 -> p3, p3 -> 4
        - Counter Examples
            - Show statement of the form ∀xP(x) is false, we need only find a counterexample
            - Example - show that "Every positive integer is the sum of the two squares of two integers" is false
        - Mistakes in Proofs - arithmetic and algebra
    f. Proof Methods and Strategy
        - Exhaustive Proof and Proof by Cases
            - Exhaustive (p1 V p2 V ... pN) -> q
        - Proof by Cases - cover all possible cases that arise in a theorem
            - Example - Prove that if n is an integer, then n^2 > or equal to n
    APPENDIX. Chapter Review - Extra Examples on Rosen Site
        - 01.01
        - 01.02 - SKIPPED (RETURN TO TRANSLATION)
        - 01.03
        - 01.04
        - 0.105
        - 01.06
        - 01.07
        - 01.08
        