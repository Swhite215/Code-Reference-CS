Computer Networking CIS 527 

1. 08/31/2022 - Lecture Notes
    - Topics
        - Principles and Concepts
        - General Purpose Computer Networks
            - Other Networks - Television, Telephone (4G)
            - UM Dearborn - Cisco IP Phones, Future - Zoom Telephone Network
        - Internet Perspective
        - Network Software
        - Designing and Building a System - 10^9
            - Linear complexity is inadequate
            - Target complexity is O(logn) - Target
            - Achieving complexity requires hierarchical structures
            - Network - Tree - Depth is O(logn)
        - Satellite Networking - StarLink - SpaceX - Optical Fiber - Capacity Limited
    - History
        - Packet Switching 1961-1972
        - Proprietary Networks and Internetworking 1072-1980
        - Proliferation 1980-1990
        - Internet Explosion - 1990s
        - New Millenium
    - Building Blocks
        - Nodes - PC, Special Purpose Hardware
            - Edge Hosts (Cellphones, Laptop, Desktop, Server)
            - Switches/Routers - Optimized for Input and Output - Programmed
                - Historical - devices were not programmable, relying on 3rd party software e.g. Cisco
                - Current - Software Defined Networking - SDN
        - Links
            - Type - coaxial cables, optical fibers, wireless
            - Network Topologies
                - Point to Point (Direct Link)
                - Mesh
                - Hybrid
                - Multiple Access
                - Star
                - Fiber Optics
                - Terrestial Radio Channels - requires conversion to frequency
                - Satellite Radio Channels - requires conversion to frequency
            - Technique for Quality - Automatic Repeat Request
            - Issues
                 - Collision between hosts sending data on the same bus
                 - Solution - regulating access to the media i.e media access controls
            - Switched Networks
                - Definition - two or more nodes connected by a link
                - Definition - two or more networks connected by a node e.g. a gateway node
                - Types - Radio, DoD, Commercial, Incompatible
                    - Differences - packet formats
                - Routers - designed to connect different networks together
                - Issue
                    - How do we uniquely identify each node? 
                        - Internet Protocol Address - Globally Unique - Configurable - XXX.XXX.XXX.XXX
                        - Routers
                            - IP Addresses for Each Port, Relatively Consistent
                        - Dynamic Host Configuration Protocol - Local IP Address
                        - Media Access Control Address - Network Card
                    - How do we communicate?
                        - Networks must use standard protocol - IPv4 and IPv6
            - Addressing and Routing
                - Address - byte string that identifies a node, usually unique
                    - MAC 48 bits - 2.8147498e+14
                    - IPV4 32 Bits - 4294967296
                    - IpV6 128 Bits - 3.4028237e+38
                - Types of Addresses
                    - Uncast - node specific
                    - Broadcast - all nodes on the network, limited to "local" network
                    - Multicast - some subset of nodes on the network, can be anywhere on the internet
                        - Limited - relatively hard to implement, requires designing a tree, incorporating many networks, multiple sends
                - Routing
                    - What - process of forwarding mesages to the destination mode based on its address
                    - Issue - maintaining records of routers, we must be able to aggregate
            - Strategies
                - Circuit Switching - carry bit streams, reservation based
                    - Original telephone network - need to share the same link
                    - Time Divison Multiplexing - switch between L1, L2, L3 using configured time slots
                        - Issue - time slots are wasted if host has nothing to share
                        - How do you determine period of time slot?
                            - Depends on the need of the application i.e. the data rate
                        - Issue - requires entire set of links and circuits to be set up
                    - Frequency-Divison Multiplexing - any data can be sent over any frequency using signal encoding
                    - Telephone - makes sense because connection is persistent, take samples per second one byte
                - Packet Switching - Statistical Multiplexing
                    - On-Demand Time Division
                    - Schedule the link on a per packet basis, more effectively uses the link
                    - Packets from different sources are interleaved on link
                    - Buffer packets that are contending for the link
                    - Issue - congestion at the link, incoming rate is larger than link buffer i.e buffer congestion
                        - We need to provide feedback to source nodes to alter their rate of packet submissions
                    - Statistical Multiplexing
                    - Technique - Store and Forward
                        - Forward - Table Lookup using the destination address
                    - Fault Tolerance
                        - If link has failed, network can adapt to changing circumstances to still deliver packet to target destination
                - Data
                     - Header and Data
                        - Header - Source Address, Destination Address (CONSTANT)
                    - To make it worth using packet switching, your data should be large enough to not be dominated by the header
    - Performance Metrics
        - Bandwidth - data transmitted per unit time
            - How quickly data can be inserted into the network
            - Bit Width - how long it takes to transmit each bit of data
                - E.g. 10Mbs (10 million bits per second), it takes 0.1 microseconds to transmit each bit
            - Notation (speed of the clock) - BITS PER SECOND*
                - 1Kbps - 10^3
                - 1Mbs - 10^5
                - 1B = 8bits
            - Transmit (Insert Time)
                - Transmit Time = Size / Bandwidth
        - Latency (Delay) - time it takes a packet to travel from one end of a network to the other
            - One Way
            - Round Trip Time (RTT)
            - Propogation Delay - Distance / speed of light (3.0x10^8 meters/second COAX or 2.0x10^8 meters/second OPTICAL or 2.3*10^8 Copper)
            - Total Time Required to Transfer ( End to End Delay )
                - Transfer Time = Transmit Time + Latency
            - Latency Delay in Packet Switched Networks
                - Nodal Processing - check bit errors
                - Queueing - time waiting at output link for transmission
                - Retransmission
                - Propogation
        - Bandwidth vs. Latency
            - 1-byte: 1ms vs 100 ms dominates 1Mbs vs 100 Mbps
        - Calculation of Transfer Time
            - 1. Convert Size from Bytes to bits
            - 2. Divide bits Binary bandwidth to determine transmit time
            - 2.5. DETERMINE LATENCY*
            - 3. Add transfer time + latency to determine total transfer time
        - Infinite Bandwidth
            - RTT Dominates
                - Effective Throughput - TransferSize / TransferTime
                - TransferTime = (RTT + 1) / (Bandwidth x Transfer Size)
        - Typical Internet Packet Size - 1Kilobyte
        - Reducing to single bit, you recreate circuit switching, constant stream of bits
    - Questions
        - Satellite Networks
        - Web2 and Web3 Application Layers
            - Web2 - Google, Facebook
            - Web3 - Individuals
        - Blockchain/IPFS - Crytocurrency

2. 09/07/2022 - Lecture Notes
    - Bandwidth vs. Latency
        - Round Trip Dominates
            - Effective Throughput = TransferSize/TransferTime
            - Transfer Time - RTT + 1/ Bandwidth + ????
    - Latency (Delay) - how long it takes a packet to travel from onoe of a network to the other
        - Propogation Delay
        - Lateny Delay in a Packet Switched Network
            - Nodal Processing - determine output link and check bit errors (fixed)
            - Queuing - time waiting at output link for transmission, depends on congestion level (dynamic)
            - Retransmission - placing packet on link (fixed)
            - Propogation - movement of packet from source to destination router, depends on distance (fixed)
    - Queuing
        - Packet size will vary, packet arrival rate will vary
        - Lambda - packets per second queued
        - Mu - packets processed
        - # of packets in system = p / 1 - p
        - Distribution - Poison
        - Address - Reduce Load or Increase Capacities
    - Performance Metric
        - Delay Time Bandwidth - Amount of data in flight or in the pipe
            - Example = (Latency) 100ms x  (Bandwidth) 45Mbps = 560KB
            - How much before first bit arrives - delay time
            - Goal - keep the pipe full
        - Round Trip Time x Bandwidth - amount of data before you get a response
            - Transfer this amount of data before looking for a response
        - Bandwidth Requirements - constant rate, burst, and peak rate
            - Voice over IP - Constant Rate, Video Conference - Burst and Peak
            - Adaptive (Elastic) Bandwidth is ideal in many situations, but not all
            - Jitter - Variance in latency e.g. inter packet gaps
    - Video Applications
        - Video - sequence of frames
            - Frame Size - (352x240 x 24 bits per pixel) = 2027520 bits = 2Mb
            - 30 FPS (frame per second) - 30fps x 2MB/frame = 60Mbps needs to be transmitted, required bandwidth
            - We must compress to reduce the required bandwidth
            - Compression
                - remove redundancy, transmit differences in frame beginning from base frame to derive next frame
                - reduce what of each frame is resent, if there is duplicate values
        - After compression
            - Average Rate = 2Mbps
            - Peak Rate = 3Mbps
        - Decompression - GPU card can perform the task optimally
        - Addressing Jitter
            - Buffer - wait at beginning, and then play out at the target rate
            - Buffer Issue - repeat buffering - caused by not enough bandwidth - bandwidth provided by network is lower than neeeded by application
            - Youtube - adaptive playout - must reduce application need to align with network rate, store multiple versions in different encodings/resolutions for different rates, automatically switch between resolutions
    - Inter-Process Communication
        - Turn host to host connectivity into process to process communication
        - Fill gap between what applications expect and what the underlying technology provides
        - IPC Abstractions - Transport Layer
            - Request/Reply - distributed file systems, digital libraries e.g. web
            - Stream-Based - video applications, on-demand video, video conferencing - ideal latency <300ms <150ms for humans
    - Possible Errors and Failures
        - Bit-level errors (electrical inference) - bit flips from 0-1 or 1-0
            - Number of bits is dependent on the clock speed
            - Fiber - 1 / 10^12 - 10^4 - rare
            - Cat - 1 / 10^7
            - Wireless
        - Packet-level errors (congestion)
            - Messages are delayed
            - Message arrive out of order - packets can take different paths - add sequence number at transport layer to determine packet arrival sequence
            - Third parties eavesdrop - cannot trust the network - add end to end encryption - application data is encrypted
        - Link and Node Failures
            - Physically cut link
            - Router can fail or need to be rebooted

    - Socket Interfaces
        - What are sockets?
            - Endpoint of communcation to which a name can be bound
            - Provides access to transport protocols (TCP or UDP)
            - Designed to implement the client server model for interprocess communication 
                - 1. Server must be listening for client requests
                - 2. Client connects to server
                - 3. Client makes request to server.
                - 4. Server responds to request
        - Purpose - Transport layer interface to facilitate connection
        - Socket Domain
            - Unix domain sockets are named with UNIX paths, enable communiation of processes on a single host
            - Internet domain communication uses the TCP/IP suite, between processes on different hosts
        - Types
            - Stream - enables processe to communicate using TCP (SOCK_STREAM)
                - Guaranteed reliable in order delivery packet service (SOCK_DGRAM)
            - Datagram - enables processses to communicate using UDP (SOCK_RAW)
            - Raw Sockets - bypass transport layers
        - Libraries
            - libsocket.so - linux
            - libsocket.a - static linking library
            - Compile and Link
                - Linux - g++ main.c -o main
                - SunOS - g++ main.c -o main -lsocket -lnsl
        - Interprocess Communication
            - Issues
                - Creating sockets, naming sockets, sending/receiving data over socks
            - Mechanism
                - UNIX system calls and library routines
                    - if (code = syscall() < 0) { perror("syscall"); exit(1);}
                    - Success - >= 0, Failure = -1
        - Socket Creation
            - s = socket(domain, type, protocol)
                - domain - AF_INET, AF_UNIX
                - type - SOCK_STREAM, SOCK_DGRAM, SOCK_RAW
                - protocol - 0
                - s = socker(AF_INET, SOCK_STREAM, 0) (0 = default protocol tcp) - returns a socket number (file descriptor)
                - file descriptor indexed to open file tables, stdin 0, stdout 1, stderr 2, others 3+, defined networks
        - Naming Sockets
            - int bind(s, name, namelen) - bind socket to some address
                - name - Socket Address STRUCT - sockaddr_in is a C structure
                    - sin_family - internet domain (AF_INET, AF_UNIX)
                    - sin_addr - (141.215.10.30) - typically 0.0.0.0
                    - sin_port - 6666 - 0-65535
            - Internet Address and Ports
                - sin_addr values
                    - four bytes - 141.216.69.204 - using sbin/ifconfig
                    - if you specify INADDR_ANY for local host address, all host address apply
                - sin_port values
                    - 0-1024 reserved for system
                    - well known ports are important
                        - http is port 80
                        - telnet is port 23
            - Understanding Ports
                - Packet - Port and Data - determines application to direct to
        - Client Server Model
            - Connections - Tuples - Server Port, Server IP, Client Port, Client IP
        - Project Number One
            - Single Client and Single Server
        - Project Number Two
            - Multiple Clients and Single Server
            - Issues
                - System calls or blockcing, unable to handle data from two clients simultaneously, and you dont know when data will arrive
        - Data Transfer
            - Send - will return 0 to indicate connection has closed, after data has been receieved
                - write(s, buf, siezeof buf)
                - send(s, buf, sizeof buf, flags)
                    - s - socket
                    - buf - data to send
                    - sizeof - bytes of buffer
                    - flags - 0
            - Receieve - will return whatever is in the buffer, partial or full, will return number of bytes receieved
                - read(s, buf, sizeof buf)
                - recev(s, buf, sizeof buf, flags)
                    - s - socket
                    - buf - where to store data
                    - sizeof - bytes of buffer
                    - flags - 0
        - Other System Calls
            - int connect(s, name, namelen) - specifies peer with which sd is to be associated - name (Server IP Address and Port Number) - CLIENT
            - int listen(s, backlog) - specifics maximum backlog of connections a server will allow - SERVER
            - int accept(s, addr, addrlen) - extracts first connection off queue of pending connections - BLOCKS - SERVER
            - int close(s) - deletes descriptor from system tables
        - Connection Orriented Communication Using Stream Socket - Review Diagram - Bidirectional
            - SETUP
                - Server - socket(), bind(), listen()
                - Client - socket(), connect(server IP address and port number)
                - Server - accept()
            - COMMUNICATION
                - Server - send(), recv()
                - Client - send(), recv()
            - CLOSING
                - Server - close()
                - Client - close()
        - Code
            - Copy and Paste to Machine
            - run ```make```
            - run ./server
            - run ./client [ip] with server IP (127.0.0.1) loopback
        - Socket Programming with TCP
             - TCP - provides reliable, in order transfer of bytes between client and server, repeats until confirmation
             - Procedure
                - Client must contact running server with socket
                - Clietn creates local socket, specifies IP address and port of process
                - When contacted by client, server creates a new socket for server process to communicate with specific client
        - Synchronous I/O Multiplexing - select()
            - select() - gives you the power to monitor several sockets at the same time
        - Additional Methods
            - htonl() - long integers
            - htons() - convert between host byte order and network byte order - host to network
            - ntohl() - long integers
            - ntohs - convert between network byte order and host byte order - network to host
        - Programming Assignment #1
            - Notes on Setup
                - FIND Instructions for Accessing Secure Server.....
                - Update client.c and server.c SERVER_PORT constant
                - Integers - some use endian and some use big endian
                    - Strategy - convert host format to network format
                - new_s is client dependent socket
                - Changes - update in server loop where receiving message to add desired functionality
            - Notes on Assignment
                - Must init address book with file on disk
                - To write file, must be done either on delete, client quit, or server quit
                - Issue - LIST
                    - Server sends multiple messages, how do we match client receiving all these messages
                - Issue - TCP Byte Stream
                    - "200 OK\n" + "1001 Test User \m" results in concatenated message
                    - Client must deal with this. If client calls recv(), and server is done sending, now you are blocked
                    - Solution - concatenate entire message, send one message, single receieve, parse
                - Shutdown - optionally terminate client
                - Quit - terminate client
                - Files
                    - Make, Server.c, Client.c, README, Address Text File
                - Submission
                    - Create tar of project file

3. 09/14/2022 - Continuing Introductions
    - Layering
        - Objectives - Use abstractions to hide complexity
        - Abstrations naturally lead to layering
        - Example Layering
            - Appliation Programs - HTTP, SMTP, etc.
            - Process to Process Channels - Coordinate Between Processes - Client, Server, Peer-to-Peer
                - Request/Reply Channel
                - Message Stream Channel
            - Host to Host Connectivity - Exchange Packets
            - Hardware - Exchange Bits
    - Protocols
        - Building blocks of a network architecture
        - Implementation at each abstraction layer
        - Interfaces
            - Service Interface - operations on this protocol
            - Peer-to-Peer - how protocols connect peers, what is frame, what makes up packet bit significance and orde 
        - Example - Transmission Control Protocol - TCP
            - Host Service Interface - Socket
        - Example - File Transfer Protocol - FTP
            - Specification - actual FTP program e.g. FileZilla
            - Module - API to participate in FTP
        - Protocol Graph
            - Collection of protocols and their dependencies
            - Most peer-to-peer communication is indirect
        - How many layers do we need?
            - Solution - a standard
    - Multiplexing and Demultiplexing
        - Goal - deliver packets to correct process
        - Encapsulation is needed to process the message at each level of the protocol graph
        - Demultiplexing - deliver packet to which host, application, etc.
        - Multiplexing
    - Encapsulation
        - Building layers of control information around the message
    - Standard Architectures
        - Open Systems Interconection OSI
            - Groups
                - International Standards Organization
                - International Telecommunication Union ITU
                - Series - X.25, X.400, X.500
            - Reference Architecture
                - Application
                    - 
                - Presentation
                    - Not in internet architecture
                    - Integer representation e.g. big or little endian
                    - File formatting
                - Session
                    - Not in internet architecture, normally implemeted at application level for internet
                    - Dealing with multiple streams of data e.g. multiple cameras, audio devices, and closed captioning in a room that should be synced
                - Transport
                    - Process to process communiation - interprocess communiation IPC
                - Network
                    - Datagram - how to route packet from source to destination, multiple links will be used
                - Data Link
                    - Transfer frames directly between hosts, links, or switches
                - Physical
                    - Transfer sequence of bits
                    - Key action -  how to encode binary data to signals
                    - Key action - what types of cables
        - The Internet Architecture
            - Group
                - Internet Engineering Task Force
            - Application
                - FTP, HTTP, NV
            - Transport Layers
                - TCP and UDP
            - IP
                - Internet Protocol - IPv4 and IPv6
                - Current Research - trouble with media/video conferenceing in order to achieve Quality of Service requirements
                - Guarantee - best effort service
            - Network
                - Data Link + Physical
            - Features
                - Implement as you go - Request for Comments RFCs
                - RFCs defined by Internet Engineering Task Force
        - Source to Destination Big Picture
            - Source Encapsulation
                - Application - M
                - Transport - Header + M
                - Network - Port Addresses + Header + M
                - Link - Link Address + Port Addresses + Header + M
            - Link Analysis
                - Decapsulate and Evaluate Network to Determine Next Link
            - Destination
                - Decapsulate and Demultiplex to deliver message to application
            - Additional Levels
                - Firewall - needs to evaluate up to application layer
        - Internet Structure - Network of Networks
            - Roughly Hierarchical
            - Center - Tier-1 ISPs - ~12
                - Tier-1 ISPs carry each others traffic for free
            - Tier-2 ISPs
                - Regional coverage, connecting to one or more Tier-1 ISPs or other Tier-2 ISPs
                - Must pay for receipt or sending from Tier-1 ISPs, encourages peering
                - Payment is based on volume
            - Tier-3 ISPs
                - Last hop acceess network closest to end systems
            - Some companies cover multiple Tiers e.g. AT&T
            - Idea - fixed shared value amongst Tiers, given they are providing infrastructure
        - Internet Content
            - Content Delivery Networks - Google, Amazon, Cloudflare - largely monopolies
        - Internet History
            - 1961 - 1972 - Early Packet Switching Principles
                - 1961 - queuing theory with packet switching - Kleinrock
                - 1964 - Baran - packet switching in military nets - Baran
                    - Fault tolerant network to survive nuclear holocaust i.e. rich connectivities
                    - Baran shows network can operate wth 60% link failures 
                - 1967 - ARPAnet conceived by Advanced Research Projects Agency
                - 1969 - First ARPAnet node operational - four nodes (UCLA, Stanford Research Institute, University of Utah)
                - 1972 - ARPAnet demonstrated publicly - fifteen nodes
                    - NCP - Network Control Protocol
            - 1972 - 1980 - Internetworking, New and Proprietary Uses
                - 1970 - ALOHAnet
                - 1973 - Metcalfe's PhD Thesis - Ethernet
                - 1974 - Cerf and Kahn - Architecture for Interconnecting Networks - Inventors
                    - Minimalism, Autonomy, Best Effort Service Model, Stateless Routers, Decentralized Control
                - Late 70's - Proprietary Architectures
                - Late 70's - Switching Fixed Length Packets
                - 1979 - ARPAnet has 200 nodes
            - 1980's
                - Supercomputing
            - 1990 - 2000's
                - 1990's ARPAnet decommissioned
                    - Transfer control of internet from government to private companies
                - 1991 - NSFnet - connect Supercomputing, Universities, and Research Laboratories
                - Early 1990's - World Wide Web
                    - Hypertext
                    - HTML, HTTP - Tim Berners-Lee
                    - 1994 Mosaic, Later Netscape - Graphic Web Browsers
                - Late 1990s-2000s
                    - More Applications - instant messaging, P2P file sharing
                    - Network Security
                    - 50m hosts, 100m users
                    - Backbones 1Gbps
            - Web 2.0 - User generated content enabled by platforms
            - Web 3.0 - User centered control of data

4. 09/14/2022 - Direct Link Networks
    - Classes of Links
        - Buidling Blocks
            - Nodes/Hosts and Switches
            - Link 
                - Guided coaxial, fiber optic, twisted pair
                    - Twisted Pair - CAT 3, CAT 5 - twisted to cancel interference, signal is voltage different between two wires, four pairs
                        - Normal - One pair computer to switch, one pair switch to computer
                        - Gigabit - Use multiple pairs to deliver that speed
                    - Coaxial Cable - signal is electric
                        - Copper Core, Insulating Material, Braided Outer Conductor, Protective Plastic Covering
                    - Optical Fiber Cables - signal is light
                        - Core Glass, Cladding Glass, Jacket Plastic
                        - Propogation using reflection/refraction, transmit multiple values - multi mode
                        - Propogation using a straight line - single mode
                        - Issues - less flexible and more fragile
                        - Speed of Fiber - limited by how fast we can convert electrical signal to optical
                        - Design - optic ring with active repeaters
                - Unguided - radio (low), microwaves (wifi, cellular, bluetooth, satellite), infrared (high), lasers (high)
                - Properties of a Link
                    - Frequency
                        - Fiber Optic Fast - using high frequencies
                    - Encoding
                        - Lower Layers - modulation (change frequency, voltage, and phase) - transmit 8 bits, one byte
                        - Upper Layers - high and low signals - transmit single bit
                    - Multiple Access Links
                    - Point to Point Links
                        - Full-Duplex - two directions, same time
                        - Half-Duplex - two directions, one at a time
                - Bandwidth and Capacity
                    - Bandwidth - width of the frequency range of signal or transmission e.g. human voice 100-3300 Hz, BW is 3200
                    - Capacity - rate in bits per second
                        - Baud Rate - how many symbols per second
                        - Bit Rate - number of bits /symbol * baud rate
                        - How to determine number of bits per symbol?
                            - log2(number of symbols)
                        - Example - 8 voltage outputs - 2^3 = 8, so 3 bits can be carried
                - Shannon's Theorem
                    - Maximum bit rate for noisy channel
                    - C = BW * log2(1 + S/N)
                        - S = strength of signal - decibels
                        - N = strength of noise - decibels
                        - S/N = 1000, 10log10(1000) = 30 decibels
                    - Always a base noise when transporting, your signal should be stronger than the noise
                    - Maximum Speed thru Telephone Line
                        - BW = 3200HZ
                        - S/N = 1000
                        - C = 3200 * log2(1 + 1000) = 31,890 bps - Dial Up
                    - Modern Dial Up - 56kbps
                        - To improve, must change (increase or decrease?) signal to noise ratio, e.g. small distance or high quality lines
                    - Asymmetric Digital Subscriber Line - 16Kbps - 8.448 Mbps
                        - Multiple MB per second
                        - Bandwidth improvement results in increases
                        - Asymmetric - Download and Upload link speed are different
                        - 1Mhz - 256 channels
                            - Most channel downlink
                            - Fewer channel uplink
                    - V (Very High Data Rate) Digital Subscriber Line - 12.96-55.2 Mbps
                        - High Frequency, Short Distance (Decent Signal to Noise Ratio)
                        - Distance from home to neighbor unit, no more than 4500 feet, neighbor unit connected to office with optical fibers
                        - U-Verse AT&T - Cable, Internet, and Telephone
                        - Telephone line is dedicated, not shared with anyone else
                - Internet over Cable
    - Five Issues
        - Encoding - how to encode binary data to signals involving voltages, frequencies, etc.
        - Framing - how to identify beginning and end of a frame/packet
        - Error Detection - how to identify flipped bit/frame errors
        - Reliable Delivery - how to ensure reliable deliveries (automatic repeat)
        - Access Mediation - media access controls, how to regulate access to maximize throughput and minimize interference between hosts