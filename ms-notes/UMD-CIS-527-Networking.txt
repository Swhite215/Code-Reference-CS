Computer Networking CIS 527 

1. 08/31/2022 - Lecture Notes
    - Topics
        - Principles and Concepts
        - General Purpose Computer Networks
            - Other Networks - Television, Telephone (4G)
            - UM Dearborn - Cisco IP Phones, Future - Zoom Telephone Network
        - Internet Perspective
        - Network Software
        - Designing and Building a System - 10^9
            - Linear complexity is inadequate
            - Target complexity is O(logn) - Target
            - Achieving complexity requires hierarchical structures
            - Network - Tree - Depth is O(logn)
        - Satellite Networking - StarLink - SpaceX - Optical Fiber - Capacity Limited
    - History
        - Packet Switching 1961-1972
        - Proprietary Networks and Internetworking 1072-1980
        - Proliferation 1980-1990
        - Internet Explosion - 1990s
        - New Millenium
    - Building Blocks
        - Nodes - PC, Special Purpose Hardware
            - Edge Hosts (Cellphones, Laptop, Desktop, Server)
            - Switches/Routers - Optimized for Input and Output - Programmed
                - Historical - devices were not programmable, relying on 3rd party software e.g. Cisco
                - Current - Software Defined Networking - SDN
        - Links
            - Type - coaxial cables, optical fibers, wireless
            - Network Topologies
                - Point to Point (Direct Link)
                - Mesh
                - Hybrid
                - Multiple Access
                - Star
                - Fiber Optics
                - Terrestial Radio Channels - requires conversion to frequency
                - Satellite Radio Channels - requires conversion to frequency
            - Technique for Quality - Automatic Repeat Request
            - Issues
                 - Collision between hosts sending data on the same bus
                 - Solution - regulating access to the media i.e media access controls
            - Switched Networks
                - Definition - two or more nodes connected by a link
                - Definition - two or more networks connected by a node e.g. a gateway node
                - Types - Radio, DoD, Commercial, Incompatible
                    - Differences - packet formats
                - Routers - designed to connect different networks together
                - Issue
                    - How do we uniquely identify each node? 
                        - Internet Protocol Address - Globally Unique - Configurable - XXX.XXX.XXX.XXX
                        - Routers
                            - IP Addresses for Each Port, Relatively Consistent
                        - Dynamic Host Configuration Protocol - Local IP Address
                        - Media Access Control Address - Network Card
                    - How do we communicate?
                        - Networks must use standard protocol - IPv4 and IPv6
            - Addressing and Routing
                - Address - byte string that identifies a node, usually unique
                    - MAC 48 bits - 2.8147498e+14
                    - IPV4 32 Bits - 4294967296
                    - IpV6 128 Bits - 3.4028237e+38
                - Types of Addresses
                    - Uncast - node specific
                    - Broadcast - all nodes on the network, limited to "local" network
                    - Multicast - some subset of nodes on the network, can be anywhere on the internet
                        - Limited - relatively hard to implement, requires designing a tree, incorporating many networks, multiple sends
                - Routing
                    - What - process of forwarding mesages to the destination mode based on its address
                    - Issue - maintaining records of routers, we must be able to aggregate
            - Strategies
                - Circuit Switching - carry bit streams, reservation based
                    - Original telephone network - need to share the same link
                    - Time Divison Multiplexing - switch between L1, L2, L3 using configured time slots
                        - Issue - time slots are wasted if host has nothing to share
                        - How do you determine period of time slot?
                            - Depends on the need of the application i.e. the data rate
                        - Issue - requires entire set of links and circuits to be set up
                    - Frequency-Divison Multiplexing - any data can be sent over any frequency using signal encoding
                    - Telephone - makes sense because connection is persistent, take samples per second one byte
                - Packet Switching - Statistical Multiplexing
                    - On-Demand Time Division
                    - Schedule the link on a per packet basis, more effectively uses the link
                    - Packets from different sources are interleaved on link
                    - Buffer packets that are contending for the link
                    - Issue - congestion at the link, incoming rate is larger than link buffer i.e buffer congestion
                        - We need to provide feedback to source nodes to alter their rate of packet submissions
                    - Statistical Multiplexing
                    - Technique - Store and Forward
                        - Forward - Table Lookup using the destination address
                    - Fault Tolerance
                        - If link has failed, network can adapt to changing circumstances to still deliver packet to target destination
                - Data
                     - Header and Data
                        - Header - Source Address, Destination Address (CONSTANT)
                    - To make it worth using packet switching, your data should be large enough to not be dominated by the header
    - Performance Metrics
        - Bandwidth - data transmitted per unit time
            - How quickly data can be inserted into the network
            - Bit Width - how long it takes to transmit each bit of data
                - E.g. 10Mbs (10 million bits per second), it takes 0.1 microseconds to transmit each bit
            - Notation (speed of the clock) - BITS PER SECOND*
                - 1Kbps - 10^3
                - 1Mbs - 10^5
                - 1B = 8bits
            - Transmit (Insert Time)
                - Transmit Time = Size / Bandwidth
        - Latency (Delay) - time it takes a packet to travel from one end of a network to the other
            - One Way
            - Round Trip Time (RTT)
            - Propogation Delay - Distance / speed of light (3.0x10^8 meters/second COAX or 2.0x10^8 meters/second OPTICAL or 2.3*10^8 Copper)
            - Total Time Required to Transfer ( End to End Delay )
                - Transfer Time = Transmit Time + Latency
            - Latency Delay in Packet Switched Networks
                - Nodal Processing - check bit errors
                - Queueing - time waiting at output link for transmission
                - Retransmission
                - Propogation
        - Bandwidth vs. Latency
            - 1-byte: 1ms vs 100 ms dominates 1Mbs vs 100 Mbps
        - Calculation of Transfer Time
            - 1. Convert Size from Bytes to bits
            - 2. Divide bits Binary bandwidth to determine transmit time
            - 2.5. DETERMINE LATENCY*
            - 3. Add transfer time + latency to determine total transfer time
        - Infinite Bandwidth
            - RTT Dominates
                - Effective Throughput - TransferSize / TransferTime
                - TransferTime = (RTT + 1) / (Bandwidth x Transfer Size)
        - Typical Internet Packet Size - 1Kilobyte
        - Reducing to single bit, you recreate circuit switching, constant stream of bits
    - Questions
        - Satellite Networks
        - Web2 and Web3 Application Layers
            - Web2 - Google, Facebook
            - Web3 - Individuals
        - Blockchain/IPFS - Crytocurrency

2. 09/07/2022 - Lecture Notes
    - Bandwidth vs. Latency
        - Round Trip Dominates
            - Effective Throughput = TransferSize/TransferTime
            - Transfer Time - RTT + 1/ Bandwidth + ????
    - Latency (Delay) - how long it takes a packet to travel from onoe of a network to the other
        - Propogation Delay
        - Lateny Delay in a Packet Switched Network
            - Nodal Processing - determine output link and check bit errors (fixed)
            - Queuing - time waiting at output link for transmission, depends on congestion level (dynamic)
            - Retransmission - placing packet on link (fixed)
            - Propogation - movement of packet from source to destination router, depends on distance (fixed)
    - Queuing
        - Packet size will vary, packet arrival rate will vary
        - Lambda - packets per second queued
        - Mu - packets processed
        - # of packets in system = p / 1 - p
        - Distribution - Poison
        - Address - Reduce Load or Increase Capacities
    - Performance Metric
        - Delay Time Bandwidth - Amount of data in flight or in the pipe
            - Example = (Latency) 100ms x  (Bandwidth) 45Mbps = 560KB
            - How much before first bit arrives - delay time
            - Goal - keep the pipe full
        - Round Trip Time x Bandwidth - amount of data before you get a response
            - Transfer this amount of data before looking for a response
        - Bandwidth Requirements - constant rate, burst, and peak rate
            - Voice over IP - Constant Rate, Video Conference - Burst and Peak
            - Adaptive (Elastic) Bandwidth is ideal in many situations, but not all
            - Jitter - Variance in latency e.g. inter packet gaps
    - Video Applications
        - Video - sequence of frames
            - Frame Size - (352x240 x 24 bits per pixel) = 2027520 bits = 2Mb
            - 30 FPS (frame per second) - 30fps x 2MB/frame = 60Mbps needs to be transmitted, required bandwidth
            - We must compress to reduce the required bandwidth
            - Compression
                - remove redundancy, transmit differences in frame beginning from base frame to derive next frame
                - reduce what of each frame is resent, if there is duplicate values
        - After compression
            - Average Rate = 2Mbps
            - Peak Rate = 3Mbps
        - Decompression - GPU card can perform the task optimally
        - Addressing Jitter
            - Buffer - wait at beginning, and then play out at the target rate
            - Buffer Issue - repeat buffering - caused by not enough bandwidth - bandwidth provided by network is lower than neeeded by application
            - Youtube - adaptive playout - must reduce application need to align with network rate, store multiple versions in different encodings/resolutions for different rates, automatically switch between resolutions
    - Inter-Process Communication
        - Turn host to host connectivity into process to process communication
        - Fill gap between what applications expect and what the underlying technology provides
        - IPC Abstractions - Transport Layer
            - Request/Reply - distributed file systems, digital libraries e.g. web
            - Stream-Based - video applications, on-demand video, video conferencing - ideal latency <300ms <150ms for humans
    - Possible Errors and Failures
        - Bit-level errors (electrical inference) - bit flips from 0-1 or 1-0
            - Number of bits is dependent on the clock speed
            - Fiber - 1 / 10^12 - 10^4 - rare
            - Cat - 1 / 10^7
            - Wireless
        - Packet-level errors (congestion)
            - Messages are delayed
            - Message arrive out of order - packets can take different paths - add sequence number at transport layer to determine packet arrival sequence
            - Third parties eavesdrop - cannot trust the network - add end to end encryption - application data is encrypted
        - Link and Node Failures
            - Physically cut link
            - Router can fail or need to be rebooted

    - Socket Interfaces
        - What are sockets?
            - Endpoint of communcation to which a name can be bound
            - Provides access to transport protocols (TCP or UDP)
            - Designed to implement the client server model for interprocess communication 
                - 1. Server must be listening for client requests
                - 2. Client connects to server
                - 3. Client makes request to server.
                - 4. Server responds to request
        - Purpose - Transport layer interface to facilitate connection
        - Socket Domain
            - Unix domain sockets are named with UNIX paths, enable communiation of processes on a single host
            - Internet domain communication uses the TCP/IP suite, between processes on different hosts
        - Types
            - Stream - enables processe to communicate using TCP (SOCK_STREAM)
                - Guaranteed reliable in order delivery packet service (SOCK_DGRAM)
            - Datagram - enables processses to communicate using UDP (SOCK_RAW)
            - Raw Sockets - bypass transport layers
        - Libraries
            - libsocket.so - linux
            - libsocket.a - static linking library
            - Compile and Link
                - Linux - g++ main.c -o main
                - SunOS - g++ main.c -o main -lsocket -lnsl
        - Interprocess Communication
            - Issues
                - Creating sockets, naming sockets, sending/receiving data over socks
            - Mechanism
                - UNIX system calls and library routines
                    - if (code = syscall() < 0) { perror("syscall"); exit(1);}
                    - Success - >= 0, Failure = -1
        - Socket Creation
            - s = socket(domain, type, protocol)
                - domain - AF_INET, AF_UNIX
                - type - SOCK_STREAM, SOCK_DGRAM, SOCK_RAW
                - protocol - 0
                - s = socker(AF_INET, SOCK_STREAM, 0) (0 = default protocol tcp) - returns a socket number (file descriptor)
                - file descriptor indexed to open file tables, stdin 0, stdout 1, stderr 2, others 3+, defined networks
        - Naming Sockets
            - int bind(s, name, namelen) - bind socket to some address
                - name - Socket Address STRUCT - sockaddr_in is a C structure
                    - sin_family - internet domain (AF_INET, AF_UNIX)
                    - sin_addr - (141.215.10.30) - typically 0.0.0.0
                    - sin_port - 6666 - 0-65535
            - Internet Address and Ports
                - sin_addr values
                    - four bytes - 141.216.69.204 - using sbin/ifconfig
                    - if you specify INADDR_ANY for local host address, all host address apply
                - sin_port values
                    - 0-1024 reserved for system
                    - well known ports are important
                        - http is port 80
                        - telnet is port 23
            - Understanding Ports
                - Packet - Port and Data - determines application to direct to
        - Client Server Model
            - Connections - Tuples - Server Port, Server IP, Client Port, Client IP
        - Project Number One
            - Single Client and Single Server
        - Project Number Two
            - Multiple Clients and Single Server
            - Issues
                - System calls or blockcing, unable to handle data from two clients simultaneously, and you dont know when data will arrive
        - Data Transfer
            - Send - will return 0 to indicate connection has closed, after data has been receieved
                - write(s, buf, siezeof buf)
                - send(s, buf, sizeof buf, flags)
                    - s - socket
                    - buf - data to send
                    - sizeof - bytes of buffer
                    - flags - 0
            - Receieve - will return whatever is in the buffer, partial or full, will return number of bytes receieved
                - read(s, buf, sizeof buf)
                - recev(s, buf, sizeof buf, flags)
                    - s - socket
                    - buf - where to store data
                    - sizeof - bytes of buffer
                    - flags - 0
        - Other System Calls
            - int connect(s, name, namelen) - specifies peer with which sd is to be associated - name (Server IP Address and Port Number) - CLIENT
            - int listen(s, backlog) - specifics maximum backlog of connections a server will allow - SERVER
            - int accept(s, addr, addrlen) - extracts first connection off queue of pending connections - BLOCKS - SERVER
            - int close(s) - deletes descriptor from system tables
        - Connection Orriented Communication Using Stream Socket - Review Diagram - Bidirectional
            - SETUP
                - Server - socket(), bind(), listen()
                - Client - socket(), connect(server IP address and port number)
                - Server - accept()
            - COMMUNICATION
                - Server - send(), recv()
                - Client - send(), recv()
            - CLOSING
                - Server - close()
                - Client - close()
        - Code
            - Copy and Paste to Machine
            - run ```make```
            - run ./server
            - run ./client [ip] with server IP (127.0.0.1) loopback
        - Socket Programming with TCP
             - TCP - provides reliable, in order transfer of bytes between client and server, repeats until confirmation
             - Procedure
                - Client must contact running server with socket
                - Clietn creates local socket, specifies IP address and port of process
                - When contacted by client, server creates a new socket for server process to communicate with specific client
        - Synchronous I/O Multiplexing - select()
            - select() - gives you the power to monitor several sockets at the same time
        - Additional Methods
            - htonl() - long integers
            - htons() - convert between host byte order and network byte order - host to network
            - ntohl() - long integers
            - ntohs - convert between network byte order and host byte order - network to host
        - Programming Assignment #1
            - Notes on Setup
                - FIND Instructions for Accessing Secure Server.....
                - Update client.c and server.c SERVER_PORT constant
                - Integers - some use endian and some use big endian
                    - Strategy - convert host format to network format
                - new_s is client dependent socket
                - Changes - update in server loop where receiving message to add desired functionality
            - Notes on Assignment
                - Must init address book with file on disk
                - To write file, must be done either on delete, client quit, or server quit
                - Issue - LIST
                    - Server sends multiple messages, how do we match client receiving all these messages
                - Issue - TCP Byte Stream
                    - "200 OK\n" + "1001 Test User \m" results in concatenated message
                    - Client must deal with this. If client calls recv(), and server is done sending, now you are blocked
                    - Solution - concatenate entire message, send one message, single receieve, parse
                - Shutdown - optionally terminate client
                - Quit - terminate client
                - Files
                    - Make, Server.c, Client.c, README, Address Text File
                - Submission
                    - Create tar of project file

3. 09/14/2022 - Continuing Introductions
    - Layering
        - Objectives - Use abstractions to hide complexity
        - Abstrations naturally lead to layering
        - Example Layering
            - Appliation Programs - HTTP, SMTP, etc.
            - Process to Process Channels - Coordinate Between Processes - Client, Server, Peer-to-Peer
                - Request/Reply Channel
                - Message Stream Channel
            - Host to Host Connectivity - Exchange Packets
            - Hardware - Exchange Bits
    - Protocols
        - Building blocks of a network architecture
        - Implementation at each abstraction layer
        - Interfaces
            - Service Interface - operations on this protocol
            - Peer-to-Peer - how protocols connect peers, what is frame, what makes up packet bit significance and orde 
        - Example - Transmission Control Protocol - TCP
            - Host Service Interface - Socket
        - Example - File Transfer Protocol - FTP
            - Specification - actual FTP program e.g. FileZilla
            - Module - API to participate in FTP
        - Protocol Graph
            - Collection of protocols and their dependencies
            - Most peer-to-peer communication is indirect
        - How many layers do we need?
            - Solution - a standard
    - Multiplexing and Demultiplexing
        - Goal - deliver packets to correct process
        - Encapsulation is needed to process the message at each level of the protocol graph
        - Demultiplexing - deliver packet to which host, application, etc.
        - Multiplexing
    - Encapsulation
        - Building layers of control information around the message
    - Standard Architectures
        - Open Systems Interconection OSI
            - Groups
                - International Standards Organization
                - International Telecommunication Union ITU
                - Series - X.25, X.400, X.500
            - Reference Architecture
                - Application
                    - 
                - Presentation
                    - Not in internet architecture
                    - Integer representation e.g. big or little endian
                    - File formatting
                - Session
                    - Not in internet architecture, normally implemeted at application level for internet
                    - Dealing with multiple streams of data e.g. multiple cameras, audio devices, and closed captioning in a room that should be synced
                - Transport
                    - Process to process communiation - interprocess communiation IPC
                - Network
                    - Datagram - how to route packet from source to destination, multiple links will be used
                - Data Link
                    - Transfer frames directly between hosts, links, or switches
                - Physical
                    - Transfer sequence of bits
                    - Key action -  how to encode binary data to signals
                    - Key action - what types of cables
        - The Internet Architecture
            - Group
                - Internet Engineering Task Force
            - Application
                - FTP, HTTP, NV
            - Transport Layers
                - TCP and UDP
            - IP
                - Internet Protocol - IPv4 and IPv6
                - Current Research - trouble with media/video conferenceing in order to achieve Quality of Service requirements
                - Guarantee - best effort service
            - Network
                - Data Link + Physical
            - Features
                - Implement as you go - Request for Comments RFCs
                - RFCs defined by Internet Engineering Task Force
        - Source to Destination Big Picture
            - Source Encapsulation
                - Application - M
                - Transport - Header + M
                - Network - Port Addresses + Header + M
                - Link - Link Address + Port Addresses + Header + M
            - Link Analysis
                - Decapsulate and Evaluate Network to Determine Next Link
            - Destination
                - Decapsulate and Demultiplex to deliver message to application
            - Additional Levels
                - Firewall - needs to evaluate up to application layer
        - Internet Structure - Network of Networks
            - Roughly Hierarchical
            - Center - Tier-1 ISPs - ~12
                - Tier-1 ISPs carry each others traffic for free
            - Tier-2 ISPs
                - Regional coverage, connecting to one or more Tier-1 ISPs or other Tier-2 ISPs
                - Must pay for receipt or sending from Tier-1 ISPs, encourages peering
                - Payment is based on volume
            - Tier-3 ISPs
                - Last hop acceess network closest to end systems
            - Some companies cover multiple Tiers e.g. AT&T
            - Idea - fixed shared value amongst Tiers, given they are providing infrastructure
        - Internet Content
            - Content Delivery Networks - Google, Amazon, Cloudflare - largely monopolies
        - Internet History
            - 1961 - 1972 - Early Packet Switching Principles
                - 1961 - queuing theory with packet switching - Kleinrock
                - 1964 - Baran - packet switching in military nets - Baran
                    - Fault tolerant network to survive nuclear holocaust i.e. rich connectivities
                    - Baran shows network can operate wth 60% link failures 
                - 1967 - ARPAnet conceived by Advanced Research Projects Agency
                - 1969 - First ARPAnet node operational - four nodes (UCLA, Stanford Research Institute, University of Utah)
                - 1972 - ARPAnet demonstrated publicly - fifteen nodes
                    - NCP - Network Control Protocol
            - 1972 - 1980 - Internetworking, New and Proprietary Uses
                - 1970 - ALOHAnet
                - 1973 - Metcalfe's PhD Thesis - Ethernet
                - 1974 - Cerf and Kahn - Architecture for Interconnecting Networks - Inventors
                    - Minimalism, Autonomy, Best Effort Service Model, Stateless Routers, Decentralized Control
                - Late 70's - Proprietary Architectures
                - Late 70's - Switching Fixed Length Packets
                - 1979 - ARPAnet has 200 nodes
            - 1980's
                - Supercomputing
            - 1990 - 2000's
                - 1990's ARPAnet decommissioned
                    - Transfer control of internet from government to private companies
                - 1991 - NSFnet - connect Supercomputing, Universities, and Research Laboratories
                - Early 1990's - World Wide Web
                    - Hypertext
                    - HTML, HTTP - Tim Berners-Lee
                    - 1994 Mosaic, Later Netscape - Graphic Web Browsers
                - Late 1990s-2000s
                    - More Applications - instant messaging, P2P file sharing
                    - Network Security
                    - 50m hosts, 100m users
                    - Backbones 1Gbps
            - Web 2.0 - User generated content enabled by platforms
            - Web 3.0 - User centered control of data

4. 09/14/2022 - Direct Link Networks
    - Classes of Links
        - Buidling Blocks
            - Nodes/Hosts and Switches
            - Link 
                - Guided coaxial, fiber optic, twisted pair
                    - Twisted Pair - CAT 3, CAT 5 - twisted to cancel interference, signal is voltage different between two wires, four pairs
                        - Normal - One pair computer to switch, one pair switch to computer
                        - Gigabit - Use multiple pairs to deliver that speed
                    - Coaxial Cable - signal is electric
                        - Copper Core, Insulating Material, Braided Outer Conductor, Protective Plastic Covering
                    - Optical Fiber Cables - signal is light
                        - Core Glass, Cladding Glass, Jacket Plastic
                        - Propogation using reflection/refraction, transmit multiple values - multi mode
                        - Propogation using a straight line - single mode
                        - Issues - less flexible and more fragile
                        - Speed of Fiber - limited by how fast we can convert electrical signal to optical
                        - Design - optic ring with active repeaters
                - Unguided - radio (low), microwaves (wifi, cellular, bluetooth, satellite), infrared (high), lasers (high)
                - Properties of a Link
                    - Frequency
                        - Fiber Optic Fast - using high frequencies
                    - Encoding
                        - Lower Layers - modulation (change frequency, voltage, and phase) - transmit 8 bits, one byte
                        - Upper Layers - high and low signals - transmit single bit
                    - Multiple Access Links
                    - Point to Point Links
                        - Full-Duplex - two directions, same time
                        - Half-Duplex - two directions, one at a time
                - Bandwidth and Capacity
                    - Bandwidth - width of the frequency range of signal or transmission e.g. human voice 100-3300 Hz, BW is 3200
                    - Capacity - rate in bits per second
                        - Baud Rate - how many symbols per second, speed at which the signal changes
                        - Bit Rate - number of bits /symbol * baud rate
                        - How to determine number of bits per symbol?
                            - log2(number of symbols)
                        - Example - 8 voltage outputs - 2^3 = 8, so 3 bits can be carried
                - Shannon's Theorem
                    - Maximum bit rate for noisy channel
                    - C = BW * log2(1 + S/N)
                        - S = strength of signal - decibels
                        - N = strength of noise - decibels
                        - S/N = 1000, 10log10(1000) = 30 decibels
                    - Always a base noise when transporting, your signal should be stronger than the noise
                    - Maximum Speed thru Telephone Line
                        - BW = 3200HZ - range of human voice and telephone
                        - S/N = 1000
                        - C = 3200 * log2(1 + 1000) = 31,890 bps - Dial Up
                    - Modern Dial Up - 56kbps
                        - To improve, must change (increase or decrease?) signal to noise ratio, e.g. small distance or high quality lines
                    - Asymmetric Digital Subscriber Line - 16Kbps - 8.448 Mbps
                        - Multiple MB per second
                        - Bandwidth improvement results in increases
                        - Asymmetric - Download and Upload link speed are different
                        - 1Mhz - 256 channels
                            - Most channel downlink
                            - Fewer channel uplink
                    - V (Very High Data Rate) Digital Subscriber Line - 12.96-55.2 Mbps
                        - High Frequency, Short Distance (Decent Signal to Noise Ratio)
                        - Distance from home to neighbor unit, no more than 4500 feet, neighbor unit connected to office with optical fibers
                        - U-Verse AT&T - Cable, Internet, and Telephone
                        - Telephone line is dedicated, not shared with anyone else
                - Internet over Cable
    - Five Issues
        - Encoding - how to encode binary data to signals involving voltages, frequencies, etc.
        - Framing - how to identify beginning and end of a frame/packet
        - Error Detection - how to identify flipped bit/frame errors
        - Reliable Delivery - how to ensure reliable deliveries (automatic repeat)
        - Access Mediation - media access controls, how to regulate access to maximize throughput and minimize interference between hosts

5. 09/21/2022
    - The Electromagnetic Spectrum
        - Categories
            - Radio
            - Microwave - wireless state communications, wave length is between 1m and 1mm
            - Infrared
            - Ultraviolet
            - X-Ray
            - Gamma Radiation
        - Types - In Order
            - Radio AM
            - Coaxial
            - Radio FM
            - Television
            - Satellite
            - Terrestrial Microwave
            - Fiber Optics
        - Base Frequency High, Range of Frequency (Bandwidth) is Greater
    - Common Types of Cables and Fibers Available for Local Links
         - Cat 5 - 10-100Mbps
         - Thin-net Coax
         - Thick-net Coax
         - Multi Node Fiber
         - Single Mode Fiber
    - Carrier Services - Wide Area Network - Lease Lines
        - DS1 - T1 - 1.544 Mbps
        - DS3 - T3 - 44.736Mbps
        - STS-1 - OC1 - 51.840 Mbps - Optical Fiber
        - STS-3 - OC3 - 155.529 Mbps - Optical Fiber
        - STS-N - N*51.840 Mbps - Optical Fiber
    - Common Services Available to Home
        - POTS - Plain Old Telephone Service
        - ISDN
        - ADSL
        - VDSL
        - CATV
        - Starlink - Low Earth Orbit
            - Small Disk Receiver/Sender
            - Satellite - Few Hundred Miles Above the Ground
            - Currently launching 60+ satellites per launch
            - Latency - less than optical fiber due to direct
            - Signal travels faster in space, advantage, then hits atmosphere
    - Spectrum Allocation
        - 0-750MHz
            - Upstream, 0 - 42
            - TV 54 - 88
    - Encoding (Wired)
        - Idea - signals propogate over a physical medium
            - Modulate electromagnetic waves e.g. vary voltage
        - Encode binary data onto signals
            - 0 as low signal, 1 as high signal
            - Low Voltage vs. High Voltage - what are the voltages?
            - Non-Return to Zero
        - Problem - Consecutive 1s or 0s
            - Baseline Wander - If your signal is high for awhile, it will push the average up, making it difficult to determine low
                - If you travel a long distance, voltage will vary over time
                - The average of the signal strength over time determines low and high
                - Compare the average to the signal received, if higher, than high, and lower, than low
            - Unable to Recover the Clock
                - The number of bits is determined by tbe clock speed
                - Every clock, one bit, sender and receiver need to be precisely synchronized
                - If out of sync, one might interpret more or less data than actually transferred
                - Synchronizing the clock is difficult given their speed
                - If Gbps, clock will change up and down 1 billion times per second
                - Need to periodically resynchronize with other clock
            - How do we synchronize the clcok?
                - Send both the data and clock, this is an expensive option
                - When transition occurs, this is boundary of the clock, and you can adjust your clock based off this value
            - Low Signal (0) may be interpreted as no signal, making it difficult to resync the receiver's clock
            - Goal - always want transitions to enable clock synchronization
        - Alternate Encodings
            - Non-Return to Zero Inverted
                - Make a transition from current signal to encode a one
                - Stay at current signal to encode a zero
                - Solves the problem of consecutive ones
                - Great for data with all ones or alternatives, what about all consecutive zeros?
            - Manchester
                - 0 low to high transition
                - 1 high to low transition
                - Manchester is equivalent to transmit XOR of the NRZ encoded data and the clock
                - Only 50% efficient (the bit rate = half baud rate) - receiver needs to detect transition at twice the speed
                - LOOK AT MIDDLE OF THE CLOCK, SO YOU CAN PREPARE FOR TRANSITIONS
                - Issue - too many transitions, due to consecutive numbers you need two transitions, one as prep, and the actually signal change representing transition
            - 4B/5B (FDDI) - Optical Fiber Array Network and Fast Ethernet
                - Every 4 bits of data encoded in a 5 bit code
                - 5 bit codes to have no more than one leading 0, and nor more than two trailing 0s
                - Thus, never get more than three consecutive 0s
                - Resulting 5-bit codes are transmitted using NRZI
                - Achieves 80% efficiency - transmit 5 bits that carry only 4 bits of data
            - 8B/10B
                - Every 8 bits of data encoded in a 10 bit code
        - Framing
            - Goal - break sequence of bits into a frame
            - Typically implemented by a network adaptor
            - Approaches
                - Sentinel Based Approach
                    - Byte Oriented Protocols
                    - At beginning, send a sequence of characters to sync and declare this is beginning of a new frame, also synchronizes with reciver's clock
                    - 8 SYN, 8 SYN, 8 SCH, Header, 8 STX, Body
                    - At end, send 8 bits for End of Text (ETX)
                    - Cyclial Redundnacy Check 16
                    - Issue, special character SYN or ETX appear in the data portion
                        - Solution Character Stuffing - precede the ETX with a data link escape character
                        - First data link escape character is thrown away
                        - To insert a DLE, insert another DLE - first is thrown away, second is evaluated
                    - Issue - you don't know how many DLE need to be inserted, so it is difficult to make each frame the same size
                - Bit Oriented Protocols
                    - Delineate frame with special pattern 01111110 - beginning and end
                    - Issue - special pattern appears in the payload
                    - Solution - bit stuffing
                        - sender - insert 0 after five consecutive 1s
                            - User Data - 01111110
                            - Stuffed - 011111010
                        - receiver - delete 0 after five consecutive 1s
                    - Can error detect, if you have seven consecutive 1s
                - Counter Based Approaches
                    - SYN, SYN, Class, Count, Header, Body, CRC
                    - Count = size of body or frame
                    - SYN is beginning
                    - Count = size
                    - Count the data up to size, and then frame is over
                    - Problem - count field is corrupted, could negatively impact multiple frames
                    - Solution - catch when CRC fails
                - Clock Based Approach
                    - SONET - Synchronous Optical Network
                    - Each frame is 125us long
                    - STS-N (STS-1 = 51.84 Mbps)
                    - (9 Rows and 10 Columns) 810 bytes / BW = 125us
                    - STS-3 - Speed 3x faster, Size 3x larger
                    - Each row (9), always include two characters SYNC, SYNC
                    - When multiplexing into higher STS, you interleave the bits from the low speed to the high speed
                    - With interleaveing, the data arrives at the speed to match the outgoing lower speed links
                    - Encoding in SONET
                        - NRZ
                        - Sender - XOR of the data by the use of a well known bit patterns (127 bits long)
                        - Receiver - how to invert XOR, XOR on same bit pattern results in original data
                        - Issue, users data is same as bit pattern used for XOR, results in zeros
                        - Solution - be careful when picking 2^127 pattern
        - Error Detection - Frame - Link Layer
            - Goal - how to determine frame is correct
            - Pattern - data + redundancy code, should satify some properties
            - Redundnacy - use a function, pass data, and produce redundancy code
            - Two Dimensional Parity
                - Add parity bit on each row, such that the number of 1s in each row is even
                - Add parity bit on each column, such that the number of 1s in each column is even
                - Can perform recovery of a single bit, given we have row and column
                - Can detect a two bit error, but can not perform a recovery
                - Can detect odd number errors
                - Cannot detect error with same two columns and same two rows....
                - Uses - storage devices
                - Not used much for communication, there is a lot of overhead
            - Internet Checksum Algorithm - sum of 16 bit integers and redundnacy results in all Os
                - View message as a sequence of 16 bit integers
                - Sum using 16 bit ones complement arithmetic
                - Take ones complement of the result, invert direclty
                - Checksum is always the same length, 16 bits
                - Uses - Internet Protocol and Transmission Control Protocol
                - Pro - overhead is relatively low, checksum is always exactly the same
                - Issue - corruption in bits additon lead to same sum
                - SUMMATION
                - Done by software components in network or transport layer
            - Cyclic-Redundancy Check - sum of data and redundancy is divisble by a value
                - Uses - link layer protocols - wifi, ethernet - implemented in network card
                - Pattern
                    - Add k bits of redundant data to an n-bit message, want k << n
                        - You want K much smaller than n
                        - CRC code is always 32 bits for ethernet and wifi
                    - Represent n bit message as an n-1 degree polynomial
                        - MSG - 10011010 - M(X) = x^7 + x^4 + x^3 + x^1
                    - Let k be the degree of some divisor polynomial
                        - C(X) = X^3 + x^2 + X^1 = 1101
                        - k = 3
                    - Transmit P(x) that is evenly divisible by C(X)
                        - Shift left k bits
                        - Obtain Remainder - M()
                    - Receiver if you get remainder 0, there are no errors
                        - E(X) was zero, no error
                        - E(X) is exactly divisible by C(X), can't detect the error
                - Polynomial Division
                    - Representedin binary, do XOR NOT numerical analysis
                    - Hardware - XOR and Shift Gates - can be implemented efficiently
                - Selecting C(X)
                    - All single bit errors, as long as the X^k and x^n terms hve non-zero coefficients
                    - All double bit errors, as long as C(X) contains a factor with at lest three terms
                    - Any odd number of errors, as long as C(x) contains the factor (x+1)
                    - Any burst errors (i.e. sequence of error bits) for which the length of the burst is less than k bits
                    - Most burst errors of larger than k bits can also be detected
        - Acknowledgements and Timeouts
            - Goal - how do we ensure reliability?
            - Protocol - Automatice Repeat Request (ARQ)
                - Stop and Wait
                    - Send Single Frame
                    - Receiver Performs Error Detection
                    - Receiver Does or Does Not Send ACK
                    - No Acknowledgement - Sender Repeats
                    - Acknowledgement - Sender Sends New Frame
                    - Problem - keeping the pipe full
                        - Calc = 1.5Mbps link x 45ms RTT = 67.5kb (8kb
                        - 1 KB frame implies 1/8th link utilization
                        - Volume = RTT x BW - data before 1st bit arrives
                    - Solution - Sliding Window
                - Sliding Window
                     - Allow mulitple outstanding frames
                     - Upper bound outstanding frames called window
                     - Window = number of frames allowed to transmit to fill up the pipe
                     - Window = ( RTT x BW ) / Frame Size
                     - Continue sending frames as ACK are received
                     - Resend frame if missing ACK
                     - Ensure reliability and in order delivery - from sender to receiver
                - Concurent Logical Channels
            - Implementation - Transport Layer by TCP
            - Equivalent for Link - Frame Relay or X.25
            - Situations
                - Frame Received but Ack Corrupted - sender still sends, end up with two copies
                - Frame received but Ack delayed for long enough - sender still sends, end up with two copies
                - Solution - for each frame add a sequence number, drop duplicate frames with same sequence number, alternate 0 1
            
6. 09/28/2022 - Part One
    - Sliding Window Algorithm
        - Goal - allow multiple outstanding (un-ACKed) frames
        - Window - upper bound on un-ACKed frames
    - Idea - ARQ - Automatic Repeat Request
        - Sender is smart enough to determine time to retransmit
        - Acknowledgement - receiver has recieved frame
        - Timeout - wait to send the next frame based on acknowledgement or no acknowledgement
             - How to determine timeout values?
                - RTT - shortest time is when you send and send back i.e. RTT
                - Timeout >= RTT e.g. 2x RTT
    - Stop and Wait
        - Send Frame, Wait for Response
        - Problem - keeping the pipe full
    - Sliding Window - most important algorithm in networking - used in TCP
        - Window - Sending Window Side
        - Estimate for Sending Window Size
            - Desire - fully virtualize network
            - BW x RTT = Volume
            - (BW x RTT) / Frame Size = Senders Window Size
            - (8KB / 1KB) = 8 Frames to transmit
        - Pattern
            - Send SWS
            - For every acknowledgement, you send one frame
        - SW: Sender Parameters
            - Send Window Size
            - Lack Acknowledgement Recieved
            - Last Frame Sent
        - Maintain Invariant - LFS - LAR <= SWS
        - Advance Last Acknowledgement Received by one when ACK arrives
        - Buffer up to SWS Frames, in case you have to retransmit any of the frames
        - SW: Receiver Parameters
            - Received Window Size
            - Largest Acceptable Frame
            - Last Frame Received
            - Invariant - LAF - LFR <= RWS
            - Frame SegNum Arrives
                - If LFR < SegNum <= Last Acceptable Frame - accept
                - If SegNum <= LFR or SegNum > LAF - discard
            - Send cumulative ACKs (Send 0-5)
        - Examples
            - Loss - missed or error detected
        - Scenario - 2RTT
            - Likely to retransmit other frames, even already accepted, waiting for earlier frame to be sent
        - Scenario - DUPACK[1] - means I am waiting for a specific frame
            - Sender immediately resends frame 1 after DUPACK[1], instead of waiting for the timeout
        - If higher ack received, and lower missed, implies lower already received
        - You can group higher ACKs given this, and won't impact performance
        - ACK can be piggy backed on dataframe going other directions, mark as also acknowledgement in the headers
    - Sequence Number Space - Issue
        - SeqNum is finite, and sequence numbers wrap around
        - Sequence number space must be larger than the number fo outstanding frames
        - Example - Four bits, 0-15 and then wrap, 0000 -> 0001 -> ... -> 1111 -> 0000
        - MaxSegNum >= SWS + 1 is not sufficient
        - Example
            - Three Bits - Max Sequence Number is 7 (0 - 7)
            - SWS = 7
            - RWS = 7
            - Sequence Space is 8
            - All frames arrive, but all receiver ACKs are lost
            - Sender waits and repeats with zero frame
            - Receiver already has all frames in order and is expecting next frame to have zero sequence number
            - Next packets should be dropped as they are duplicates, but they will be accepted
        - Rule MaxSeqNum >= 2SWS when Sender Window Size = Receiver Window Size
        - Rule MaxSeqNum = SWS + RWS when Sender Window Size != Receiver Window Size
    - Out of Order Arrival - Possible ABOVE link layer, is issue to be revisited in Ch. 5
    - Achieves
        - Reliability - guaranteed to deliver packet
        - In-order - guaranteedt to be in order
    - Concurrent Logical Channels
        - Multiplex 8 logical chanels over a single link
        - Run stop and wait on each logical channel
        - Maintain three state bits per channel
            - channel busy
            - current sequence number out
            - next sequence number in
        - Header - 3 bit channel num, 1 bit sequence num
            - 4 bits total
            - same as sliding window
        - Separates reliability from order

7. 09/28/2022 - Part Two
    - Shared Access Networks are Different
        - Shared Access Networks assume multiple nodes on the same physical link
            - Bus, ring and wireless structures
            - Transmission sent by one node is received by all others (broadcasting)
            - No intermediate switches
        - Need methods for moderating access (MAC Protocols)
            - Fairness
            - Performance
            - How can this be done?
        - Issue - two nodes transmitting at the same time i.e. collision and signal interference
    - Multiple Access Methods
        - Fixed Assignment
            - Partition channel, circuit switching, so each node gets a slide of the bandwidth
            - Time Division Multiple Access (GSM), Frequency Division Multiple Access, Code Division Multiple Access (3G)
                - CDMA - receiver can filter out results from multiple sources
        - Contention-Based
            - Nodes content equally for bandwidth and recover from collision
            - No assignment and no reservations, when you have data, you transmit
        - Token-Based or Reservation Based
            - Take turns using the channel
            - Whoever holds the object can talk
    - Ethernet
        - History
            - Developed by Xerox PARC in mid 1970s, Metcalfe, meant to share printer among multiple individuals, shared cable
            - Roots in Aloha packet radio network
            - Standardized by DEC, Intel, and Xerox in 1978 (DIX)
            - Similar to IEEE 802.3 standard
            - 802.11 WiFi
            - 802.15 Bluetooth
        - CSMA/CD (Ethernet) - CSMA/CA (Wireless)
            - Carrier Sense - sense in the channel for idle status in order to transmit, cannot avoid collision completely
            - Multiple Access - allow multiple nodes to share cable
            - Collision Detection - detect, while transmitting, for one or more nodes transmitting as well
        - Frame Formats
            - Ethernet DIX - minimum 64 bytesm pad so payload is at least 64 bytes
                - Preamble - 6 Bytes - 010101, sync
                - Destination Address - 6 Bytes 
                - Source Address - 6 Btes
                - Type - 2 (0x0800 IP Datagram) Bytes
                - Payload - 0-1500 Bytes
                - Pad - 0-46 Bytes
                - Check Sum - 4 Bytes
            - IEEE 802.3
                - Preamble
                - SoF
                - DEstination
                - Source
                - Length
                - Data
                - Pad
                - Check-Sum
        - Ethernet Cabling - Manchester Encoding - Need 20Mhz * 50% (Manchester Efficiency) = 10Mbps
            - 10Base - data rate is 10MBps
            - 5 - 500 meters
            - 10Base5 - Thick Coax, vampire tap insecure, can become loose
            - 10Base2 - Thin Coax, uses T connector, more reliable
            - 10Base-T - Twisted Pair
            - 10Base-F - Fiber Optics
        - Ethernet Details
            - Address (Media Acces Control)
                - Unique 48 bit unicast address assigned to each adapter
                - Example - 8:0:2b:34:b1:@
                - Does not change, permanent
                - Broadcast - all 1s
                - Multicase - first bit is 1 - send packet to a group
            - Bandwidth - 10Mbps, 100Mbps, 1Gpbs
                - For all bandwidths, frame format is the same, allowing speed switching between cables
            - Length = <= 2500m (500m segments with 4 repeaters), maximum distance between two nodes 2500m
                - Latency = 51.2 microseconds, maximum latency between two nodes
            - Problem: distributed algorithm that provides fair access
        - Aloha Networks - Wireless
            - Developed in 1960's by Norm Abramson at U of HI for use with packet radio systems
                - Mainframe computers and many terminals
                - Two channels, mainframe to terminals, shared terminal to mainframe channel
                - Any stations can send data at any time
                - Receiver sends an ACK for data
                - Random Backoff - Once collision is detected, randomly wait to retransmit, A wait for 10us and B wait for 30us
            - Slotted Aloha Improvement
                - Divide timeline into multiple slots
                - If you have data ready before the beginning of a slot, you can trasnmit and must only transmit at the beginning of a new slot
                - Random backoff from slots
            - Utilization Aloha - 18%
            - Utilization Slotted Aloha 36%
        - Ethernet Transmit Algorithm
            - Metcalfe analyze Aloha
            - In Aloha, no consideration is given to other nodes activity on channel, difficult with wireless, propogation back is also difficult
            - Ethernet uses CSMA/CD, listen to line before/during sending
            - If line is idle - carrier sense
                - send immediately
                - upper bound message size of 1500 bytes
                - must wait 9.6us between back to back frames, fairness
            - If lines is busy
                - wait until idle and transmit immediately
                - caled 1-persistent (special case of p-persistent)
                - .3 percent, transmit only 30% of the time, 70% don't transmit
            - If collision
                - guaranteed way to detect a collision - make sure the transmit time >= max RTT
                    - So collision returns before you finish transmitting
                    - Frame Size / BW >= max RTT
                    - minimum frame size = maxRTT * BW (EQUATION)
                    - Classic Ethernet
                        - Distance 2500m
                        - maxRTT is 51.2us x 10Mbps (classic ethernet) = 512bits or (512/8) = 64 bytes
                    - Fast Ethernet
                        - BW x 10
                        - maxRTT / 10 - achievable by dramatically reducing distance, maxRTT needs to be < 5.12us
                        - minFrameSize = NO CHANGE
                        - Distance 200m
                - jam for 32 bits (inform everywhere there is collision), then stop transmitting frame
                - minimum frame is 64 bytes
                - delay and try again
                    - 1st time 0 or 51.2us (2 choices) - 1/2
                    - 2nd time, 0 51,2us, 102.4us, 153.6us (0,1,2, or 3) (4 choices)
                    - nth time *k=0.2^n - 1 (8 choices)
                    - give up after several tries
                    - exponential backoff

8. 10/05/2022
    - Direct Link Ethernet Review/Final Notes
        - CSMA/CD
            - Carrier Sensing
            - Multiple Access
            - Collision Detection
            - Three States - contention, transmission, or idle
        - Exponential Backoff
        - The link layer cannot guarantee delivery, after 16 tries on ethernet, the packet is discarded
        - Ethernet doesn't guarantee fairness
    - Switched Ethernet
        - Switch - multiple ports - one dedicated link for each device
        - Switch Port - Store and Forward
    - Fast and Gigabit Ethernet
        - Classic Ethernet 10Mbps - Metcalfe
            - Four Twisted Pair
        - Fast 100Mbps - 1990
            - Uses 48/5B - 80% - Clock must be 125 Mhz
            - 1 Pair - Computer to Switch
            - 2 Pair - Switch to Computer
            - Parallel Pair Usage
        - Gigabit Etherent - 1Gbps = 1000 Mbps
            - Four Pairs in Parallel
            - Collision Detection only necessary if you share link with another
        - Crossover - Computer to Computer
    - Experiences with Ethernet
        - Works best on light loads < 30%
        - As load increases, post 30%, throughput begins to fall
        - Most networks are limited to about 200 hosts, specification allows for up to 1024
        - Most networks are much shorter than 2500 meters - 50 to 10 us RTT
        - Ethernet is inexpensive, fast, and easy to administer

9. 10/05/2022
    - Token Rings/Token Array
        - Token Ring Overview
            - Ring of Devices
            - Token - Bit Pattern Rotating
            - To transtmit, token must be retrieved
        - Examples
            - 16Mbps IEEE 802.5
            - 100 Mbps Fiber Distributed Data interface FDDI
        - Idea
            - Frame flows in one detection upstream to downstream
            - You must discard your own frame, once it returns to you
        - Issues
            - If node holding the token crashes, what happens?
            - If transmit frame and you crash, token can circle forever - requiring monitors to manage various aspects of the network
        - FDDI Network - Fiber Distributed Data Interface
            - Dual Fiber Rings for fault tolerance
            - Uses fiber optics instead of cables
        - Timed Token Algorithm (FDDI)
            - Token Holding Time - upper limit on how long a station can hold the token
            - Token Rotation Time - how long it takes the token to traverse the ring
                - Upper Bound - Token Rotation Time = ActiveNodes * Token Holding Time + RingLatency
            - Target Token Rotation Time
                - Agreed upon upper bound on TRT
            - Latencies
                - Ethernet - worst latency is infinite
                - FDDI - maxTRT
            - Scenarios
                - Single Node - THT / THT + Ring Latency - utilizations of network - must wait for rotation before transmitting
                - Token Holding Time - As large as possible to maximize use from a single node

10. 10/05/2022
    - Wireless LANs
        - Characteristics
            - WiFi is omnidirectional and all nodes within range can receive it
            - All nodes see all frames
        - Versions
            - IEEEE 802.11 - 1 or 2Mbps
            - IEEE 802.11a 54 Mbps
            - IEEE 802.11b 11 Mbps
            - IEEE 802.11g 54 Mbps
            - IEEE 802.11ay 20 Gbps
            - Wifi 6.0E
        - Bands in the United States
            - Microwave Technology 300 Mhz to 300 Ghz
            - Wavelength - 1m and 1mm
            - Equation - lambda c = f
                - lambda = wavelength
                - c is speed of light
                - f = frequency
            - Spectrum is highly regulated, requiring a license to operate 
        - ISM Bands - Unlicensed
            - 900 Mhz - cordless phones
            - 2.4Ghz to 2.4835 Ghz - 802.11 b/g and Bluetooth
            - 5.736 Ghz
        - Shannon's Theorem - C = BW * log2(1 + S/N)
        - Modulation - change signal voltage levels
            - Binary Single
            - Amplitude Shift keying - Low 0 High 1
            - Frequency Shift Keying - Faster Change 1 Slower Change 0
            - Phase Shift Keying - 90, 180, 270
            - 8 voltage, 8 frequencies, 4 phases = 256 bits
            - 1 symbol is 8 bits
        - The 802.11 Protocol Stack
            - Upper Layer
            - Data Link Layer
                - Logical Link Layer
                - Mac Sublayer
            - Physical Layer
                - 1997-1999 - 802.11 - 1Mbps - frequencey hopping
                - 1999 - 802.11a - 54 Mbps
                - 1999 - 802.11b - 11MBps spread spectrum, 7x larger than 802.11a
                - 2003 - 802.11g - 54 Mbps - OFDM - Most popular physical layer technologies
                - 2009 - 802.11n - MIMO - Multiple Input Multiple Output
                - 802.11ay - Wifi 6E
        - Spread Spectrum - minimize interference
            - Idea - spread signal over wider frequence band than required
            - Originally designed to thawrt jamming, if you have narrow range, enemy can jam the range (Spaceballs)
            - Frequency Hopping
                - Transmit over random sequence of frequencies
                - Sender and receiver share pseudorandom number generator and see
                - 802.11 uses 79 Mhz wide frequence bands
            - Direct Sequence
                - For each bit, send XOR of that bit and n random bits
                - random sequence knwo to both sender and receiver
                - Called n bit chipping code
                - 802.11 defines an 11-bit chipping code
            - OFDM Out of Scope - Orthoganal Frequence Division Multiplexing
    - Elements of a Wireless Network
        - End Hosts - Laptop, Phone, Tablet, WifiCard
        - Base Stations
            - Forwards messages to other device or the rest of the network
        - Infrastructure Mode
            - Handoff, mobile changes base station providing connection into wired network
        - Ad Hoc Mode - MANET - Mobile Ad Hoc Network
            - No base station required
            - Nodes can transmit to other nodes within coverage
            - Mesh, communicating what nodes are connected to communicate with each other
            - Routing can be a challenge, links may disappear, requires constant tracking and planning
                - Solution - forward packet based on location, along direction towards target
            - Sensor Network - weather measurement, earth quake detection, power consumption is low as well
        - CSMA/CA
            - Carrier Sensing
            - Multiple Access
            - Collision Avoidance
                - Colliison Detection isn't viable, given the difficult of returning the signal back to the sender indicating collision
                - Random back off window i.e. 8 slots, larger number larger wait time
                - Exponential back off occurs as well, 8 -> 16 -> 32
            - Flow
                - ACK confirms received
                - No ACK you can conclude collisions or interference
                - ACK frames have higher priority, frame may be transmitted back, wait post transmission for ACK
        - Hidden Node and Exposed Node
            - Hidden Node
                - C is transmitting to B
                - C's radio range only include B and not A
                - If A wants to send to B, but cant sense C, A thinks B is idle
                - A starts to transmit, interference occurs
                - C's transmission to B will be damaged by A's tranmission to B
            - Exposed Node
                - B wants to transmit to C
                - A is transmitting to B
                - B thinks transmit to C will fail
                - However A-B and B-C can actually be performed in parallel
                - issue - close to transmitter but not receiver and can still actually transmit
        - MACAW - Collision Avoidance for Wireless Network
            - Virtually Sensing - Additional Control Frames
                - Request to Send Frame RTS
                - Clear to Send Frame CTS
            - Neighbors
                - See CTS - something will be sent and you are closer to reciever so be quiet - HIDDEN NODE
                    - Wait until ACK
                - See RTS but not CTS, ok to transmit - something will be sent, you are not closer to receiver, okay to transmit - EXPOSED NODE
            - Collisions
                - NO CTS predict collision
                - Exponential backoff after detecting a collision
            - Scenario
                - A and B send RTS
                - Exponential Random Backoff
                - A sends RTS
                - Receiver responds with CTS
                - A sends data
                - Receiver sends ACK
            - Key Characteristics
                - Data Frame >> RTS and CTS
                - Data Frame > 1KB
                - RTS and CTS should be transferred at a lower speed and wider coverage, frame smaller but air time is similar
        - Supporting Mobility
            - Case 1: Ad Hoc Networking
            - Case 2: Access Points
                - Change access points as you move through the environment
            - Requirements
                - Scanning
                    - Node sends probe frame
                    - All APs w/in reach reply wih ProbeResponse Frame
                    - Node selects one AP, sends it AssociateRequest Frame
                    - AP replies with AssociationResponse frame
                    - New AP informs old AP via tethered network
                - Access Point periodically sends Beacon frame
    - Bluetooth
        - General Information
            - Designed for Inter System connections e.g. computer to mouse or computer to keybaord
            - Bluetooth Signal Strength - 10 meters
            - Data Rate - 1Mbps
            - 7 Layer Protocol - Physical, Data, Network, Transport, Session, Presentation, Application
            - 802.15 - Bluetooth Link and Physical Layer Standard
        - Bluetooth Architecture
            - Design - Asymmetrical - Master and Slave Design
            - Piconet = Meshnet
            - Two Piconets can be connected to form a scatternet, connected through slave bridge node
            - Slave bridge node must pair with both masters, requiring special configuration
    - Midterm
        - Split
            - Multiple-Choice - Topic Understanding
            - Open Response - HWK 1 and 2
        - Performance Metrics
            - Bandwidth
            - Transmit Time
            - Tranfer Time
            - Propogation Delay
            - Store and Forward Retransmit Time
            - Cut Through Retransmit Time
            - Delay Time Bandwidth Product - Meaning + Calculation
            - Round Trip Time Product - Meaning + Calculation 
        - Multiplexing
            - Encapsulation - Upper Layer Unit Wrapped in Lower Layer Unit - Data -> Wrap + Data + Wrap ->
                - Network - Datagram
                - Link Layer - Frame wrapped Datagram
        - Network Architecture
            - Client Server Model
            - Open Systems Interconnection Model - REFERENCE
            - Internet Architecture
                - TCP and UDP - Transport
                - IP - Network Layer
        - Encoding
            - NRZ, Manchester, NRZI, 4B/5B
            - Convert Binary Sequence to Diagram
        - Framing
            - Identify frame beginnig and end concepts
        - Error Detection
            - Parity
            - CRC
            - Internet Checksum Algorithm
            - What errors detectable and strengths/pros
        - Sliding Window Algorithm
            - Draw Diagram for Frame Lost
            - Draw Diagram for ACK Lost
            - Draw Diagram for DUPACK
        - Ethernet 
            - Multiple Access Control Algorithm
            - Content Based Appraoched
            - Carrier Sense
            - Collision Detection
            - Minimum Frame Size
            - Exponential Backoff
            - Probability After Collision and Backoff - Exponential Growth
        - Token Ring
            - Token Holding Time
            - Token Rotation Time Computation
            - Network Utilizations of Token Array Network
        - Wireless Networks
            - Wifi
                - Limitations of Wifi Carrier Sense
                - Hidden Node
                - Exposed Node
                - RTS, CTS Exchange to Avoid Collisions
        - Homework 1 and Homework 2 Review
            - Homework 2 Solutions - 10/07 Weekend

11. 10/19/2022
    -  Programming Assignment Two
        - Notes
            - Multiple Clients for Server
                - use select() - manage multiple sockets at once
                - use separate threads for each socket
            - Dealing with recv - which is blocking
                - Recommended is to use the select() function, monitors all four sockets at the same time, in a set
                - server - select() returns will tell you which socket data is ready
                - client - select() returns whether is is the socket or stdin, stdin and socket should be in rdfs
                    - if blocked fgets, then cant handle the server response
            - Working with fd_set
                - FD_ZERO - clear
                - FD_SET - add
                - FD_CLR - remove
                - FD_ISSSET - test
            - What are Pthreads?
                - Portable standardized thread programming interface
            - Why Pthread?
                - Try to realize potential program performance gains
                - Notes
                    - heap and data are shared among the threads
                    - stack is separate for each thread
                    - Must use lock when accesssing shared data i.e. the address book
                    - pthread_create() - run child thread function to manage request -> lock address book -> perform action -> unlock address book
                        - cast input value to void * for function
                    - pthread_exit(return value)
                    - pthread_join() - main function, should we wait?, grab return value
                    - global variable - address book - should be accesible by all the thread funtions defined!!
                    - #include <pthread.h> and g++ -l pthread
                    - maintain list on server side - socket, users logged in, user ID, IP address, port number
                    - exit(), terminates entire process, server side*
            - Shutdown - All clients should be shutdown using broadcast, which means all clients must listen to such broadcast
            - Notes
        - Cellular Networks 
            - Mobile Five Generations
                - Analog Voice 1G
                - Digital Voice 2G
                - Mobile Broad Band 3G - Code Division Multiple Access
                - Better and Fater MBB 4G - Long Term Evolution - 10Mbps Download, 5Mbps Upload
                - A Connected World 5G - Goal 20Gbps
            - Components of Cellular Network Architecture
                - Tower/base station cover a cell - combination is a cellular network - a few miles
                - Mobile switching center
                - Cell
                    - Base Station + Mobile Users + Air Interface (physical and link between mobile and base station)
            - Cellular Networks - The First Hop
                - Combined Frequency Divison Multiple Access and Time Division Multiple Access
                - CDMA - Code Division Multiple Access - 3G
                - Orthogoanl Frequencey Division Multiple Access - 4G
            - 