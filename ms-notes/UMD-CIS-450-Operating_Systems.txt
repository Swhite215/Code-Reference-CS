Operating Systems CIS 450

1. 08/31/2022 - Introduction
    - System Basics
        - Hardware - CPU attached to main memory
            - Buses connect components e.g. CPU, memory, graphics, peripheral devices
            - Questions
              - How close should each component be?
              - How do we deal with limited space?
        - Software
            - Questions
                - What happens when a program runs?
                    - It executes instructions, many millions/billions of times every second. The CPU
                        - fetches an instruction from memory
                        - decodes it i.e. figures out which instruction
                        - executes it i.e. does the thing
                        - moves to next instruction F-D-E
                - What else happens in the background when a user program runs?
                    - Body of software, OS Kernel, runs all the time to
                        - make it easy to run programs
                        - allow programs to share memory
                        - enabling programs to interact with devices
        - Basics of Von Nuemann Model of Computing
    - What is an OS?
        - Language, Command Interpreter, Library of Commands, Set of Utilities - NO
        - Definitions
            - Bottom-Up Perspective - Resource Manager
                - Resources - CPU, Memory, Disks, I/O, Timer, Battery, Touch Screens
                - Layers - User -> Application -> Operating System -> Hardware
                - Collection of software that manages computer hardware, intermediary
                - Benefits
                    - Sharing/multiplxing - more that 1 app/user to use resource
                    - Protection of apps from each other
                    - Performance - efficient/fair access to resources
                - Challenges
                    - Managing all kinds of resources
            - Top-Down Perspective - Hardware Abstraction Layer
                - OS as a virtual machine providing a standard library
                - Applications issue system calls to use OS abstractions
                - Benefits
                    - Ease of use
                    - Reusability - provide common functionality
                    - Portablity
                - Challenges
                    - What are the right abstractions?
        - Example - Android
            - Upward Compatability - app developers can write a single app that works across over a billion devices

2. 08/31/2022 - Three Important Pieces
    - Review of OS C Programming Examples from OSTEP
    - Illusion
        - The system has a very large number of virtual CPUs
        - Each running program has allocated memory at the same address, each program acts as it has its own private memory
    - Virtualization
        - Idea - take a physical resource and transform it into a more general, powerful, and easy to use virtual form of itself
        - Virtualization of the CPU - Central Processing Unit
            ./cpu A & ./cpu B &
        - Virtualization of the Memory
            - ./mem 100 & ./mem 1000 & - the memory address location is the same, this is the illusion demonstrated
    - Concurrency
        - Threads
            - ./thread 100 - produces expected value
            - ./thread 100000 - doesn't produce expected value... why?
            - Issue
                - This relates to how instructions are executed
                - A key part of the porogram, where the shared counter is incremented, takes three instructions
                    - Load the value
                    - Increment the value
                    - Store back to memeory
                - These DO NOT execute atomically all at once, and the results become indeterminate
        - Idea - How to manage multiple things at once
    - Persistence
        - Goal - store data for a long period of time
        - Hardware and Software Support
            - Hardware I/O Device
            - Software - File System
        - Unique - OS does not create a private, virtualized disk, instead we create a virtual to physical mapping

3. 09/07/2022
    - Virtualization
        - OS - takes a physical resource (CPU or memory) and transforms it into a more general, powereful,m and easy to use resource
        - Abstraction - Process
            - One of the most fundamental abstractions - basic unit of resource virtualization from the perspective of an application
        - Process - CPU acitivities and memory usage
            - What is a process?
                - Informal - a running program, exeuction stream: stream of instructions
            - Examples
                - Web browser, execute compiled program, shell
            - Process vs. Program
                - Program - lifeless thing, code, instructions
                - OS takes program and runs them
                - Program - passive
                - Process - active
                - Different processes may be associated with the same program
            -  Linux/Unix Commands
                - ps - list running processes - excluding some background
                - top - tabular view of running processes
        - Abstraction - A Process
            - What constitutes a process?
                - Machine state of a process
                    - What a program can read or update when it is running
                    - Take inventory of the different pieces of the system it accesses or affects during the coures of its exeuction
            - Machine State
                - Memory - address space
                - Program Code - instructions
                - Stack - local variables
                - Heap - dynamically alocated memory
                - Data - global variables
                - Design - stack can grow, heap can grow, split to increase the size of each, naturally boundary has to exist for a process
                - Registers
                    - Program Counter - indicating the instruction of the program that is currently being executed
                    - Stack Pointer and Frame Pointer - managing the stack for function parameters, local variables, and return addresses
                - I/O Information - a list of open files the process currently has open
            - Process States
                - Initial
                - Ready - ready to run
                - Running - executing instructions
                - Blocked/Waiting/Sleeping - not ready to run until some other events takes place
                - Zombie
                - Running depends on number of CPUs
            - CPU Bound and I/O Bound
                - CPU Bound - Majority time on CPU
                - I/O Bound - Majority time on I/O
            - Data Structures
                - Process List - list of processes
                - Process Control Block - struct object representing each process
                    - Identifier, state, cpu registers
                    - Scheduling, memory management, accounting, and I/O information
            - Xv6 Proc Data Structure
                - proc.h and proc.ch
                    - UNUSED - initial state
                - ptable is the process list inside of proc.c
    