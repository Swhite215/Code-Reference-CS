Database Systems

1. 01/06/2025 - Introduction
    - Topics
        - Basic Concepts
        - Entity Relationship Model
        - Relational Model
        - Relational Algebra
        - SQL Language
        - Missing Information and Views
        - Database Design
        - Query Optimization
        - Transaction Management
        - Non-Relational DBs and DB Security
    - Definitions
        - Data - facts or values obtained from observation or measurement
        - Information - interpretation of facts
        - Database (DB) - a collection of related persistent data used by an enterprise
            - Schema - description of the data (intension), changes infrequently
            - Instance - collection of data stored in the database at a particular moment in time (extension), changes frequently
        - Database System
            - Metadata - data about other data
            - Metalanguage - language used to describe another language 
            - Metasearch - search engine making use of other search engines
            - Software - database management system, utilities (loading, reorganizing, backup, analyzing), tools (design, development)
            - Hardware - secondary storage, memory, processors, DB machine
            - Users - users of database system
    - How to Manage Persistent Data
        - File Processsing - each application mananges its own information
            - Issues - redundancy, inconsistency
        - Database - data are integrated and shared
            - Benefits - reduction of redundancy, efforts, consistency, sharing, independence (change structure without affecting program) and abstraction, views, security restrictions, integrity constraints, data deduction, data retrieval
    - Data Independence - ability to modify a schema at one level without affecting the schema at the next higher level
        - Three Schema Architecture (ANSI/SPARC)
            - Internal Level - how data is stored in the storage medium
            - Conceptual Level - describes the logical structure of the entire DB
            - External Level - describes the part of the DB that a particular user group is interested in
        - Physical Data Independence - change internal schema without affecting conceptual schema or external schema
        - Logical - change conceptual schema without affecting external schemas
    - Data Model - a set of concepts for describing data types, relationships, constraints, semantics, and behaviors
        - Conceptual - object based logical models, describe data in terms of objects and interrelationships
            - Close to the way many users perceive data
            - Conceptual and external schemas
            - Examples - entity relationship model, object oriented model, semantic model, functional model
        - Implementation - record based logical model
            - Represent data using record structure
            - Conceptual and external schemas
            - Relational model, network model, hierarchical model
        - Physical Data Model - how data is stored in the computer
            - Internal schemas
            - Unifying model and frame memory
    - Database Lanaguage (DBL)
        - What - schema specifications
            - View Definition Lanaguage - external
            - Data Definition Language - conceptual
            - Storage Definition Language - internal schema
        - What - data manipulation
            - Data Manipulational Language (retrieve, insert, delete, modify, update)
        - What - data control
        - Data Control Language (privilege, transaction)
        - Uses of Database Language
            - Stand Alone - interactive, unplanned, data manipulation language (DML)
            - Embedded - embeded in host language, planned request, data sublanguage (DSL)
        - Unified Language
            - Database Programming Language - add DBL features to programming language
            - 4th Generation Language - add programming language to DBL
    - Other Interfaces
        - Call Level ODBC
        - Call Level JDBC
        - Menu, Form, Graphic, Natural Language, Voice, Combination
    - Database Users
        - Application Programmers, Casual, Parametric, Sophisticated, Stand Alone
        - Casual - interactive queries
        - Parametric - canned transactions
        - Sophisticated - full DBL
        - Stand Alone - menu/graphic interfaces
        - Database Administrator
            - Logical Design of Conceptual Schema
            - Internal Schema of Physical Design
            - External Schema for Users
            - Security Checks
            - DBS Maintenance (backup, recovery, performance)

2. 01/13/2025
    -  Database Management System Components
        - Examples
            - User - Database Administrator
                - Data Definition Language, Data Definition Language Compiler -> Produce System Catalog/Data Dictionary/Metadata
                - Privileged Commands -> Runtime Database Processors -> Create User, Grant Privileges, Manage the Database
            - User - Casual
                - Interactive Query -> Query Compiler (Validate Semantics and Syntax) -> Query Optimizer -> Runtime Database Processor -> Do A Thing
            - User - Application Programmers
               - Application Programs -> Precompiler (Host and Database Language) -> Host Langauge Compiler -> Compiled/Canned Transactions -> Runtime Database Processor -> Do A Thing
        - Concurrency Control
        - Backup/Recovery
        - Stored Data Manager (Buffer/Cache)
    - Main DBMS Functionality
        - Define a particular database
        - Construct or load initial content
        - Manipulate the database (retrieve or modify)
        - Processing and sharing by a set of concurrent users
        - Enforcing security restrictions
        - Presenting and visualizing data
        - Maintaining the database
        - Backing up and recovering the database
    - Database Architecture
        - Centralized Architecture - everything runs on a physical machine
            - Components - operating system, database management system, compilers, application programs, terminal, text editors, display monitors
            - Disadvantage - a lot of requirements for running this machine
        - Client/Server
            - Components - Server runs DBMS, client runs application
            - Thick Client - (Display and Applicaiton), Server - DBMS
                - Advantage - running application on client side, separate to enhance security
                - Disadvantage - if application needs a lot of data, communication cost is high
            - Thin Client - (Display), Server - Application and DBMS 
                - Advantage - quickly obtain data needed for the application
                - Disadvantage - security
            - Three Tier Architecture
                - Interface (Presentation) - Client
                - Application (Business Logic) - Web or Application Server
                - Data Access (Database Service) - Database Server
    - Database Classification
        - Models
            - Relational (Oracle)
            - Object Oriented (GemStone)
            - Network (IDMS)
            - Hierarchical (IMS)
            - Object Relational (Oracle)
            - XML (Lore)
        - Users
            - Single User (Advanced File Systems)
            - Multi-User
        - Sites
            - Centralized - all database in one place
            - Distributed - database in multiple locations
                - Homogenous - each site runs the same type of DBMS
                - Heterogenous - each site may use a different type of DBMS and DB
        - Purpose
            - General Purpose - any type of application
            - Special Purpose - embedded
    - Advanced Database System
        - Active DB - database will send results based on conditions
        - Distributed DB - manage database from multiple sites
        - Parallel DB - parallel processing for database system
        - Deductive DB - how to derive information from new data
        - Fuzzy DB - how to manage less precise data
        - Data Warehousing - centralize data from multiple databases for analysis
        - Data Mining - learn about your data and make discoveries
        - Spatial DB - queries or data related to location or space
        - Temporal DB - extend data with a time dimension
        - Multimedia DB - store multiple types of files e.g. iamges, videos, etc.
        - Mobile DB - data saved in mobile devices
        - Web DB - application, cookies, local, session
        - Real Time - must process data within a particular time constraint
        - Bioinformatics - genetics, large amount of data
        - Transaction Workflows
        - Database Security
        - Big Data
        - NoSQL Databases
    - Entity Relationship Models
        - Objective - ER, E-R, or E/R
            - Goal - used to model the real world and aligns with how many users perceive data
            - Goal - model the world during db design
        - Database Design Procedure
            - Requirements Collection and Analysis
                - Data Requirements - Data
                    - (ER) Conceptual Design - translate informal requirements to model what data should look like producing high level model and diagram (Enterprise Schema)
                    - Logical Design - convert conceptual design to model(s) for a specific database management system producing logical schema
                    - Physical Design - convert logical design to internal schema aware of storage producing an internal schema
                - Functional Requirements - Operations
                    - Functional Analysis - produce high level transaction specification
                    - Application Program Design - design how to enable transactions on a particular DBMS
                    - Transaction Implementation
        - Key Concepts
            - Entity - on object that exists and is distinguishable from other objects
                - Types
                    - Physical Entity - employee or car
                    - Conceptual Entity - department, project, holiday
                - Entity Set - a set of entities of the same type e.g. all employees or all projects, (RECTANGLE)
                - Entity Type - a set of characteristics that defines an entity set
                - Attribute - property of an entity you want expressely represented in the model - (OVAL)
                    - Composite - an attribute derived from a set of simple attributes concatenated together
                    - Simple - lowest level of singular attribute
                - Valued
                    - Single Valued - an attribute has a single value (SINGLE OVAL)
                    - Mulitvalued - an attribute can have multiple values (DOUBLE OVAL)
                        - Benefit - can store an extensible number of values
                        - Con - how do you distinguish between the values in meaningful ways?
                    - NULL
                - ...
                    - Base - value is value e.g. salary
                    - Derived - value can be obtained through analysis of other attributes e.g. age from birthdate
            - Relationship - an association among n entities
                - N - degree of the relationship
                    - N = 2, binary, employee works for a department
                    - N = 3, ternary, a supplier makes a particular part for a particular project
                    - N > 3, very rarely used
                - Relationship Set - a set of relationships of the same type
                - Relationship Type - a set of characteristics that define a relationship set (DIAMOND)
                - Role Name - signifies the role that an entity type plays in a relationship (normally omitted)
                - Single Link = Optional, Double Link = Required
            - Constraint

3. 01/21/2025
    - Relationship
        - Recursive Relationship Type - the same entity type participates more than once in a relationship type in different roles (role name must be used)
            - Example - Supervisor supervises supervisee, supervisee themselves supervisor others and supervisors themselvs are supervised
            - Role - on link indicate role, line from employee to supervision, 2, i.e. employee is subordinate to supervisor, or 1, employee supervises another
        - Attributes of Relationship
            - Hours, how long does an employee work on particular projects?
    - Constraints
        - Domain Constraint - the values of an attribute must come from its domain i.e. the set of allowed values
            - This is not represented in the ER diagram
            - Example - name is string of characters no greater than 64
        - Null - a special value representing not applicable, unknown, etc.
        - Uniqueness or Key Constraint
            - Key - one or more attributes that can uniquely identify an entity from an entity set
        - Mapping Constraints (Cardinality Ratio) - specify the # of relationship from a relationship type that an entity can participate in
            - Binary - 1:1, employee manages at most one department
            - One to Many - 1:M or M:1, many employees work for one department or one department has many employees
            - Diagram, place number of the line connecting the entity and the relationship type
            - Many to Many
            - Many to Many to Many
            - 1 to 1 to Many - one supplier builds a particular part for many projects
        - Participation Contraints
            - Total Participation - every entity from one entity type must have a relationship with at least one entity from another entity type
            - Partial Participation - otherwise
            - Note - you should not have double link on both sides, as it is necessary to create one entity first to establish relationship
    - Example - 1:00 - Review When Doing Homework #1
    - Enhanced Entity Relationship Concepts
        - Weak Entity Type - does not have any key of its own
            - Example - Dependent Entity of Employee: name, sex, birth, relationship
            - Identifying Relationship - Double Diamond of owner to weak entity type
            - How do we identify entities of weak entity type?
                - A weak entity can be uniquely identified by owner key + partial key
        - Specialization - process of defining a set of subclasses (subtypes) of an entity type
            - Example 
                - Employee Entity, Entity Set - name, ssn, birthdate, address
                - Secretary Entity, Entity Set += gwam
                - Engineer Entity, Entity Set += type
                - Salaried Entity, Entity Set += Salary
            - Notation = U from subtype to disjoint (d) on line showing relationship, or u from subtype to overlapping (o) on line showing relationship
                - Disjoint, no entity belongs to multiple subtypes
            - Note - an entity in a sub class inherits all the attributes of its corresponding entity in the superclass
            - Note - an entity in a sub class inherits all the relationships in which the corresponding entity in the superclass participates
        - Generalization - the process of defining a generalized entity type from the given entity types i.e. reverse of specialization
            - Example - you have Secretary, Technician, Engineer, and Manager entity types, they share common attributes, a generic entity can be derived for the shared common attributes
        - Condition Defined Specialization - define entity by value of an attribute to derive sub class
        - User Defined Specialization - each entity of a subclass is individually specified by the user
        - Disjointness Constraint - subclasses of a specialization are disjoint
        - Completeness Constraint
            - Total Specialization - every entity in superclass participates in a specialization
            - Partial Specialization - not every entity in superclass participates in a specialization
        - Specialization Lattice
            - Entity to Sub Entity to Sub Entity, etc...
        - Specialization Hierarchy

4. 01/27/2025
    - Enhanced Entity Relationship Concepts
        - Category (UNION) - a subset of the union of multiple superclasses (super class is independent)
            - Notation (u), single line is partial, double line is total
        - Aggregation - an abstraction through which relationships are treated as higher level entities
            - Example (REVIEW)
                - Entites - employee, project
                - Relationships - many employees work on many projects
                - Machinery is based on which employees work on which projects
    - Relational Model
        - Reality - no commerical database management system uses entity relational model to implement
        - Relational DBMS - Oracle, DB2, Sybase, SQL Server, Informix, Ingres, Paradox
        - Features
            - Advantages - simple (everything is tables), mathematical base
            - Concepts
                - Relation (Table)
                    - Domain - a set of atomic values
                        - Atomic - indivisible, conventional relational DB
                        - Composite - has components, nested relational DB and object-relational DB
                        - Specify - name and a data type
                    - Relational Schema - table heading made up of a name and a set of attributes
                    - Attribute - the name of a role played by a domain in the relational schema
                    - Relation Instance - table heading (relational schema) and a set of n-tuples (table rows)
                        - Subset of the cartesian production (all possible combinations): D1 x D2 x ... x Dn where Di = Domain(Ai) union null
                        - Ordering of tuples is unimportant
                        - Ordering of attributes is unimportant as long as the correspondence between attributes and their values is maintained
                        - There should be no duplicate tuples
                    - Relational Cardinality - how many rows in the table
                - Integrity Constraints - restrictions of values
                    - Domain - each value must come from the relevant domain
                    - NOT-NULL - NULL value is not allowed for an attribute if so specified
                    - Key Constraint
                        - Superkey - a set of one or more attributes which can uniquely identify a tuple in any relation instance of the given relation schema
                        - Candidate Key - a super key which contains no extraneous attributes i.e. no proper subset is a SK
                            - E.g. if you have student number and name as a super key, name is technically extraneous
                            - A relation may have several candidate keys, once specified uniques is enforced for them
                         - Primary Key - a candidate key that is chosen by the DB designer as the principle means of identifying tuples in a relation
                            - Only one primary key for a relation, attribute is underlined in the schema
                            - Entity Integrity Constraint - NULL is not allowed for any attribute in the Primary Key (USE THIS ON TEST)
                        - Primary Key -> Candidate Key -> Super Key
                        - Super Key != Candidate Key != Primary key
                    - Referential Integrity Constraint - ensure that a value that appears in one relation R for a given set G of attributes, must also appear for a Candidate Key in another relation S
                        - Foreign Key - each value for a Foreign Key can be either in the referenced relation or NULL, the referenced set of attributes do not have to be a Candidate Key
                    - Functional Dependency - X (a subset of attributes in the table) functionally determines Y (another subset of attributes in the table)
                        - Birthdate (X) determines age (Y), two instances of the same birthdate should produce the same age value, however two instances of age does not determine the same birthdate
                        - Student Number (x) determines Name, Birthdate, and Age (Y). Primary Key can determine any attribute
                    - Semantic Integrity Constraints
                        - User defined assertions e.g. age must be greater than 0 and less than 150
                - Relational Database
                    - Relational DB Schema - a set of relation schemas and a set of integriy constraints
                    - Relational DB Instance - a set of relation instances that satisfy all the integrity constraints
                - Operations

5. 02/03/2025
    - Relational Algebra
        - Key Database Operations
            - Retrieval
            - Insert
            - Delete
            - Update
        - Database Language
            - Abstract
                - Relational Algebra
                - Tuple Relational Calculus
                - Domain Relational Calculus
            - Commericial
                - SQL - Structured Query Language (All Above)
                - QBE (Domain Relational Calculus)
                - QUEL (Tuple Relational Calculus)
                - ISBL (Relational Algebra)
        - Algebra
            - Two Parts
                - Non empty set called domain
                - one or more operations on the domain
            - Example - Arithmetic Algebra
                - Domain - set of real numbers
                - Operation - additiona, substraction, division, multiplication
        - Relational Algebra
            - Property
                - Closure Property - each operation operates on one or more relations and returns one relation
            - Domain - set of relations or tables
            - Operations
                - Unary (One Table)
                    - Select - sigma - select tuples satisfying F (conditions) from R (relation)
                        - Example: Find the tuples for all projects controlled by department 4
                            - sigma where department = 4 from PROJECT relation
                            - Heading of result table is the same as the operand table
                        - Example: Find the tuples for all projects controlled by department 1 or located at Houston
                            - sigma
                                - where department = 1 OR location = Huston ffrom PROJECT relation
                        - Predicates - equal, not equal, less than, less than or equal to, greater than, greater than or equal to
                        - Logical Connectives - AND, OR, NOT
                    - Project - pi - project R (relation) over attributes in L (target attribute list) and REMOVE DUPLICATES tuples if any
                        - Example: List each employee's last name, first name, and salary
                            - pi list target attribute L [lname, fname, salary] from EMPLOYEE relation
                        - Example: Find the locations of all departments
                            - pi list locations from DEPT_LOCATIONS relation
                        - Example: Retrieve the number and location of each project controlled by department 4 (NESTED)
                            - pi list number and location FROM sigma where department = 4 FROM PROJECT relation
                            - Intermediate Relation - sigma where department = 3 FROM PROJECT relation
                - General Rename Operation
                    - Table name "S" or column names "B1", "B2", "BN"
                        - Note: required if both tables are the same name
                - Join
                    - Cartesian Product - ALL possible combination of tuples from relation R and relation S
                        - Name SNO      Grade SNO
                            X    4          A   4
                                            B   3
                        - Result
                            Name  SNO  Grade SNO
                            x     4    A     4
                            x     4    B     3
                    - Join
                        - Example: List all students name, sno, and grade i.e. sigma where student.SNO = grade.SNO (STUDENT x GRADE)
                        - This does not automatically eliminate duplicate columns, those have to be removed using a project operation e.g. you have SNO from both STUDENT relation and GRADE relation
                    - Natural Join
                        - Steps
                            - Perform Cartesian Product RxS
                            - Perform a Select to force equality on those attributes that appear in both relation R and relation S
                            - Remove Duplicate Columns
                        - Questions
                            - If you have multiple pairs of attributes? Then you need to make each pair equal to each other i.e. R.A = S.A AND R.B = S.B
                            - If you have no common attributes? Then the result is Cartesian Product
                - Set
                    - Union RuS
                        - Conditions R, S must be union compatible i.e. R, S have the same degree and domain of the ith attribute of R = domain of the ith attribute of S
                            - Degree = same number of columns
                            - Domain of ith attribute i.e. 1st column is integer for both tables
                        - Goal - get all tuples from both relations
                        - Example: Find all students and instructors
                    - Intersection RnS
                        - Condition R,S must be union compatible
                        - Goal - get all tuples that are in both relations
                    - Difference - R-S
                        - Condition R,S must be union compatible
                        - Goal - get all from R relation that are NOT in relation S
                    - Division R/S
                        - Example: find each student who has taken all courses required for B.Sc. Degree
                        - Goal - a tuple t is in R/S if for every tuple u in S the concatenation tu of t and u is in R
                        - Dividend - R
                        - Divisor - S
                        - Quotient - R/S

6. 02/10/2025
    - Relational Algebra
        - Basic Operations
            - Complete - a query is relationally complete if it can express any query expressible by select, project, cartesian product, union, and intersection
            - Work Horse - select, project, and join
        - Extended Operations
            - Generalized Project - allow arithmetic expressions to be used in target L
                - Example: List the SSN and the new salary of each employee, where the new salary = salary * 1.2
            - Aggregate Function Operation - grouping attributes, operand attributes, aggregate functions
                - SUM, AVG, MAX, MIN, COUNT, SUMD, AVGD
                - Input - Table
                - Parameter A - grouping attributes
                - Parameter B - operand attributes
                - Parameter F - aggregation function
            - Example - find the number of employees and the average salary for each dept
                - SELECT DISTINCT COUNT(ssn), department, AVG salary FROM employees group by dept
            - OUTER JOIN - extended natural join or general join
                - NATURAL JOIN - match from both tables
                - Left Outer Natural Join - take all tuples in R that do not match any tuple in S, pad them with NULL values for all other attributes in S, and add them to the result of the natural join of R x S
                - Right Outer Natural Join - take all tuples in S that do not match any tuple in R, pad them with null values for all other attributes in R, and add them to the result of the natural join of R x S
                -  Full Outer Join - take all tuples in R that do not match any tuple in S, and all tuples in S that do not match any tuple in R, pad them with null values for all other attributes in S and R respectively and add them to the result of the natural join of R x S
        - Other Operations - semijoin, semidifference, not tested
        - Updates
            - Insertion - union student and new tuple to insert the tuple
            - Deletion - difference of student and condition to remove tuples and then create neww result
            - Update - delete and then insert
        - Other Abstract Languages
            - Tuple Relational Calculus -  
            - Domain Relational Calculus - 
    - Structured Query Language
        - History - 1:00:00
        - Features - relationally complete, non-procedural, declarative
        - Overview - Integrated
            - Data Definition Language DDL
                - Create - schema, table, view, domain, index, etc
                - Alter - table, domain
                - Drop - schema, table, view, domain, index, etc
                - Grant - privileges
            - Data Manipulation Language DML
                - Select, Insert, Update, Delete
                - Transaction Commit - begin, commit, rollback
            - Usage Patterns
                - Interactively
                - Embedded
        - Detailed Information
            - DDL
                - CREATE SCHEMA [DB SCHEMA NAME] AUTHORIZATION [USER ID]
                - CREATE TABLE [TABLE NAME] {FIELD, DATA TYPE, CONSTRAINT}xN PRIMARY KEY [FIELD], FOREIGN KEY[FIELD]
            - DML
                - Query - SELECT ... FROM ... WHERE, duplicates not removed
                    - By default duplicates are not removed
                    
7. 02/17/2025
    - Queries
        - Two Way Join
            - Example - find the name and number of each department located in Houston
            - Example - SELECT d_name, DEPARTMENT.d_number from DEPARTMENT JOIN DEPT_LOCATIONS WHERE DEPARTMENT.d_number = DEPT_LOCATIONS.d_number and d_location = 'Houston'
        - Table Alias and Column Renaming
            - Table Alias - SELECT * FROM RELATION alias
            - Column Renaming - SELECT alias.field as name
        - N-Way join
        - Joined Table
            - R NATURAL JOIN S
            - R JOIN S USING a
            - R JOIN S ON R.a = S.a
            - R NATURAL LEFT OUTER JOIN S
            - R NATURAL RIGHT OUTER JOIN S
            - R NATURAL FULL OUTER JOIN S
            - R NATURAL INNER JOIN S
        - Nested Queries
            - SELECT * FROM WHERE (SELECT * FROM WHERE) - Outer Query (Sub Query)
            - A NOT IN (Sub Query)
            - A <COMP> ALL (Sub Query) - <COMP> - compare
            - NOT EXISTS (Sub Query)
            - NOT UNIQUE (Sub Query)
            - Correlated Nested Query - outer query field is used in sub query comparison
            - Example - Find the SSNs of employees who are in a research department but dont have dependents
                - SELECT * FROM DEPENDENT WHERE X.ssn = Y.ssn - employees that have dependents
                - NOT EXISTS (SELECT * FROM DEPENDENT WHERE X.ssn = Y.ssn) - employees that no not have dependents
                - SELECT * FROM DEPARTMENT Y WHERE X.dnumber = Y.dnumber and dname = 'Research'- employees in a research department
                - WHERE EXISTS (SELECT * FROM DEPARTMENT Y WHERE X.dnumber = Y.dnumber and dname = 'Research') - employees must be in
                - SELECT ssn from EMPLOYEE X
            - Aggregate Functions
                - MAX, MIN, AVG, COUNT, SUM
            - Grouping
                - Example - find the average salary for each department
                    - SELECT number, avg(salary) from employee GROUP by number
                - Example - Find the average salary for each department which has at least three employees
                    - SELECT number, average salary from EMPLOYEE, group by number HAVING COUNT(*) >= 3 - removes a group if count is < 3
        - General Query Structure
            - SELECT DISTINCT items [Attributes, Aggregate, Arithmetic]
            - FROM tables
            - WHERE condition - OPTIONAL
            - GROUP BY columns - OPTIONAL
            - HAVING condition - OPTIONAL
            - ORDER BY columns - OPTIONAL
            - Execution Order
                - FROM tables
                - WHERE condition
                - GROUP by columns
                - HAVING condition
                - SELECT DISTINCT items
                - ORDER by columns
        - Queries with Set Operations - both must be union compatible same number of columns and same domain
            - Query 1 UNION Query 2
            - Query 1 INTERSECT Query 2
            - Query 1 EXCEPT Query 2
            - NOTE: duplicates by default are removed
    - Updates
        - INSERT
            - Ways
                - INSERT Command - INSERT INTO PROJECT VALUES ()
                    - INSERT INTO TABLE Sub Query - INSERT INTO DEPENDENT SELECT * FROM EMPLOYEE
                - Load Utility
        - DELETE
            - DELETE FROM TABLE WHERE CONDITION
        - UPDATE
            - UPDATE TABLE SET attribute = value WHERE CONDITION
    - Embedded SQL
        - Setup
            - Shared Variable Declaration
            - EXEC SQL BEGIN DECLARE SECTION ; CODE ; EXEC SQL END DECLARE SECTION ;
            - CONNECT TO <SERVER NAME> AS <CONNECTION NAME> AUTHORIZATION <USER ID AND PASSWORD
            - SET CONNECTION <CONNECTION NAME>
            - DISCONNECT <CONNECTION NAME>
        - Singleton Retrieval
            - into - used in embedded sql statement to store retrieved sql data in program variables for use.
        - Multi-Tuple Retrieval
            - EXEC SQL DECLARE EMP CURSOR FOR SELECT <columns> FROM TABLE WHERE <conditions> FOR UPDATE OF
            - EXEC SQL OPEN EMP - query executed and cursor set
            - EXEC SQL FETCH FROM TABLE into <variables> - get data from cursor and advance
            - Repeatedly call fetch untill nothing remaiuns
            - EXEC SQL CLOSE EMPY - close cursor
            - Cursor - Pointer to beginning of results, move cursor to get the next tuple, fetch advances the cursor and gets values
        - Dynamic SQL - sql can be generated during program execution, as opposed to static sql

7. 02/24/2025
    - Missing Information
        - Issue - NULLs in database lead to a lot of problems
        - Types - unknown, not applicable, does not exist, undefined
        - NULL for Scalar Expression - mathematic epxression that involves a NULL value
            - Exceptions 
                - SUM, AVG, MAX, MIN ignore any NULL in the argument
                - COUNT - NULLs are treated as non NULL values
        - NULL Converting Operator
            - IF NULL(e1, e2) - e1 if e1 NOT NULL, else e2
            - COALESCE(CITY, 'City Unknown) - replace with another value if NULL
        - 3 Valued Logic
            - Age > 30
                - true - age > 30
                - false - age <= 30
                - unknown - age is NULL
            - General Rule - you get unknown if any value is NULL
            - Example - Find the lasat names of employees in dept. 4 who dont have a middle initial
                - WRONG - SELECT LNAME FROM EMPLOYEE WHGERE MINIT = NULL AND DNUM = 4
                - CORRECT - SELECT LNAME FROM EMPLOYEE WHERE MINIT IS NULL AND DNUM = 4
            - Table - 23:00
            - Example
                - A = 3, B = 4, and C = NULL
                - (A > B AND B = C) - false
                - NOT(A > C) - unknown
                - Maybe (A < B) - false
                - Maybe (B > C) - true
                - SELECT Name FROM STUDENT WHERE age > 30 IS UNKNOWN
        - Question
            - Can we treat truth value unknown as false before the end? No
            - Example - NOT (Age > 30)
                - If Age > 30 is unknown, and false, then result is true
                - IF Age > 30 is true, then result is false
        - Duplicates and Ordering
            - ALL NULLs are considered to be equal to one another for ordering and duplicates removing purposes
            - NULLs are > or < all non-null values for ordering purposes, depending on the system
            - Integrity constraint is violated if it is fale i.e. true and unknwon are ok
                - Age > 0 => NULL allowed
                - Null value theory still has many flaws
    - Views
        - Definition - a virtual table that is derived (as the rsult of a query) from other tables, but itself may not physically exist in DB
            - A window into the underlying data
            - A named, derived, un-materialized table
            - snapshot - named, derived, materialized, read only -> need to be refreshed periodically
        - Advantages - logical data independence, security, different views, shorthand
        - Create
            - CREATE VIEW name columns AS query
            - CREATE VIEW name AS (SELECT LNAME, SSN, SALARY FROM EMPLOYEE WHERE DNO = 5)
        - Drop
            - DROP VIEW name
        - Query
            - SELECT * FROM view WHERE CONDITION
        - Processing Technqiues
            - View Materialization - evaluate the view first, then query the result
            - Query Modification - merge the view and query to get a new query
        - Update
            - Note - views are not always updatable, views using aggregate functions are usually not updatable
            - UPDATE VIEW SET Salary = Salary * 1.05
            - INSERT INTO view VALUES ()
                - INSERT INTO EMPLOYEE VALUES () - WITH CHECK can work
                - INSERT INTO, missing primary key should cause UPDATE to fail
    - Relational Database Design
        - Review
            - Entity Relationship Model - Entity
            - Relational Database Model - Relations
        - ER to Relation Mapping
            - Regular Entity Type (New Table)
                - Example - Employee
                - Convert to Table - EMP(Employee #, First Name, Middle Name, Last Name, Salary)
                - Multivalued Attribute - PHONE(Phone # and Employee #) - create separate table
            - Weak Entity Type (New Table)
                - Example Employee and Dependents
                - Convert to Table - Dependent([Employee SSN, Name], Sex, Birth Date, Relationship)
            - Many to Many Relationship Type - New Table
                - Example - Employees and Projects
                - Create PROJ_WORK([Employee # FK, Project # FK], Hours Worked)
            - One to One Relationship (If, Pick Required Relation to Add)
                - Example - Department and Manager
                - Create Management Table (Employee # FK, Department # FK, Start Date) - NOT OPTIMAL
                - Add to Employment Table (Employee #, ...., Department #) - NOT OPTIMAL - an employee may not manage a department
                - Add to Department Table (Department #, ..., Employee #) - BEST - every department must have a manager
            - One to Many Relationship (Pick the M Side)
                - Create Project Management Table (Employee #, Project #, Start Date) - NOT OPTIMAL
                - Add to Project Table (Project #, ..., Start Date, Emp#)
            - Weak Entity with M:M Relationship
                - Example - one dependent with multiple employees, employees with multiple dependents
                - Create Dependency Table (SSN, Name, Sex, Rel) - redundant
                - Create Dependency Table w/Attributes as Key and Employee Dependency Table
                - Use an Artificial Key - key does not belong to
            - N-Ary Relationship
                - Example - Project, Supplier, Part
                - Create Table (S#, Project#, Part#, EXTRA)
            - Specialization and Generalization
                - Examlple - Employee with Secretary Specialization
                - Create Secretary Table (Employee #, EXTRA)
            - Category (Union)
                - Example - (Person, Bank, Company) u Owner
                    - Create Surrogate Key - OwnerID, in Bank/Company numerical, in Person, SSN
                - Example - (Car, Truck) u Registered Vehicle
                    - Add Vehicle ID
            - Aggregate
                - Example - Employee, Project, Employee Works On, Machinery
                - Create Uses (Employee #, Project #, Machine #)
            