1. Performance Measurement with Pprof - Github
    a. pprof
        - What - tool for visualization and analysis of profiling data
        - Pattern
            - Read a collection of profiling samples in profile.proto format
            - Generate reports to visualize and help analyze the data
        - Output - text and graphical reports
        - Profile
            - profile.proot is a protocol buffer that describes a set of callbacks and symbolization information
            - common use - represent a set of sampled callstacks from statistiscal profiling
        - Sources - local file or over http
        - Tools - addr2line and nm to symbolize machine addresses
    b. pprof profiles
        - What - pprof operates on data in the profile.proto format
        - Samples - associated to a point in a location hierarchy, one or more numeric values, and a set of labels
        - Example - data collected through statistical sampling of a program, so each sample describes a program call stack and a number or value of samples collected at a location
    c. Usage Modes
        - Report Generation
            - pprof <format> [options] source - will generate a report in the specified format and exit
        - Interactive Terminal Use
            - pprof [options] source - start an interactive shell in which the user can type commands
        - Web Interface
            - pprof -http=[host]:[port] [options] source - start serving http requests on the specified port
        - Details
            - Objective of pprof is to generate a report for a profile
            - Report is generated from a location hierarchy which is reconstructed from the profile samples
            - Location Values
                - flat - the value of the location itself
                - cum - the value of the location plus all its descendants
                - Note* - samples that include a location multipole times (e.g. recursive functions) are counted only once per location
    d. Options
        - What - configures the contents of a report
        - Values - boolean, numeric, strings
        - Common Options
            - -flat, -cum - sort entries based on their flat or cumulative value respectively on text reports
            - -functions, -filefunctions, -files, -lines, -addresses - generate the report using the specified granularity
            - -noinlines - attribute inlined functions to their first out-of-line caller
            - -nodecount - maximum number of entries in the report, pprof will only print this many entries and will use heuristics to select which entries to trim
            - -focus - only include samples that include a report entry matching regex
            - -ignore - do not include samples that include a report entry matching regex
            - -show_from - do not show entries above the first one that matches regex
            - -show - only show entries that match regex
            - -hide - do not show entries that match regex
            - -tagfocus - restrict to samples with tags matched by regexp or in range
            - -tagignore - discard samples with tags matched by regexp or in range
            - -tagcous=tagName=value - restict to samples with specific tag
    e. Tag Filtering
        - Tag - samples can have tags i.e. name and value, that pprof can use for filtering
        - The regex value is compared to each value associated with each tag
    f. Text Reports
        - What - pprof text reports show the location hierarchy in text format
        - -text - prints the location entries, one per line, including the flat and cum values
        - -tree - prints each location entry with its predecessors and successors
        - -peek = print hte location entry with all its predecessors and successors, without trimming any entries
        - -traces - prints each sample with a location per line
    g. Graphical Reports
        - What - pprof can generate graphics reports on the DOT format, and convert them to multiple formats using the graphviz package
        - These reports represent the location hierarchy as a graph, with a report entry represented as a node
        - Nodes are removed using heuristics to limit the size of the graph, controlled by the nodecount option
            - -dot - generate a report in .dot format, all other formats are generated from this one
            - -svg - generates a report in SVG format
            - -web - generates a report in SVG format on a temp file and starts a web browser to view it
            - -png, -jpg, -gif, -pdf - generates a report in these formats
    h. Interpreting the Callgraph
        - Node Color
            - large positive cum values are red
            - large negative cum values are green
            - cum values close to zero are gray
        - Node Font Size
            - large font means larger absolute flat values
            - smaller font means smaller absolute flat values
        - Edge Weight
            - thicker edges indicate more resources used
            - thinner edges indicate fewer resourcees used
        - Edge Color
            - large positive values are red
            - large negative values are green
            - values close to zero are grey
        - Dashed Edges - some locations between the two connected locations were removed
        - Solid Edges - one location directly calls the other
        - Edge Marker - the call has been inclined into the caller
    i. Annotated Code
        - What - pprof can also generate reports of annoated source with samples associated to them
        - Note - the source or binaries must be locally available, and the profile must contain data with the appropriate level of detail
        - Source File Locations - current working directory or ancestors
        - Binaries - $PPROF_BINARY_PATH environment variable, default is $HOME/pprof/binaries
        - binutils - used to examine and disassemble the binaries, source is $PPROF_TOOLS
        - Options
            - -list - generates an annotated source listing for functions matching regex, with flat/cum values for each source line
            - -disasm - generates an annotated disassembly listing for functions matching regex
            - -webslit - generates a source/assembly combined annotated listing for functions matching regex, and starts a web browser to display it
    j. Comparing Profiles
        - What - pprof can substract one profile from another, provided the profiles are of compatible types e.g. heap profiles
        - Options
            - -diff_base - useful for comparing two profiles, percentages in the oputput are relative to the total of samples in the diff base profile
            - -base - usesul for subtracting a cumulative profile, like a golang block profile, from another cumulative profile collected from the same program at a later time
            - -normalize - scales the source profile so that the total of samples in the source profile is equal to the total of samples in the base profile prior to subtracting the base profiles from the source profile
    k. Fetching Profiles
        - What - pprof can read profiles from a file or directly from a URL over http or https, native format is a gzipped profile.proto file
        - Options
            - -seconds - makes pprof request for a profile with the specified duration in seconds, only makes sense for profiles based on elapsed time, such as CPU profiles
            - -timeout - makes pprof wait for the specified timeout when retrieivng a profile over https
            - -tls_cert - file containing the TLS client certificate to be used when fetching and symbolizing profiles
            - -tls_key - file containing the TLS private key to be used when fetching and symbolizing profiles
            - -tls_ca - file containing the certificate authority to be used when fetching and symbolizing profiles
    l. Symbolization
        - What - pprof can add symbol information to a profile that was collected only with address information, this is useful for profiles for compiled languages, where it may not be easy or even possible for the profile source to include function names or source coordinates
        - Action - pprof can extract the symbol information locally by examining the binaries using the binutils tools
        - Options
            - -symbolize=none - disables any symbolization from pprof
            - -symbolize=local - only attempts symbolizing the profile from local binaries using the binutils tools
            - -symbolize=remote - only attempts to symbolize running jobs by contacting their symbolization handler
            - -symbolize=demangle=none - do not perform demangling
            - -symbolize=demangle=full - demangle, but do not perform any simplification
            - -symbolize=demangle=templates - demangle and trim function parameters
        - Source - for local symbolization, pprof will look for the binaries on the paths specified by the profile, and then it will search for them on the path specifid by $PPROF_BINARY_PATH
            - Command - pprof /path/to/binary profile.pb.gz
        - Action - pprofl will by default attempt to demangle and simplicy C++ names
    m. Web Interface
        - What - when the user requests a web interface, pprof starts a web server and opens a browser window pointing at that server, allows use to interactively view profile data in multiple formats
    n. Config
        - What - allows the user to save the current refinement settings as a named configuration
        - Menu
            - Save As - current refinement settings are saved under a specified name
            - Default - switches back to the default view by removing all refinements

2. Understanding a C++ Program's Memory Usage with Pprof - https://www.thoughtspot.com/codex/understand-c-programs-memory-usage-pprof
    - Goal - use pprof to analyze memory usage
    - Step #1 - Getting an SVG presentation of the current heap allocations
        1. Import a copy of the binaries of the service you would like to profile to your local machine
        2. Get a copy of the heapz_dump (the currently heap allocated memory by the service)
        3. Confirm you have pprof on your machine: which pprof
        4. Run pprof in interactive shell mode, passing the binary as the first argument and the heapz_dump files as the second
            - pprof binary heapz_dump
        5. Run web, this will load a webpage with the SVG, find log line 'Loading web page file:////tmp/pprof15228.0/svg'
        6. Copy using scp: scp <user>@<IP>:/tmp/pprof15228.0.svg
    - Step #2 - Inspecting the memory SVG
        - Top Left - name of service, total heap memory recorded, size of nodes dropped
        - Each node includes:
            - Name of the function
            - Memory it is currenlty holding
            - Memory currently held by its children
        - Important - image is a snapshot in time of where memory is currently allcoated in the service
        - Important - pprof does not include stack memory
    - Step #3 - Additional Useful Commands
        - Generate SVG without dropping any nodesx or edges - pprof -nodefraction=0 -edgefraction=0  user_usage_service_main heapz_dump
        - See memory on the heap for specific functions
            - env HEAPPROFILE=pprof_memory ./build-dbg/<name of your service test binary>
            - pprof --lines --stacks --show_bytes --text --alloc_space ./build-dbg/<your service test binary>  pprof_memory.0001.hea
    - Step #4 - Important Notes and Caveats
        - SVG is not 100% of the memory taken by the program
        - You can increase the sampl rate

3. Profile Proto Format
    a. Overview
        - Purpose - data representation for profile data, independent of the type of data being collected and the sampling process used to collect that data
        - Representation - gzip compressed protocol buffer, described at src/proto/profile.proto
        - Profile - collection of samples, each one representing measurements performed at a certain point in the life of a job
            - Sample associates a set of measurement values with a list of locations, commonly representing the program call stack when the sample was taken
    b. General Structure of a Profile
        - Profile Message Fields
            - sample - a profile samples, with the values measured and the associated call stack as a list of location ids, samples with identical call stacks can be merged by adding their respective values, element by element
            - location - a unique place in the program, commonly mapped to a single instruction address, source information in the form of lines, and a mapping id that points to a binary
            - function - a program function as defined in the program source, nonzero ID, human readable name, system name, source file, and other fn attributes
            - mapping - binary that is part of the program during the profile collection, includes details on how the binary was mapped during program execution
            - string_table - all strings in the profile are represented as indices into this repeating field
    c. Measurement Values
        - Representation - 64 bit integer
        - ValueType Message
            - Type - human readable description of the type semantics, e.g. cpu to represent CPU time, will or time to wallclock time, or mmeory for bytes allocated
            - Unit - human readable name of the unit represented by the 64 bit integer values e.g. nanoseconds or milliseconds for a time value, bytes or megabytes for a memory size, count for number of events
        - Note - a profile can represent multiple measurements per sample, but all samples must have hte same number and type of measurements
    d. Locations, Functions, and Mappings
        - C++/GO - Unsymbolized Profiles - only contain instruction addresses, and are to be symbolized by a separate tool, it is critical for each location to point to a valid mapping
        - Symbolized Profile - contain all the symbol information available for the profile, mappings and instruction addresses are optional for symbolized location
    e. Lables
        - Purpose - annotations to discriminate samples with identical locations
        - Type - string or numeric
    f. Keep and Drop Expressions