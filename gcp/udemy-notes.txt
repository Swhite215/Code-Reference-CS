GCP For Beginners - Becomer a Google CLoud Digital Leader

1. Introduction to GCP
    - Challenges
        - High cost of procuring infrastructure
        - Ahead of time planning
        _ Low infrastructure utilization
        - Dedicated infrastructure team
    - Solution/Benefits
        - On-demand resource provisioning or elasticity
        - Trade captial expense for variable expense
        - Benefit from massive economies of scale
    - Google Cloud Platform
        - One of top three cloud providers
        - 200+ services
        - Relibale, secure, and highly performant

2. Regions and Zones
    - Challenge
        - Providing low latency
        - Enabling high availability
        - Adhering to regulations
    - Solution
        - Regions - 20+ - specific geographic location to host your resources
        - Zones - achieving high availability in a specific region, increased fault tolerance
            - Cluster - distinct physical infrastructure that is housed in a data region

3. Compute Engine, Instance Groups, and Load Balancing
    - Compute Engine - Provision and Manage Virtual Machines
        - Create and manage lifecycle of VMs
        - Load balancing and auto scaling for multiple VM instances
        - Attach storage to your VM instances
        - Manage network connectivity and configuration for VM instances
    - IP Addresses
        - Internal - permanent internal IP address that does not change during the lifetime of an instance
        - External - IP address that changes when an instance is stopped
        - Static - permanent external IP address that is associated with an instance
    - Quick Setup
        - Start-Up Script
            - Bootstrapping - install OS patches or software when a VM is launched
            - Management -> Startup Script
        - Instance Templates
            - Define machine type, images, labels, startup script, and other properties
            - Can be used for managed instance groups
            - CANNOT be updated
            - Virtual Machines -> Instance Templates
        - Custom Image
            - Customize images to your corporate security standards - hardened
            - Use over start up to reduce boot up time
            - Storage Disks -> Disk -> Actions -> Create Image
    - Sustained Use Discounts
        - Automatic discounts for running VM instances for significant portion of the billing month
        - Discount increases with usage
        - Applicable for Google Kubernetes Engine and Compute Engine
        - Does not apply to certain machines or App Engine Flexible and Dataflow VMs
    - Committed Use Discounts
        - For workloads with predictable resource needs e.g. VM for 1-3 years
        - Higher discount than sustained use discount
        - You cannot cancel commitments
    - Preemptible Virutal Machines
        - Short lived cheap compute instances
        - Maximum runtime of 24 hours
        - Instances get 30 seconds warning before being stopped
        - Use
            - Application is fault tolerant
            - You are cost sensitive
            - Your workload is not immediate e.g. batch processing
        - Not always available
        - No SLA
        - Cannot be migrated to regualr VMs
        - No automatic restarts
    - Spot VMs - latest version of preemptible VMs
        - Does not have a maximum runtime
    - Sole Tenant Nodes
        - Default is Shared Tenancy - Single host machine can have instances from multiple customers
        - Virtualized instances on hardware are dedicated to one customer
        - Sole-Tenant Nodes -> Create a Node Group -> Label and VM Instance -> Sole Tenancy -> Node Affinity Label
        - Security and Compliance Requirements
        - High Performance Requirements
        - Licensing Requirements
    - Custom Machine Types
        - Adjust vCPUs, memory, and GPUs
        - Choose between E2, N2, or N1
        - Billed per vCPUs and memory provisioned
        - VM Instances -> Machine Type -> Custom
    - Primary Costs
        - Infrastructure Costs - CPUs, RAM, Disks
        - Licensing Costs - Operating Systems
            - Options
                - Pay as you go - PAYG
                - Use existing license - BYOS or BYOL
    - Instance Groups
        - Group of VM instances managed by a single entity
        - Types
            - Managed - identical VMs created using a template
                - Features: auto scaling, auto healing, and managed releases
            - Unmanaged - different configuration for VMs in same group
                - None of the managed features
        - Location can be Zonal or Regional
        - Managed Instance Groups
            - Identical VMs created using an instance template
            - Maintain certain number of instances
            - Detect application failures using health checks
            - Increase and descrease instances based on load
            - Add load balancer to distribute load
            - Release new application versions without downtime
            - Rolling updates
            - Canary Deployment - test new version with a group of instances before releasing it across all instances
    - Creating Managed Instance Group
        - Create instance template
        - Configure auto scaling, min/max instances and autoscaling metrics, cool down, scale in control, auto healing
    - Load Balancing
        - Distribute traffic across VM instances in one or more regions - global
        - Managed Service
            - Google Cloud ensures it is highly available
            - Auto scales to handle huge loads
            - Public or Private
        - Types
            - External HTTP(S)
            - Internal HTTP(S)
            - SSL Proxy
            - TCP Proxy
            - External Network TCP/UDP
            - Internal TCP/UDP
        - Network Services -> Load Balancing
            - Backend Configuration - Managed Instance Group
            - Host and Path Rules
            - Frontend Configuration - URL for Load Balancer
    
4. Managed Services
    - Infrastructure as a Service
        - Use infrastrucutre from cloud provider e.g. using VM to deploy applications
        - You responsible for:
            - Application Code and Runtime
            - Configuring Load Balancing
            - Auto Scaling
            - OS Upgrades and Patches
            - Availability
    - Platform as a Service
        - Use a platform provided by cloud
        - Cloud Provider responsible for:
            - OS
            - Application Runtime
            - Auto Scaling, Availability and Load Balancing
        - You responsible for:
            - Configuration
            - Application Code
        - Examples - FaaS, CaaS, Databases, Queues, 
    - Function as a Service
    - Container as a Service
        - Microservices - small focused microservices, flexibility to innovate, deployments are increasingly complex
        - How can we have one way of deploying? Containers
        - Advantages of CaaS
            - Runs same way on any infrastructure
            - Lightweight, isolated, and cloud neutral
        - Container Orchestration
            - Solutions - Kubernetes
            - Features - auto scaling, service discovery, load balancing, self-healing/resiliency, zero downtime deployments
    - Databases
    - Serverless
        - Servers are abstracted away meaning you dont need to worry about infrastructure, get scaling and high availability
        - Pay for Use
        - Function as a Service - Google Functions
    - Software as a Service
        - Centrally hosted software on the cloud offered on a subscription basis
        - Examples - email, calendars, office tools
    - Shared Responsibility Model
        - Security is a shared responsibility between GCP and a customer
        - GCP Features
            - Encryption at rest, IAM, KMS
        - Customer Responsibilities
            - SaaS - Content, Access Policies, and Usage
            - PaaS - SaaS, Deployment, and Web Application Security
            - IaaS - PaaS, Operations, Network Security, and Guest OS
    - GCP Managed Services for Compute
        - Compute Engine - VMs - IaaS
        - Google Kubernetes Engine - Containers and Orchestration - CaaS
        - App Engine - Scalable Managed Platform - PaaS, CaaS, Serverless
        - Cloud Functions - Event Driven Simple Applications - FaaS, Serverless
        - Cloud Run - No Cluster Containerized Application - CaaS, Serverless

5. Google Cloud Computer Services
    - App Engine
        - Overview
            - Simplest way to deploy anbd scale applications in GPC
            - Supports multiple langauges, containers, connection to other products
            - No Usage charges, pay for resources provisioned
            - Features
                - Automatic load balancing and scaling
                - Managed platform updates
                - Application versioning
                - Traffic splitting
            - PaaS, Serverless, Lower Responsibility, Lower Flexibility
        - Environments
            - Standard - application run in language specific sandboxes
                - V1 - old version of langauges
                - V2 - newer versions of languages
                - Complete isolation from OS/Disk
                - Supports scale down to zero instances
            - Flexible - application instances run within Docker containers
                - Supports any runtime
                - Makes use of compute engine virtual machines
                - Canot scale down to zero instances
        - Create App Engine
            - Enable API
            - Load code editor
            - Load code with app.yaml
            - Set project in cloudshell
            - Go to IAM and Admin, update member to role Storage Object Viewer
            - Run gcloud app deploy
            - Run another using gcloud app deploy --version=v2
            - Commands
                - gcloud app services list - show serviecs
                - gcloud app versions list - show versions
                - gcloud app instances list - show instances
                - gcloud app browse - link to active version
                - gcloud app browse --version <ID> - link to old version
    - Service Categories and Scenarios
        - VM - IaaS
        - Gmail - SaaS
        - App Engine - PaaS
    - Google Kubernetes Engine
        - Overview
            - Cluster Management - Different VMs
            - Orchestration - auto scaling, service discovery, self healing, zero downtime, auto repair, auto upgrade, pods and cluster scaling
            - Integrates with Cloud Logging and Cloud Monitoring
            - Provides support for persistent disk and local SSD
        - Demo - Creating a GKE Cluster
            - Enable API
            - Create a kubernetes cluster with the default node pool - gcloud container clusters create
                - Cluster Mode
                    - Standard - customer manages  node configuration and pay per node
                    - Autopilot - reduce operational cost in running cluster
            - Connect to project - gcloud config set project <project>
            - Connect to cluster - gcloud container clusters get-credentials my-cluster --zone <zone> -c --project <project>
            - Create deployment - kubectl create deployment <deployment> --image=<image>
            - Get deployment - kubectl get deployment
            - Expose deployment/Create a service - kubectl expose deployment <deployment> --type=LoadBalancer --port=8080
            - Get Service - kubectl get services
            - Increase instances - kubectl scale deployment <deployment> --replicas=3
            - Get pods - kubectl get pods
            - Decrease nodes - gcloud container clusters resize <cluster> --node-pool <pool> --num-nodes=2 --zone=<zone>
            - Setup autoscaling microservice - kubectl autoscale deployment <deployment> --max=4 --cpu-percent=70
                - Horizontal pod autscaling hpa is created
            - Get hpa - kubectl get hpa
            - Auto scale cluster - gcloud container clusters update <cluster> --enable-autoscaling --min-nodes=1 --max-nodes=10
            - Delete service - kubectl delete service <service>
            - Delete deployment - kubectl delete deployment <deployment>
            - Delete cluster - gcloud container clusters delete <cluster> --zone <zone>
    - Google Cloud Functions
        - Overview
            - Goal - execute some code when an event happens e.g. file upload, error log, message in Pub/Sub
            - Pay only for what you use, invocations, compute time, amount of memory and cpu provisioned
            - Each execution runs in a separate instance
        - Demo
            - Enable API
            - Generations - difference in timeout and memory that can be allocated
            - Configuration -> Code -> Deploy
    - Cloud Run and Cloud Run for Anthos